//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics.CodeAnalysis;


namespace MinecraftMods
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        private global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace MinecraftMods.MinecraftMods_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;
        
        private void InitTypeTables()
        {
            _typeNameTable = new string[69];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "FluentIcons.WinUI.SymbolIcon";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Controls.FontIcon";
            _typeNameTable[6] = "FluentIcons.Common.Symbol";
            _typeNameTable[7] = "System.Enum";
            _typeNameTable[8] = "System.ValueType";
            _typeNameTable[9] = "FluentIcons.Common.IconVariant";
            _typeNameTable[10] = "MinecraftMods.Controls.IconButton";
            _typeNameTable[11] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[12] = "String";
            _typeNameTable[13] = "CommunityToolkit.Mvvm.Input.IRelayCommand";
            _typeNameTable[14] = "WinUIEx.WindowEx";
            _typeNameTable[15] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[16] = "Microsoft.UI.Windowing.AppWindow";
            _typeNameTable[17] = "WinUIEx.Icon";
            _typeNameTable[18] = "WinUIEx.WindowState";
            _typeNameTable[19] = "Microsoft.UI.Windowing.AppWindowPresenter";
            _typeNameTable[20] = "Microsoft.UI.Windowing.AppWindowPresenterKind";
            _typeNameTable[21] = "Double";
            _typeNameTable[22] = "WinUIEx.SystemBackdrop";
            _typeNameTable[23] = "Microsoft.UI.Xaml.Media.MicaBackdrop";
            _typeNameTable[24] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[25] = "Microsoft.UI.Composition.SystemBackdrops.MicaKind";
            _typeNameTable[26] = "CommunityToolkit.WinUI.Animations.ImplicitAnimationSet";
            _typeNameTable[27] = "Microsoft.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[28] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[29] = "CommunityToolkit.WinUI.Animations.OffsetAnimation";
            _typeNameTable[30] = "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>";
            _typeNameTable[31] = "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>";
            _typeNameTable[32] = "CommunityToolkit.WinUI.Animations.Animation";
            _typeNameTable[33] = "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>>";
            _typeNameTable[34] = "CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>";
            _typeNameTable[35] = "System.Nullable`1<Microsoft.UI.Xaml.Media.Animation.EasingMode>";
            _typeNameTable[36] = "Microsoft.UI.Xaml.Media.Animation.EasingMode";
            _typeNameTable[37] = "System.Nullable`1<TimeSpan>";
            _typeNameTable[38] = "TimeSpan";
            _typeNameTable[39] = "System.Nullable`1<CommunityToolkit.WinUI.Animations.EasingType>";
            _typeNameTable[40] = "CommunityToolkit.WinUI.Animations.EasingType";
            _typeNameTable[41] = "CommunityToolkit.WinUI.Animations.RepeatOption";
            _typeNameTable[42] = "Microsoft.UI.Composition.AnimationDelayBehavior";
            _typeNameTable[43] = "CommunityToolkit.WinUI.Animations.OpacityAnimation";
            _typeNameTable[44] = "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>";
            _typeNameTable[45] = "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>";
            _typeNameTable[46] = "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>>";
            _typeNameTable[47] = "CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>";
            _typeNameTable[48] = "System.Nullable`1<Double>";
            _typeNameTable[49] = "CommunityToolkit.WinUI.Controls.TitleBar";
            _typeNameTable[50] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[51] = "CommunityToolkit.WinUI.Controls.DisplayMode";
            _typeNameTable[52] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[53] = "Int32";
            _typeNameTable[54] = "DevWinUI.PagerControl";
            _typeNameTable[55] = "DevWinUI.PagerControlDisplayMode";
            _typeNameTable[56] = "DevWinUI.PagerControlButtonVisibility";
            _typeNameTable[57] = "System.Windows.Input.ICommand";
            _typeNameTable[58] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[59] = "DevWinUI.PagerControlTemplateSettings";
            _typeNameTable[60] = "FluentIcons.WinUI.SymbolIconExtension";
            _typeNameTable[61] = "Microsoft.UI.Xaml.Markup.MarkupExtension";
            _typeNameTable[62] = "System.Nullable`1<FluentIcons.Common.Symbol>";
            _typeNameTable[63] = "System.Nullable`1<FluentIcons.Common.IconVariant>";
            _typeNameTable[64] = "System.Nullable`1<Boolean>";
            _typeNameTable[65] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[66] = "MinecraftMods.MainWindow";
            _typeNameTable[67] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[68] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[69];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::FluentIcons.WinUI.SymbolIcon);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Controls.FontIcon);
            _typeTable[6] = typeof(global::FluentIcons.Common.Symbol);
            _typeTable[7] = typeof(global::System.Enum);
            _typeTable[8] = typeof(global::System.ValueType);
            _typeTable[9] = typeof(global::FluentIcons.Common.IconVariant);
            _typeTable[10] = typeof(global::MinecraftMods.Controls.IconButton);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[12] = typeof(global::System.String);
            _typeTable[13] = typeof(global::CommunityToolkit.Mvvm.Input.IRelayCommand);
            _typeTable[14] = typeof(global::WinUIEx.WindowEx);
            _typeTable[15] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[16] = typeof(global::Microsoft.UI.Windowing.AppWindow);
            _typeTable[17] = typeof(global::WinUIEx.Icon);
            _typeTable[18] = typeof(global::WinUIEx.WindowState);
            _typeTable[19] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenter);
            _typeTable[20] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenterKind);
            _typeTable[21] = typeof(global::System.Double);
#pragma warning disable 0618  //   Warning on Deprecated usage
            _typeTable[22] = typeof(global::WinUIEx.SystemBackdrop);
#pragma warning restore 0618
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.Media.MicaBackdrop);
            _typeTable[24] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[25] = typeof(global::Microsoft.UI.Composition.SystemBackdrops.MicaKind);
            _typeTable[26] = typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.DependencyObjectCollection);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[29] = typeof(global::CommunityToolkit.WinUI.Animations.OffsetAnimation);
            _typeTable[30] = typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.String, global::System.Numerics.Vector3>);
            _typeTable[31] = typeof(global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>);
            _typeTable[32] = typeof(global::CommunityToolkit.WinUI.Animations.Animation);
            _typeTable[33] = typeof(global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>>);
            _typeTable[34] = typeof(global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>);
            _typeTable[35] = typeof(global::System.Nullable<global::Microsoft.UI.Xaml.Media.Animation.EasingMode>);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.Media.Animation.EasingMode);
            _typeTable[37] = typeof(global::System.Nullable<global::System.TimeSpan>);
            _typeTable[38] = typeof(global::System.TimeSpan);
            _typeTable[39] = typeof(global::System.Nullable<global::CommunityToolkit.WinUI.Animations.EasingType>);
            _typeTable[40] = typeof(global::CommunityToolkit.WinUI.Animations.EasingType);
            _typeTable[41] = typeof(global::CommunityToolkit.WinUI.Animations.RepeatOption);
            _typeTable[42] = typeof(global::Microsoft.UI.Composition.AnimationDelayBehavior);
            _typeTable[43] = typeof(global::CommunityToolkit.WinUI.Animations.OpacityAnimation);
            _typeTable[44] = typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.Nullable<global::System.Double>, global::System.Double>);
            _typeTable[45] = typeof(global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>);
            _typeTable[46] = typeof(global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>>);
            _typeTable[47] = typeof(global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>);
            _typeTable[48] = typeof(global::System.Nullable<global::System.Double>);
            _typeTable[49] = typeof(global::CommunityToolkit.WinUI.Controls.TitleBar);
            _typeTable[50] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[51] = typeof(global::CommunityToolkit.WinUI.Controls.DisplayMode);
            _typeTable[52] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[53] = typeof(global::System.Int32);
            _typeTable[54] = typeof(global::DevWinUI.PagerControl);
            _typeTable[55] = typeof(global::DevWinUI.PagerControlDisplayMode);
            _typeTable[56] = typeof(global::DevWinUI.PagerControlButtonVisibility);
            _typeTable[57] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[58] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[59] = typeof(global::DevWinUI.PagerControlTemplateSettings);
            _typeTable[60] = typeof(global::FluentIcons.WinUI.SymbolIconExtension);
            _typeTable[61] = typeof(global::Microsoft.UI.Xaml.Markup.MarkupExtension);
            _typeTable[62] = typeof(global::System.Nullable<global::FluentIcons.Common.Symbol>);
            _typeTable[63] = typeof(global::System.Nullable<global::FluentIcons.Common.IconVariant>);
            _typeTable[64] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[65] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[66] = typeof(global::MinecraftMods.MainWindow);
            _typeTable[67] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[68] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_SymbolIcon() { return new global::FluentIcons.WinUI.SymbolIcon(); }
        private object Activate_10_IconButton() { return new global::MinecraftMods.Controls.IconButton(); }
        private object Activate_14_WindowEx() { return new global::WinUIEx.WindowEx(); }
        private object Activate_23_MicaBackdrop() { return new global::Microsoft.UI.Xaml.Media.MicaBackdrop(); }
        private object Activate_26_ImplicitAnimationSet() { return new global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet(); }
        private object Activate_29_OffsetAnimation() { return new global::CommunityToolkit.WinUI.Animations.OffsetAnimation(); }
        private object Activate_43_OpacityAnimation() { return new global::CommunityToolkit.WinUI.Animations.OpacityAnimation(); }
        private object Activate_49_TitleBar() { return new global::CommunityToolkit.WinUI.Controls.TitleBar(); }
        private object Activate_54_PagerControl() { return new global::DevWinUI.PagerControl(); }
        private object Activate_59_PagerControlTemplateSettings() { return new global::DevWinUI.PagerControlTemplateSettings(); }
        private object Activate_60_SymbolIconExtension() { return new global::FluentIcons.WinUI.SymbolIconExtension(); }
        private object Activate_66_MainWindow() { return new global::MinecraftMods.MainWindow(); }
        private object Activate_67_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void StaticInitializer_0_XamlControlsResources() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources).TypeHandle);
        private void StaticInitializer_4_SymbolIcon() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::FluentIcons.WinUI.SymbolIcon).TypeHandle);
        private void StaticInitializer_6_Symbol() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::FluentIcons.Common.Symbol).TypeHandle);
        private void StaticInitializer_7_Enum() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Enum).TypeHandle);
        private void StaticInitializer_8_ValueType() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.ValueType).TypeHandle);
        private void StaticInitializer_9_IconVariant() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::FluentIcons.Common.IconVariant).TypeHandle);
        private void StaticInitializer_10_IconButton() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::MinecraftMods.Controls.IconButton).TypeHandle);
        private void StaticInitializer_13_IRelayCommand() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.Mvvm.Input.IRelayCommand).TypeHandle);
        private void StaticInitializer_14_WindowEx() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUIEx.WindowEx).TypeHandle);
        private void StaticInitializer_16_AppWindow() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Windowing.AppWindow).TypeHandle);
        private void StaticInitializer_17_Icon() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUIEx.Icon).TypeHandle);
        private void StaticInitializer_18_WindowState() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUIEx.WindowState).TypeHandle);
        private void StaticInitializer_19_AppWindowPresenter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Windowing.AppWindowPresenter).TypeHandle);
        private void StaticInitializer_20_AppWindowPresenterKind() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Windowing.AppWindowPresenterKind).TypeHandle);
#pragma warning disable 0618  //   Warning on Deprecated usage
        private void StaticInitializer_22_SystemBackdrop() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUIEx.SystemBackdrop).TypeHandle);
#pragma warning restore 0618
        private void StaticInitializer_23_MicaBackdrop() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Media.MicaBackdrop).TypeHandle);
        private void StaticInitializer_25_MicaKind() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Composition.SystemBackdrops.MicaKind).TypeHandle);
        private void StaticInitializer_26_ImplicitAnimationSet() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimationSet).TypeHandle);
        private void StaticInitializer_29_OffsetAnimation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.OffsetAnimation).TypeHandle);
        private void StaticInitializer_30_ImplicitAnimation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.String, global::System.Numerics.Vector3>).TypeHandle);
        private void StaticInitializer_31_Animation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>).TypeHandle);
        private void StaticInitializer_32_Animation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.Animation).TypeHandle);
        private void StaticInitializer_33_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>>).TypeHandle);
        private void StaticInitializer_34_IKeyFrame() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>).TypeHandle);
        private void StaticInitializer_35_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::Microsoft.UI.Xaml.Media.Animation.EasingMode>).TypeHandle);
        private void StaticInitializer_37_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::System.TimeSpan>).TypeHandle);
        private void StaticInitializer_38_TimeSpan() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.TimeSpan).TypeHandle);
        private void StaticInitializer_39_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::CommunityToolkit.WinUI.Animations.EasingType>).TypeHandle);
        private void StaticInitializer_40_EasingType() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.EasingType).TypeHandle);
        private void StaticInitializer_41_RepeatOption() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.RepeatOption).TypeHandle);
        private void StaticInitializer_42_AnimationDelayBehavior() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Composition.AnimationDelayBehavior).TypeHandle);
        private void StaticInitializer_43_OpacityAnimation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.OpacityAnimation).TypeHandle);
        private void StaticInitializer_44_ImplicitAnimation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.Nullable<global::System.Double>, global::System.Double>).TypeHandle);
        private void StaticInitializer_45_Animation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>).TypeHandle);
        private void StaticInitializer_46_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>>).TypeHandle);
        private void StaticInitializer_47_IKeyFrame() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>).TypeHandle);
        private void StaticInitializer_48_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::System.Double>).TypeHandle);
        private void StaticInitializer_49_TitleBar() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Controls.TitleBar).TypeHandle);
        private void StaticInitializer_51_DisplayMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Controls.DisplayMode).TypeHandle);
        private void StaticInitializer_54_PagerControl() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::DevWinUI.PagerControl).TypeHandle);
        private void StaticInitializer_55_PagerControlDisplayMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::DevWinUI.PagerControlDisplayMode).TypeHandle);
        private void StaticInitializer_56_PagerControlButtonVisibility() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::DevWinUI.PagerControlButtonVisibility).TypeHandle);
        private void StaticInitializer_57_ICommand() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Windows.Input.ICommand).TypeHandle);
        private void StaticInitializer_59_PagerControlTemplateSettings() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::DevWinUI.PagerControlTemplateSettings).TypeHandle);
        private void StaticInitializer_60_SymbolIconExtension() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::FluentIcons.WinUI.SymbolIconExtension).TypeHandle);
        private void StaticInitializer_62_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::FluentIcons.Common.Symbol>).TypeHandle);
        private void StaticInitializer_63_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::FluentIcons.Common.IconVariant>).TypeHandle);
        private void StaticInitializer_64_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::System.Boolean>).TypeHandle);
        private void StaticInitializer_66_MainWindow() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::MinecraftMods.MainWindow).TypeHandle);
        private void StaticInitializer_67_TreeViewNode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode).TypeHandle);
        private void StaticInitializer_68_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>).TypeHandle);
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_26_ImplicitAnimationSet(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Microsoft.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>>)instance;
            var newItem = (global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_46_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>>)instance;
            var newItem = (global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>)item;
            collection.Add(newItem);
        }
        private void VectorAdd_68_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.StaticInitializer = StaticInitializer_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  FluentIcons.WinUI.SymbolIcon
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.FontIcon"));
                userType.Activator = Activate_4_SymbolIcon;
                userType.StaticInitializer = StaticInitializer_4_SymbolIcon;
                userType.AddMemberName("Symbol");
                userType.AddMemberName("IconVariant");
                userType.AddMemberName("UseSegoeMetrics");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Controls.FontIcon
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  FluentIcons.Common.Symbol
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_6_Symbol;
                userType.AddEnumValue("AccessTime", global::FluentIcons.Common.Symbol.AccessTime);
                userType.AddEnumValue("Accessibility", global::FluentIcons.Common.Symbol.Accessibility);
                userType.AddEnumValue("AccessibilityCheckmark", global::FluentIcons.Common.Symbol.AccessibilityCheckmark);
                userType.AddEnumValue("AccessibilityError", global::FluentIcons.Common.Symbol.AccessibilityError);
                userType.AddEnumValue("AccessibilityMore", global::FluentIcons.Common.Symbol.AccessibilityMore);
                userType.AddEnumValue("AccessibilityQuestionMark", global::FluentIcons.Common.Symbol.AccessibilityQuestionMark);
                userType.AddEnumValue("Add", global::FluentIcons.Common.Symbol.Add);
                userType.AddEnumValue("AddCircle", global::FluentIcons.Common.Symbol.AddCircle);
                userType.AddEnumValue("AddSquare", global::FluentIcons.Common.Symbol.AddSquare);
                userType.AddEnumValue("AddSquareMultiple", global::FluentIcons.Common.Symbol.AddSquareMultiple);
                userType.AddEnumValue("AddSubtractCircle", global::FluentIcons.Common.Symbol.AddSubtractCircle);
                userType.AddEnumValue("Airplane", global::FluentIcons.Common.Symbol.Airplane);
                userType.AddEnumValue("AirplaneLanding", global::FluentIcons.Common.Symbol.AirplaneLanding);
                userType.AddEnumValue("AirplaneTakeOff", global::FluentIcons.Common.Symbol.AirplaneTakeOff);
                userType.AddEnumValue("Album", global::FluentIcons.Common.Symbol.Album);
                userType.AddEnumValue("AlbumAdd", global::FluentIcons.Common.Symbol.AlbumAdd);
                userType.AddEnumValue("Alert", global::FluentIcons.Common.Symbol.Alert);
                userType.AddEnumValue("AlertBadge", global::FluentIcons.Common.Symbol.AlertBadge);
                userType.AddEnumValue("AlertOff", global::FluentIcons.Common.Symbol.AlertOff);
                userType.AddEnumValue("AlertOn", global::FluentIcons.Common.Symbol.AlertOn);
                userType.AddEnumValue("AlertSnooze", global::FluentIcons.Common.Symbol.AlertSnooze);
                userType.AddEnumValue("AlertUrgent", global::FluentIcons.Common.Symbol.AlertUrgent);
                userType.AddEnumValue("AlignBottom", global::FluentIcons.Common.Symbol.AlignBottom);
                userType.AddEnumValue("AlignCenterHorizontal", global::FluentIcons.Common.Symbol.AlignCenterHorizontal);
                userType.AddEnumValue("AlignCenterVertical", global::FluentIcons.Common.Symbol.AlignCenterVertical);
                userType.AddEnumValue("AlignEndHorizontal", global::FluentIcons.Common.Symbol.AlignEndHorizontal);
                userType.AddEnumValue("AlignEndVertical", global::FluentIcons.Common.Symbol.AlignEndVertical);
                userType.AddEnumValue("AlignLeft", global::FluentIcons.Common.Symbol.AlignLeft);
                userType.AddEnumValue("AlignRight", global::FluentIcons.Common.Symbol.AlignRight);
                userType.AddEnumValue("AlignSpaceAroundHorizontal", global::FluentIcons.Common.Symbol.AlignSpaceAroundHorizontal);
                userType.AddEnumValue("AlignSpaceAroundVertical", global::FluentIcons.Common.Symbol.AlignSpaceAroundVertical);
                userType.AddEnumValue("AlignSpaceBetweenHorizontal", global::FluentIcons.Common.Symbol.AlignSpaceBetweenHorizontal);
                userType.AddEnumValue("AlignSpaceBetweenVertical", global::FluentIcons.Common.Symbol.AlignSpaceBetweenVertical);
                userType.AddEnumValue("AlignSpaceEvenlyHorizontal", global::FluentIcons.Common.Symbol.AlignSpaceEvenlyHorizontal);
                userType.AddEnumValue("AlignSpaceEvenlyVertical", global::FluentIcons.Common.Symbol.AlignSpaceEvenlyVertical);
                userType.AddEnumValue("AlignSpaceFitVertical", global::FluentIcons.Common.Symbol.AlignSpaceFitVertical);
                userType.AddEnumValue("AlignStartHorizontal", global::FluentIcons.Common.Symbol.AlignStartHorizontal);
                userType.AddEnumValue("AlignStartVertical", global::FluentIcons.Common.Symbol.AlignStartVertical);
                userType.AddEnumValue("AlignStraighten", global::FluentIcons.Common.Symbol.AlignStraighten);
                userType.AddEnumValue("AlignStretchHorizontal", global::FluentIcons.Common.Symbol.AlignStretchHorizontal);
                userType.AddEnumValue("AlignStretchVertical", global::FluentIcons.Common.Symbol.AlignStretchVertical);
                userType.AddEnumValue("AlignTop", global::FluentIcons.Common.Symbol.AlignTop);
                userType.AddEnumValue("AnimalCat", global::FluentIcons.Common.Symbol.AnimalCat);
                userType.AddEnumValue("AnimalDog", global::FluentIcons.Common.Symbol.AnimalDog);
                userType.AddEnumValue("AnimalPawPrint", global::FluentIcons.Common.Symbol.AnimalPawPrint);
                userType.AddEnumValue("AnimalRabbit", global::FluentIcons.Common.Symbol.AnimalRabbit);
                userType.AddEnumValue("AnimalRabbitOff", global::FluentIcons.Common.Symbol.AnimalRabbitOff);
                userType.AddEnumValue("AnimalTurtle", global::FluentIcons.Common.Symbol.AnimalTurtle);
                userType.AddEnumValue("AppFolder", global::FluentIcons.Common.Symbol.AppFolder);
                userType.AddEnumValue("AppGeneric", global::FluentIcons.Common.Symbol.AppGeneric);
                userType.AddEnumValue("AppRecent", global::FluentIcons.Common.Symbol.AppRecent);
                userType.AddEnumValue("AppTitle", global::FluentIcons.Common.Symbol.AppTitle);
                userType.AddEnumValue("ApprovalsApp", global::FluentIcons.Common.Symbol.ApprovalsApp);
                userType.AddEnumValue("Apps", global::FluentIcons.Common.Symbol.Apps);
                userType.AddEnumValue("AppsAddIn", global::FluentIcons.Common.Symbol.AppsAddIn);
                userType.AddEnumValue("AppsList", global::FluentIcons.Common.Symbol.AppsList);
                userType.AddEnumValue("AppsListDetail", global::FluentIcons.Common.Symbol.AppsListDetail);
                userType.AddEnumValue("AppsSettings", global::FluentIcons.Common.Symbol.AppsSettings);
                userType.AddEnumValue("AppsShield", global::FluentIcons.Common.Symbol.AppsShield);
                userType.AddEnumValue("Archive", global::FluentIcons.Common.Symbol.Archive);
                userType.AddEnumValue("ArchiveArrowBack", global::FluentIcons.Common.Symbol.ArchiveArrowBack);
                userType.AddEnumValue("ArchiveMultiple", global::FluentIcons.Common.Symbol.ArchiveMultiple);
                userType.AddEnumValue("ArchiveSettings", global::FluentIcons.Common.Symbol.ArchiveSettings);
                userType.AddEnumValue("ArrowAutofitContent", global::FluentIcons.Common.Symbol.ArrowAutofitContent);
                userType.AddEnumValue("ArrowAutofitDown", global::FluentIcons.Common.Symbol.ArrowAutofitDown);
                userType.AddEnumValue("ArrowAutofitHeight", global::FluentIcons.Common.Symbol.ArrowAutofitHeight);
                userType.AddEnumValue("ArrowAutofitHeightDotted", global::FluentIcons.Common.Symbol.ArrowAutofitHeightDotted);
                userType.AddEnumValue("ArrowAutofitHeightIn", global::FluentIcons.Common.Symbol.ArrowAutofitHeightIn);
                userType.AddEnumValue("ArrowAutofitUp", global::FluentIcons.Common.Symbol.ArrowAutofitUp);
                userType.AddEnumValue("ArrowAutofitWidth", global::FluentIcons.Common.Symbol.ArrowAutofitWidth);
                userType.AddEnumValue("ArrowAutofitWidthDotted", global::FluentIcons.Common.Symbol.ArrowAutofitWidthDotted);
                userType.AddEnumValue("ArrowBetweenDown", global::FluentIcons.Common.Symbol.ArrowBetweenDown);
                userType.AddEnumValue("ArrowBetweenUp", global::FluentIcons.Common.Symbol.ArrowBetweenUp);
                userType.AddEnumValue("ArrowBidirectionalLeftRight", global::FluentIcons.Common.Symbol.ArrowBidirectionalLeftRight);
                userType.AddEnumValue("ArrowBidirectionalUpDown", global::FluentIcons.Common.Symbol.ArrowBidirectionalUpDown);
                userType.AddEnumValue("ArrowBounce", global::FluentIcons.Common.Symbol.ArrowBounce);
                userType.AddEnumValue("ArrowCircleDown", global::FluentIcons.Common.Symbol.ArrowCircleDown);
                userType.AddEnumValue("ArrowCircleDownDouble", global::FluentIcons.Common.Symbol.ArrowCircleDownDouble);
                userType.AddEnumValue("ArrowCircleDownRight", global::FluentIcons.Common.Symbol.ArrowCircleDownRight);
                userType.AddEnumValue("ArrowCircleDownSplit", global::FluentIcons.Common.Symbol.ArrowCircleDownSplit);
                userType.AddEnumValue("ArrowCircleDownUp", global::FluentIcons.Common.Symbol.ArrowCircleDownUp);
                userType.AddEnumValue("ArrowCircleLeft", global::FluentIcons.Common.Symbol.ArrowCircleLeft);
                userType.AddEnumValue("ArrowCircleRight", global::FluentIcons.Common.Symbol.ArrowCircleRight);
                userType.AddEnumValue("ArrowCircleUp", global::FluentIcons.Common.Symbol.ArrowCircleUp);
                userType.AddEnumValue("ArrowCircleUpLeft", global::FluentIcons.Common.Symbol.ArrowCircleUpLeft);
                userType.AddEnumValue("ArrowCircleUpRight", global::FluentIcons.Common.Symbol.ArrowCircleUpRight);
                userType.AddEnumValue("ArrowClockwise", global::FluentIcons.Common.Symbol.ArrowClockwise);
                userType.AddEnumValue("ArrowClockwiseDashes", global::FluentIcons.Common.Symbol.ArrowClockwiseDashes);
                userType.AddEnumValue("ArrowClockwiseDashesSettings", global::FluentIcons.Common.Symbol.ArrowClockwiseDashesSettings);
                userType.AddEnumValue("ArrowCollapseAll", global::FluentIcons.Common.Symbol.ArrowCollapseAll);
                userType.AddEnumValue("ArrowCounterclockwise", global::FluentIcons.Common.Symbol.ArrowCounterclockwise);
                userType.AddEnumValue("ArrowCounterclockwiseDashes", global::FluentIcons.Common.Symbol.ArrowCounterclockwiseDashes);
                userType.AddEnumValue("ArrowCurveDownLeft", global::FluentIcons.Common.Symbol.ArrowCurveDownLeft);
                userType.AddEnumValue("ArrowCurveDownRight", global::FluentIcons.Common.Symbol.ArrowCurveDownRight);
                userType.AddEnumValue("ArrowCurveUpLeft", global::FluentIcons.Common.Symbol.ArrowCurveUpLeft);
                userType.AddEnumValue("ArrowCurveUpRight", global::FluentIcons.Common.Symbol.ArrowCurveUpRight);
                userType.AddEnumValue("ArrowDown", global::FluentIcons.Common.Symbol.ArrowDown);
                userType.AddEnumValue("ArrowDownExclamation", global::FluentIcons.Common.Symbol.ArrowDownExclamation);
                userType.AddEnumValue("ArrowDownLeft", global::FluentIcons.Common.Symbol.ArrowDownLeft);
                userType.AddEnumValue("ArrowDownRight", global::FluentIcons.Common.Symbol.ArrowDownRight);
                userType.AddEnumValue("ArrowDownload", global::FluentIcons.Common.Symbol.ArrowDownload);
                userType.AddEnumValue("ArrowDownloadOff", global::FluentIcons.Common.Symbol.ArrowDownloadOff);
                userType.AddEnumValue("ArrowEject", global::FluentIcons.Common.Symbol.ArrowEject);
                userType.AddEnumValue("ArrowEnter", global::FluentIcons.Common.Symbol.ArrowEnter);
                userType.AddEnumValue("ArrowEnterLeft", global::FluentIcons.Common.Symbol.ArrowEnterLeft);
                userType.AddEnumValue("ArrowEnterUp", global::FluentIcons.Common.Symbol.ArrowEnterUp);
                userType.AddEnumValue("ArrowExit", global::FluentIcons.Common.Symbol.ArrowExit);
                userType.AddEnumValue("ArrowExpand", global::FluentIcons.Common.Symbol.ArrowExpand);
                userType.AddEnumValue("ArrowExpandAll", global::FluentIcons.Common.Symbol.ArrowExpandAll);
                userType.AddEnumValue("ArrowExport", global::FluentIcons.Common.Symbol.ArrowExport);
                userType.AddEnumValue("ArrowExportUp", global::FluentIcons.Common.Symbol.ArrowExportUp);
                userType.AddEnumValue("ArrowFit", global::FluentIcons.Common.Symbol.ArrowFit);
                userType.AddEnumValue("ArrowFitIn", global::FluentIcons.Common.Symbol.ArrowFitIn);
                userType.AddEnumValue("ArrowFlowDiagonalUpRight", global::FluentIcons.Common.Symbol.ArrowFlowDiagonalUpRight);
                userType.AddEnumValue("ArrowFlowUpRight", global::FluentIcons.Common.Symbol.ArrowFlowUpRight);
                userType.AddEnumValue("ArrowFlowUpRightRectangleMultiple", global::FluentIcons.Common.Symbol.ArrowFlowUpRightRectangleMultiple);
                userType.AddEnumValue("ArrowForward", global::FluentIcons.Common.Symbol.ArrowForward);
                userType.AddEnumValue("ArrowForwardDownLightning", global::FluentIcons.Common.Symbol.ArrowForwardDownLightning);
                userType.AddEnumValue("ArrowForwardDownPerson", global::FluentIcons.Common.Symbol.ArrowForwardDownPerson);
                userType.AddEnumValue("ArrowHookDownLeft", global::FluentIcons.Common.Symbol.ArrowHookDownLeft);
                userType.AddEnumValue("ArrowHookDownRight", global::FluentIcons.Common.Symbol.ArrowHookDownRight);
                userType.AddEnumValue("ArrowHookUpLeft", global::FluentIcons.Common.Symbol.ArrowHookUpLeft);
                userType.AddEnumValue("ArrowHookUpRight", global::FluentIcons.Common.Symbol.ArrowHookUpRight);
                userType.AddEnumValue("ArrowImport", global::FluentIcons.Common.Symbol.ArrowImport);
                userType.AddEnumValue("ArrowJoin", global::FluentIcons.Common.Symbol.ArrowJoin);
                userType.AddEnumValue("ArrowLeft", global::FluentIcons.Common.Symbol.ArrowLeft);
                userType.AddEnumValue("ArrowMaximize", global::FluentIcons.Common.Symbol.ArrowMaximize);
                userType.AddEnumValue("ArrowMaximizeVertical", global::FluentIcons.Common.Symbol.ArrowMaximizeVertical);
                userType.AddEnumValue("ArrowMinimize", global::FluentIcons.Common.Symbol.ArrowMinimize);
                userType.AddEnumValue("ArrowMinimizeVertical", global::FluentIcons.Common.Symbol.ArrowMinimizeVertical);
                userType.AddEnumValue("ArrowMove", global::FluentIcons.Common.Symbol.ArrowMove);
                userType.AddEnumValue("ArrowMoveInward", global::FluentIcons.Common.Symbol.ArrowMoveInward);
                userType.AddEnumValue("ArrowNext", global::FluentIcons.Common.Symbol.ArrowNext);
                userType.AddEnumValue("ArrowOutlineDownLeft", global::FluentIcons.Common.Symbol.ArrowOutlineDownLeft);
                userType.AddEnumValue("ArrowOutlineUpRight", global::FluentIcons.Common.Symbol.ArrowOutlineUpRight);
                userType.AddEnumValue("ArrowParagraph", global::FluentIcons.Common.Symbol.ArrowParagraph);
                userType.AddEnumValue("ArrowPrevious", global::FluentIcons.Common.Symbol.ArrowPrevious);
                userType.AddEnumValue("ArrowRedo", global::FluentIcons.Common.Symbol.ArrowRedo);
                userType.AddEnumValue("ArrowRepeat1", global::FluentIcons.Common.Symbol.ArrowRepeat1);
                userType.AddEnumValue("ArrowRepeatAll", global::FluentIcons.Common.Symbol.ArrowRepeatAll);
                userType.AddEnumValue("ArrowRepeatAllOff", global::FluentIcons.Common.Symbol.ArrowRepeatAllOff);
                userType.AddEnumValue("ArrowReply", global::FluentIcons.Common.Symbol.ArrowReply);
                userType.AddEnumValue("ArrowReplyAll", global::FluentIcons.Common.Symbol.ArrowReplyAll);
                userType.AddEnumValue("ArrowReplyDown", global::FluentIcons.Common.Symbol.ArrowReplyDown);
                userType.AddEnumValue("ArrowReset", global::FluentIcons.Common.Symbol.ArrowReset);
                userType.AddEnumValue("ArrowRight", global::FluentIcons.Common.Symbol.ArrowRight);
                userType.AddEnumValue("ArrowRotateClockwise", global::FluentIcons.Common.Symbol.ArrowRotateClockwise);
                userType.AddEnumValue("ArrowRotateCounterclockwise", global::FluentIcons.Common.Symbol.ArrowRotateCounterclockwise);
                userType.AddEnumValue("ArrowRouting", global::FluentIcons.Common.Symbol.ArrowRouting);
                userType.AddEnumValue("ArrowRoutingRectangleMultiple", global::FluentIcons.Common.Symbol.ArrowRoutingRectangleMultiple);
                userType.AddEnumValue("ArrowShuffle", global::FluentIcons.Common.Symbol.ArrowShuffle);
                userType.AddEnumValue("ArrowShuffleOff", global::FluentIcons.Common.Symbol.ArrowShuffleOff);
                userType.AddEnumValue("ArrowSort", global::FluentIcons.Common.Symbol.ArrowSort);
                userType.AddEnumValue("ArrowSortDown", global::FluentIcons.Common.Symbol.ArrowSortDown);
                userType.AddEnumValue("ArrowSortDownLines", global::FluentIcons.Common.Symbol.ArrowSortDownLines);
                userType.AddEnumValue("ArrowSortUp", global::FluentIcons.Common.Symbol.ArrowSortUp);
                userType.AddEnumValue("ArrowSortUpLines", global::FluentIcons.Common.Symbol.ArrowSortUpLines);
                userType.AddEnumValue("ArrowSplit", global::FluentIcons.Common.Symbol.ArrowSplit);
                userType.AddEnumValue("ArrowSprint", global::FluentIcons.Common.Symbol.ArrowSprint);
                userType.AddEnumValue("ArrowSquareDown", global::FluentIcons.Common.Symbol.ArrowSquareDown);
                userType.AddEnumValue("ArrowSquareUpRight", global::FluentIcons.Common.Symbol.ArrowSquareUpRight);
                userType.AddEnumValue("ArrowStepBack", global::FluentIcons.Common.Symbol.ArrowStepBack);
                userType.AddEnumValue("ArrowStepIn", global::FluentIcons.Common.Symbol.ArrowStepIn);
                userType.AddEnumValue("ArrowStepInDiagonalDownLeft", global::FluentIcons.Common.Symbol.ArrowStepInDiagonalDownLeft);
                userType.AddEnumValue("ArrowStepInLeft", global::FluentIcons.Common.Symbol.ArrowStepInLeft);
                userType.AddEnumValue("ArrowStepInRight", global::FluentIcons.Common.Symbol.ArrowStepInRight);
                userType.AddEnumValue("ArrowStepOut", global::FluentIcons.Common.Symbol.ArrowStepOut);
                userType.AddEnumValue("ArrowStepOver", global::FluentIcons.Common.Symbol.ArrowStepOver);
                userType.AddEnumValue("ArrowSwap", global::FluentIcons.Common.Symbol.ArrowSwap);
                userType.AddEnumValue("ArrowSync", global::FluentIcons.Common.Symbol.ArrowSync);
                userType.AddEnumValue("ArrowSyncCheckmark", global::FluentIcons.Common.Symbol.ArrowSyncCheckmark);
                userType.AddEnumValue("ArrowSyncCircle", global::FluentIcons.Common.Symbol.ArrowSyncCircle);
                userType.AddEnumValue("ArrowSyncDismiss", global::FluentIcons.Common.Symbol.ArrowSyncDismiss);
                userType.AddEnumValue("ArrowSyncOff", global::FluentIcons.Common.Symbol.ArrowSyncOff);
                userType.AddEnumValue("ArrowTrending", global::FluentIcons.Common.Symbol.ArrowTrending);
                userType.AddEnumValue("ArrowTrendingCheckmark", global::FluentIcons.Common.Symbol.ArrowTrendingCheckmark);
                userType.AddEnumValue("ArrowTrendingDown", global::FluentIcons.Common.Symbol.ArrowTrendingDown);
                userType.AddEnumValue("ArrowTrendingLines", global::FluentIcons.Common.Symbol.ArrowTrendingLines);
                userType.AddEnumValue("ArrowTrendingSettings", global::FluentIcons.Common.Symbol.ArrowTrendingSettings);
                userType.AddEnumValue("ArrowTrendingSparkle", global::FluentIcons.Common.Symbol.ArrowTrendingSparkle);
                userType.AddEnumValue("ArrowTrendingText", global::FluentIcons.Common.Symbol.ArrowTrendingText);
                userType.AddEnumValue("ArrowTrendingWrench", global::FluentIcons.Common.Symbol.ArrowTrendingWrench);
                userType.AddEnumValue("ArrowTurnBidirectionalDownRight", global::FluentIcons.Common.Symbol.ArrowTurnBidirectionalDownRight);
                userType.AddEnumValue("ArrowTurnDownLeft", global::FluentIcons.Common.Symbol.ArrowTurnDownLeft);
                userType.AddEnumValue("ArrowTurnDownRight", global::FluentIcons.Common.Symbol.ArrowTurnDownRight);
                userType.AddEnumValue("ArrowTurnDownUp", global::FluentIcons.Common.Symbol.ArrowTurnDownUp);
                userType.AddEnumValue("ArrowTurnLeftDown", global::FluentIcons.Common.Symbol.ArrowTurnLeftDown);
                userType.AddEnumValue("ArrowTurnLeftRight", global::FluentIcons.Common.Symbol.ArrowTurnLeftRight);
                userType.AddEnumValue("ArrowTurnLeftUp", global::FluentIcons.Common.Symbol.ArrowTurnLeftUp);
                userType.AddEnumValue("ArrowTurnRight", global::FluentIcons.Common.Symbol.ArrowTurnRight);
                userType.AddEnumValue("ArrowTurnRightDown", global::FluentIcons.Common.Symbol.ArrowTurnRightDown);
                userType.AddEnumValue("ArrowTurnRightLeft", global::FluentIcons.Common.Symbol.ArrowTurnRightLeft);
                userType.AddEnumValue("ArrowTurnRightUp", global::FluentIcons.Common.Symbol.ArrowTurnRightUp);
                userType.AddEnumValue("ArrowTurnUpDown", global::FluentIcons.Common.Symbol.ArrowTurnUpDown);
                userType.AddEnumValue("ArrowTurnUpLeft", global::FluentIcons.Common.Symbol.ArrowTurnUpLeft);
                userType.AddEnumValue("ArrowUndo", global::FluentIcons.Common.Symbol.ArrowUndo);
                userType.AddEnumValue("ArrowUp", global::FluentIcons.Common.Symbol.ArrowUp);
                userType.AddEnumValue("ArrowUpExclamation", global::FluentIcons.Common.Symbol.ArrowUpExclamation);
                userType.AddEnumValue("ArrowUpLeft", global::FluentIcons.Common.Symbol.ArrowUpLeft);
                userType.AddEnumValue("ArrowUpRight", global::FluentIcons.Common.Symbol.ArrowUpRight);
                userType.AddEnumValue("ArrowUpRightDashes", global::FluentIcons.Common.Symbol.ArrowUpRightDashes);
                userType.AddEnumValue("ArrowUpload", global::FluentIcons.Common.Symbol.ArrowUpload);
                userType.AddEnumValue("ArrowWrap", global::FluentIcons.Common.Symbol.ArrowWrap);
                userType.AddEnumValue("ArrowWrapOff", global::FluentIcons.Common.Symbol.ArrowWrapOff);
                userType.AddEnumValue("ArrowWrapUpToDown", global::FluentIcons.Common.Symbol.ArrowWrapUpToDown);
                userType.AddEnumValue("ArrowsBidirectional", global::FluentIcons.Common.Symbol.ArrowsBidirectional);
                userType.AddEnumValue("Attach", global::FluentIcons.Common.Symbol.Attach);
                userType.AddEnumValue("AttachArrowRight", global::FluentIcons.Common.Symbol.AttachArrowRight);
                userType.AddEnumValue("AttachText", global::FluentIcons.Common.Symbol.AttachText);
                userType.AddEnumValue("AutoFit", global::FluentIcons.Common.Symbol.AutoFit);
                userType.AddEnumValue("AutoFitHeight", global::FluentIcons.Common.Symbol.AutoFitHeight);
                userType.AddEnumValue("AutoFitWidth", global::FluentIcons.Common.Symbol.AutoFitWidth);
                userType.AddEnumValue("Autocorrect", global::FluentIcons.Common.Symbol.Autocorrect);
                userType.AddEnumValue("Autosum", global::FluentIcons.Common.Symbol.Autosum);
                userType.AddEnumValue("Backpack", global::FluentIcons.Common.Symbol.Backpack);
                userType.AddEnumValue("BackpackAdd", global::FluentIcons.Common.Symbol.BackpackAdd);
                userType.AddEnumValue("Backspace", global::FluentIcons.Common.Symbol.Backspace);
                userType.AddEnumValue("Badge", global::FluentIcons.Common.Symbol.Badge);
                userType.AddEnumValue("Balloon", global::FluentIcons.Common.Symbol.Balloon);
                userType.AddEnumValue("BarcodeScanner", global::FluentIcons.Common.Symbol.BarcodeScanner);
                userType.AddEnumValue("Battery0", global::FluentIcons.Common.Symbol.Battery0);
                userType.AddEnumValue("Battery1", global::FluentIcons.Common.Symbol.Battery1);
                userType.AddEnumValue("Battery10", global::FluentIcons.Common.Symbol.Battery10);
                userType.AddEnumValue("Battery2", global::FluentIcons.Common.Symbol.Battery2);
                userType.AddEnumValue("Battery3", global::FluentIcons.Common.Symbol.Battery3);
                userType.AddEnumValue("Battery4", global::FluentIcons.Common.Symbol.Battery4);
                userType.AddEnumValue("Battery5", global::FluentIcons.Common.Symbol.Battery5);
                userType.AddEnumValue("Battery6", global::FluentIcons.Common.Symbol.Battery6);
                userType.AddEnumValue("Battery7", global::FluentIcons.Common.Symbol.Battery7);
                userType.AddEnumValue("Battery8", global::FluentIcons.Common.Symbol.Battery8);
                userType.AddEnumValue("Battery9", global::FluentIcons.Common.Symbol.Battery9);
                userType.AddEnumValue("BatteryCharge", global::FluentIcons.Common.Symbol.BatteryCharge);
                userType.AddEnumValue("BatteryCheckmark", global::FluentIcons.Common.Symbol.BatteryCheckmark);
                userType.AddEnumValue("BatterySaver", global::FluentIcons.Common.Symbol.BatterySaver);
                userType.AddEnumValue("BatteryWarning", global::FluentIcons.Common.Symbol.BatteryWarning);
                userType.AddEnumValue("Beach", global::FluentIcons.Common.Symbol.Beach);
                userType.AddEnumValue("Beaker", global::FluentIcons.Common.Symbol.Beaker);
                userType.AddEnumValue("BeakerAdd", global::FluentIcons.Common.Symbol.BeakerAdd);
                userType.AddEnumValue("BeakerDismiss", global::FluentIcons.Common.Symbol.BeakerDismiss);
                userType.AddEnumValue("BeakerEdit", global::FluentIcons.Common.Symbol.BeakerEdit);
                userType.AddEnumValue("BeakerOff", global::FluentIcons.Common.Symbol.BeakerOff);
                userType.AddEnumValue("BeakerSettings", global::FluentIcons.Common.Symbol.BeakerSettings);
                userType.AddEnumValue("Bed", global::FluentIcons.Common.Symbol.Bed);
                userType.AddEnumValue("Bench", global::FluentIcons.Common.Symbol.Bench);
                userType.AddEnumValue("BezierCurveSquare", global::FluentIcons.Common.Symbol.BezierCurveSquare);
                userType.AddEnumValue("BinFull", global::FluentIcons.Common.Symbol.BinFull);
                userType.AddEnumValue("BinRecycle", global::FluentIcons.Common.Symbol.BinRecycle);
                userType.AddEnumValue("BinRecycleFull", global::FluentIcons.Common.Symbol.BinRecycleFull);
                userType.AddEnumValue("BinderTriangle", global::FluentIcons.Common.Symbol.BinderTriangle);
                userType.AddEnumValue("Bluetooth", global::FluentIcons.Common.Symbol.Bluetooth);
                userType.AddEnumValue("BluetoothConnected", global::FluentIcons.Common.Symbol.BluetoothConnected);
                userType.AddEnumValue("BluetoothDisabled", global::FluentIcons.Common.Symbol.BluetoothDisabled);
                userType.AddEnumValue("BluetoothSearching", global::FluentIcons.Common.Symbol.BluetoothSearching);
                userType.AddEnumValue("Blur", global::FluentIcons.Common.Symbol.Blur);
                userType.AddEnumValue("Board", global::FluentIcons.Common.Symbol.Board);
                userType.AddEnumValue("BoardGames", global::FluentIcons.Common.Symbol.BoardGames);
                userType.AddEnumValue("BoardHeart", global::FluentIcons.Common.Symbol.BoardHeart);
                userType.AddEnumValue("BoardSplit", global::FluentIcons.Common.Symbol.BoardSplit);
                userType.AddEnumValue("Book", global::FluentIcons.Common.Symbol.Book);
                userType.AddEnumValue("BookAdd", global::FluentIcons.Common.Symbol.BookAdd);
                userType.AddEnumValue("BookArrowClockwise", global::FluentIcons.Common.Symbol.BookArrowClockwise);
                userType.AddEnumValue("BookClock", global::FluentIcons.Common.Symbol.BookClock);
                userType.AddEnumValue("BookCoins", global::FluentIcons.Common.Symbol.BookCoins);
                userType.AddEnumValue("BookCompass", global::FluentIcons.Common.Symbol.BookCompass);
                userType.AddEnumValue("BookContacts", global::FluentIcons.Common.Symbol.BookContacts);
                userType.AddEnumValue("BookDatabase", global::FluentIcons.Common.Symbol.BookDatabase);
                userType.AddEnumValue("BookDefault", global::FluentIcons.Common.Symbol.BookDefault);
                userType.AddEnumValue("BookDismiss", global::FluentIcons.Common.Symbol.BookDismiss);
                userType.AddEnumValue("BookExclamationMark", global::FluentIcons.Common.Symbol.BookExclamationMark);
                userType.AddEnumValue("BookGlobe", global::FluentIcons.Common.Symbol.BookGlobe);
                userType.AddEnumValue("BookInformation", global::FluentIcons.Common.Symbol.BookInformation);
                userType.AddEnumValue("BookLetter", global::FluentIcons.Common.Symbol.BookLetter);
                userType.AddEnumValue("BookNumber", global::FluentIcons.Common.Symbol.BookNumber);
                userType.AddEnumValue("BookOpen", global::FluentIcons.Common.Symbol.BookOpen);
                userType.AddEnumValue("BookOpenGlobe", global::FluentIcons.Common.Symbol.BookOpenGlobe);
                userType.AddEnumValue("BookOpenMicrophone", global::FluentIcons.Common.Symbol.BookOpenMicrophone);
                userType.AddEnumValue("BookPulse", global::FluentIcons.Common.Symbol.BookPulse);
                userType.AddEnumValue("BookQuestionMark", global::FluentIcons.Common.Symbol.BookQuestionMark);
                userType.AddEnumValue("BookSearch", global::FluentIcons.Common.Symbol.BookSearch);
                userType.AddEnumValue("BookStar", global::FluentIcons.Common.Symbol.BookStar);
                userType.AddEnumValue("BookTemplate", global::FluentIcons.Common.Symbol.BookTemplate);
                userType.AddEnumValue("BookTheta", global::FluentIcons.Common.Symbol.BookTheta);
                userType.AddEnumValue("BookToolbox", global::FluentIcons.Common.Symbol.BookToolbox);
                userType.AddEnumValue("Bookmark", global::FluentIcons.Common.Symbol.Bookmark);
                userType.AddEnumValue("BookmarkAdd", global::FluentIcons.Common.Symbol.BookmarkAdd);
                userType.AddEnumValue("BookmarkMultiple", global::FluentIcons.Common.Symbol.BookmarkMultiple);
                userType.AddEnumValue("BookmarkOff", global::FluentIcons.Common.Symbol.BookmarkOff);
                userType.AddEnumValue("BookmarkSearch", global::FluentIcons.Common.Symbol.BookmarkSearch);
                userType.AddEnumValue("BorderAll", global::FluentIcons.Common.Symbol.BorderAll);
                userType.AddEnumValue("BorderBottom", global::FluentIcons.Common.Symbol.BorderBottom);
                userType.AddEnumValue("BorderBottomDouble", global::FluentIcons.Common.Symbol.BorderBottomDouble);
                userType.AddEnumValue("BorderBottomThick", global::FluentIcons.Common.Symbol.BorderBottomThick);
                userType.AddEnumValue("BorderInside", global::FluentIcons.Common.Symbol.BorderInside);
                userType.AddEnumValue("BorderLeft", global::FluentIcons.Common.Symbol.BorderLeft);
                userType.AddEnumValue("BorderLeftRight", global::FluentIcons.Common.Symbol.BorderLeftRight);
                userType.AddEnumValue("BorderNone", global::FluentIcons.Common.Symbol.BorderNone);
                userType.AddEnumValue("BorderOutside", global::FluentIcons.Common.Symbol.BorderOutside);
                userType.AddEnumValue("BorderOutsideThick", global::FluentIcons.Common.Symbol.BorderOutsideThick);
                userType.AddEnumValue("BorderRight", global::FluentIcons.Common.Symbol.BorderRight);
                userType.AddEnumValue("BorderTop", global::FluentIcons.Common.Symbol.BorderTop);
                userType.AddEnumValue("BorderTopBottom", global::FluentIcons.Common.Symbol.BorderTopBottom);
                userType.AddEnumValue("BorderTopBottomDouble", global::FluentIcons.Common.Symbol.BorderTopBottomDouble);
                userType.AddEnumValue("BorderTopBottomThick", global::FluentIcons.Common.Symbol.BorderTopBottomThick);
                userType.AddEnumValue("Bot", global::FluentIcons.Common.Symbol.Bot);
                userType.AddEnumValue("BotAdd", global::FluentIcons.Common.Symbol.BotAdd);
                userType.AddEnumValue("BotSparkle", global::FluentIcons.Common.Symbol.BotSparkle);
                userType.AddEnumValue("BowTie", global::FluentIcons.Common.Symbol.BowTie);
                userType.AddEnumValue("BowlChopsticks", global::FluentIcons.Common.Symbol.BowlChopsticks);
                userType.AddEnumValue("BowlSalad", global::FluentIcons.Common.Symbol.BowlSalad);
                userType.AddEnumValue("Box", global::FluentIcons.Common.Symbol.Box);
                userType.AddEnumValue("BoxArrowLeft", global::FluentIcons.Common.Symbol.BoxArrowLeft);
                userType.AddEnumValue("BoxArrowUp", global::FluentIcons.Common.Symbol.BoxArrowUp);
                userType.AddEnumValue("BoxCheckmark", global::FluentIcons.Common.Symbol.BoxCheckmark);
                userType.AddEnumValue("BoxDismiss", global::FluentIcons.Common.Symbol.BoxDismiss);
                userType.AddEnumValue("BoxEdit", global::FluentIcons.Common.Symbol.BoxEdit);
                userType.AddEnumValue("BoxMultiple", global::FluentIcons.Common.Symbol.BoxMultiple);
                userType.AddEnumValue("BoxMultipleArrowLeft", global::FluentIcons.Common.Symbol.BoxMultipleArrowLeft);
                userType.AddEnumValue("BoxMultipleArrowRight", global::FluentIcons.Common.Symbol.BoxMultipleArrowRight);
                userType.AddEnumValue("BoxMultipleCheckmark", global::FluentIcons.Common.Symbol.BoxMultipleCheckmark);
                userType.AddEnumValue("BoxMultipleSearch", global::FluentIcons.Common.Symbol.BoxMultipleSearch);
                userType.AddEnumValue("BoxSearch", global::FluentIcons.Common.Symbol.BoxSearch);
                userType.AddEnumValue("BoxToolbox", global::FluentIcons.Common.Symbol.BoxToolbox);
                userType.AddEnumValue("Braces", global::FluentIcons.Common.Symbol.Braces);
                userType.AddEnumValue("BracesVariable", global::FluentIcons.Common.Symbol.BracesVariable);
                userType.AddEnumValue("Brain", global::FluentIcons.Common.Symbol.Brain);
                userType.AddEnumValue("BrainCircuit", global::FluentIcons.Common.Symbol.BrainCircuit);
                userType.AddEnumValue("BrainSparkle", global::FluentIcons.Common.Symbol.BrainSparkle);
                userType.AddEnumValue("Branch", global::FluentIcons.Common.Symbol.Branch);
                userType.AddEnumValue("BranchCompare", global::FluentIcons.Common.Symbol.BranchCompare);
                userType.AddEnumValue("BranchFork", global::FluentIcons.Common.Symbol.BranchFork);
                userType.AddEnumValue("BranchForkHint", global::FluentIcons.Common.Symbol.BranchForkHint);
                userType.AddEnumValue("BranchForkLink", global::FluentIcons.Common.Symbol.BranchForkLink);
                userType.AddEnumValue("BranchRequest", global::FluentIcons.Common.Symbol.BranchRequest);
                userType.AddEnumValue("BreakoutRoom", global::FluentIcons.Common.Symbol.BreakoutRoom);
                userType.AddEnumValue("Briefcase", global::FluentIcons.Common.Symbol.Briefcase);
                userType.AddEnumValue("BriefcaseMedical", global::FluentIcons.Common.Symbol.BriefcaseMedical);
                userType.AddEnumValue("BriefcaseOff", global::FluentIcons.Common.Symbol.BriefcaseOff);
                userType.AddEnumValue("BriefcaseSearch", global::FluentIcons.Common.Symbol.BriefcaseSearch);
                userType.AddEnumValue("BrightnessHigh", global::FluentIcons.Common.Symbol.BrightnessHigh);
                userType.AddEnumValue("BrightnessLow", global::FluentIcons.Common.Symbol.BrightnessLow);
                userType.AddEnumValue("BroadActivityFeed", global::FluentIcons.Common.Symbol.BroadActivityFeed);
                userType.AddEnumValue("Broom", global::FluentIcons.Common.Symbol.Broom);
                userType.AddEnumValue("BubbleMultiple", global::FluentIcons.Common.Symbol.BubbleMultiple);
                userType.AddEnumValue("Bug", global::FluentIcons.Common.Symbol.Bug);
                userType.AddEnumValue("BugArrowCounterclockwise", global::FluentIcons.Common.Symbol.BugArrowCounterclockwise);
                userType.AddEnumValue("BugProhibited", global::FluentIcons.Common.Symbol.BugProhibited);
                userType.AddEnumValue("Building", global::FluentIcons.Common.Symbol.Building);
                userType.AddEnumValue("BuildingBank", global::FluentIcons.Common.Symbol.BuildingBank);
                userType.AddEnumValue("BuildingBankLink", global::FluentIcons.Common.Symbol.BuildingBankLink);
                userType.AddEnumValue("BuildingBankToolbox", global::FluentIcons.Common.Symbol.BuildingBankToolbox);
                userType.AddEnumValue("BuildingCheckmark", global::FluentIcons.Common.Symbol.BuildingCheckmark);
                userType.AddEnumValue("BuildingDesktop", global::FluentIcons.Common.Symbol.BuildingDesktop);
                userType.AddEnumValue("BuildingFactory", global::FluentIcons.Common.Symbol.BuildingFactory);
                userType.AddEnumValue("BuildingGovernment", global::FluentIcons.Common.Symbol.BuildingGovernment);
                userType.AddEnumValue("BuildingGovernmentSearch", global::FluentIcons.Common.Symbol.BuildingGovernmentSearch);
                userType.AddEnumValue("BuildingHome", global::FluentIcons.Common.Symbol.BuildingHome);
                userType.AddEnumValue("BuildingLighthouse", global::FluentIcons.Common.Symbol.BuildingLighthouse);
                userType.AddEnumValue("BuildingMosque", global::FluentIcons.Common.Symbol.BuildingMosque);
                userType.AddEnumValue("BuildingMultiple", global::FluentIcons.Common.Symbol.BuildingMultiple);
                userType.AddEnumValue("BuildingPeople", global::FluentIcons.Common.Symbol.BuildingPeople);
                userType.AddEnumValue("BuildingRetail", global::FluentIcons.Common.Symbol.BuildingRetail);
                userType.AddEnumValue("BuildingRetailMoney", global::FluentIcons.Common.Symbol.BuildingRetailMoney);
                userType.AddEnumValue("BuildingRetailMore", global::FluentIcons.Common.Symbol.BuildingRetailMore);
                userType.AddEnumValue("BuildingRetailShield", global::FluentIcons.Common.Symbol.BuildingRetailShield);
                userType.AddEnumValue("BuildingRetailToolbox", global::FluentIcons.Common.Symbol.BuildingRetailToolbox);
                userType.AddEnumValue("BuildingShop", global::FluentIcons.Common.Symbol.BuildingShop);
                userType.AddEnumValue("BuildingSkyscraper", global::FluentIcons.Common.Symbol.BuildingSkyscraper);
                userType.AddEnumValue("BuildingSwap", global::FluentIcons.Common.Symbol.BuildingSwap);
                userType.AddEnumValue("BuildingTownhouse", global::FluentIcons.Common.Symbol.BuildingTownhouse);
                userType.AddEnumValue("Button", global::FluentIcons.Common.Symbol.Button);
                userType.AddEnumValue("Calculator", global::FluentIcons.Common.Symbol.Calculator);
                userType.AddEnumValue("CalculatorArrowClockwise", global::FluentIcons.Common.Symbol.CalculatorArrowClockwise);
                userType.AddEnumValue("CalculatorMultiple", global::FluentIcons.Common.Symbol.CalculatorMultiple);
                userType.AddEnumValue("Calendar", global::FluentIcons.Common.Symbol.Calendar);
                userType.AddEnumValue("Calendar3Day", global::FluentIcons.Common.Symbol.Calendar3Day);
                userType.AddEnumValue("CalendarAdd", global::FluentIcons.Common.Symbol.CalendarAdd);
                userType.AddEnumValue("CalendarAgenda", global::FluentIcons.Common.Symbol.CalendarAgenda);
                userType.AddEnumValue("CalendarArrowCounterclockwise", global::FluentIcons.Common.Symbol.CalendarArrowCounterclockwise);
                userType.AddEnumValue("CalendarArrowDown", global::FluentIcons.Common.Symbol.CalendarArrowDown);
                userType.AddEnumValue("CalendarArrowRepeatAll", global::FluentIcons.Common.Symbol.CalendarArrowRepeatAll);
                userType.AddEnumValue("CalendarArrowRight", global::FluentIcons.Common.Symbol.CalendarArrowRight);
                userType.AddEnumValue("CalendarAssistant", global::FluentIcons.Common.Symbol.CalendarAssistant);
                userType.AddEnumValue("CalendarCancel", global::FluentIcons.Common.Symbol.CalendarCancel);
                userType.AddEnumValue("CalendarChat", global::FluentIcons.Common.Symbol.CalendarChat);
                userType.AddEnumValue("CalendarCheckmark", global::FluentIcons.Common.Symbol.CalendarCheckmark);
                userType.AddEnumValue("CalendarClock", global::FluentIcons.Common.Symbol.CalendarClock);
                userType.AddEnumValue("CalendarDataBar", global::FluentIcons.Common.Symbol.CalendarDataBar);
                userType.AddEnumValue("CalendarDate", global::FluentIcons.Common.Symbol.CalendarDate);
                userType.AddEnumValue("CalendarDay", global::FluentIcons.Common.Symbol.CalendarDay);
                userType.AddEnumValue("CalendarEdit", global::FluentIcons.Common.Symbol.CalendarEdit);
                userType.AddEnumValue("CalendarEmpty", global::FluentIcons.Common.Symbol.CalendarEmpty);
                userType.AddEnumValue("CalendarError", global::FluentIcons.Common.Symbol.CalendarError);
                userType.AddEnumValue("CalendarEye", global::FluentIcons.Common.Symbol.CalendarEye);
                userType.AddEnumValue("CalendarInfo", global::FluentIcons.Common.Symbol.CalendarInfo);
                userType.AddEnumValue("CalendarLock", global::FluentIcons.Common.Symbol.CalendarLock);
                userType.AddEnumValue("CalendarMail", global::FluentIcons.Common.Symbol.CalendarMail);
                userType.AddEnumValue("CalendarMention", global::FluentIcons.Common.Symbol.CalendarMention);
                userType.AddEnumValue("CalendarMonth", global::FluentIcons.Common.Symbol.CalendarMonth);
                userType.AddEnumValue("CalendarMultiple", global::FluentIcons.Common.Symbol.CalendarMultiple);
                userType.AddEnumValue("CalendarNote", global::FluentIcons.Common.Symbol.CalendarNote);
                userType.AddEnumValue("CalendarPattern", global::FluentIcons.Common.Symbol.CalendarPattern);
                userType.AddEnumValue("CalendarPerson", global::FluentIcons.Common.Symbol.CalendarPerson);
                userType.AddEnumValue("CalendarPhone", global::FluentIcons.Common.Symbol.CalendarPhone);
                userType.AddEnumValue("CalendarPlay", global::FluentIcons.Common.Symbol.CalendarPlay);
                userType.AddEnumValue("CalendarQuestionMark", global::FluentIcons.Common.Symbol.CalendarQuestionMark);
                userType.AddEnumValue("CalendarRecord", global::FluentIcons.Common.Symbol.CalendarRecord);
                userType.AddEnumValue("CalendarReply", global::FluentIcons.Common.Symbol.CalendarReply);
                userType.AddEnumValue("CalendarSearch", global::FluentIcons.Common.Symbol.CalendarSearch);
                userType.AddEnumValue("CalendarSettings", global::FluentIcons.Common.Symbol.CalendarSettings);
                userType.AddEnumValue("CalendarShield", global::FluentIcons.Common.Symbol.CalendarShield);
                userType.AddEnumValue("CalendarSparkle", global::FluentIcons.Common.Symbol.CalendarSparkle);
                userType.AddEnumValue("CalendarStar", global::FluentIcons.Common.Symbol.CalendarStar);
                userType.AddEnumValue("CalendarSync", global::FluentIcons.Common.Symbol.CalendarSync);
                userType.AddEnumValue("CalendarTemplate", global::FluentIcons.Common.Symbol.CalendarTemplate);
                userType.AddEnumValue("CalendarToday", global::FluentIcons.Common.Symbol.CalendarToday);
                userType.AddEnumValue("CalendarTodo", global::FluentIcons.Common.Symbol.CalendarTodo);
                userType.AddEnumValue("CalendarToolbox", global::FluentIcons.Common.Symbol.CalendarToolbox);
                userType.AddEnumValue("CalendarVideo", global::FluentIcons.Common.Symbol.CalendarVideo);
                userType.AddEnumValue("CalendarWeekNumbers", global::FluentIcons.Common.Symbol.CalendarWeekNumbers);
                userType.AddEnumValue("CalendarWeekStart", global::FluentIcons.Common.Symbol.CalendarWeekStart);
                userType.AddEnumValue("CalendarWorkWeek", global::FluentIcons.Common.Symbol.CalendarWorkWeek);
                userType.AddEnumValue("Call", global::FluentIcons.Common.Symbol.Call);
                userType.AddEnumValue("CallAdd", global::FluentIcons.Common.Symbol.CallAdd);
                userType.AddEnumValue("CallCheckmark", global::FluentIcons.Common.Symbol.CallCheckmark);
                userType.AddEnumValue("CallConnecting", global::FluentIcons.Common.Symbol.CallConnecting);
                userType.AddEnumValue("CallDismiss", global::FluentIcons.Common.Symbol.CallDismiss);
                userType.AddEnumValue("CallEnd", global::FluentIcons.Common.Symbol.CallEnd);
                userType.AddEnumValue("CallExclamation", global::FluentIcons.Common.Symbol.CallExclamation);
                userType.AddEnumValue("CallForward", global::FluentIcons.Common.Symbol.CallForward);
                userType.AddEnumValue("CallInbound", global::FluentIcons.Common.Symbol.CallInbound);
                userType.AddEnumValue("CallMissed", global::FluentIcons.Common.Symbol.CallMissed);
                userType.AddEnumValue("CallOutbound", global::FluentIcons.Common.Symbol.CallOutbound);
                userType.AddEnumValue("CallPark", global::FluentIcons.Common.Symbol.CallPark);
                userType.AddEnumValue("CallPause", global::FluentIcons.Common.Symbol.CallPause);
                userType.AddEnumValue("CallProhibited", global::FluentIcons.Common.Symbol.CallProhibited);
                userType.AddEnumValue("CallTransfer", global::FluentIcons.Common.Symbol.CallTransfer);
                userType.AddEnumValue("CallWarning", global::FluentIcons.Common.Symbol.CallWarning);
                userType.AddEnumValue("CalligraphyPen", global::FluentIcons.Common.Symbol.CalligraphyPen);
                userType.AddEnumValue("CalligraphyPenCheckmark", global::FluentIcons.Common.Symbol.CalligraphyPenCheckmark);
                userType.AddEnumValue("CalligraphyPenError", global::FluentIcons.Common.Symbol.CalligraphyPenError);
                userType.AddEnumValue("CalligraphyPenQuestionMark", global::FluentIcons.Common.Symbol.CalligraphyPenQuestionMark);
                userType.AddEnumValue("Camera", global::FluentIcons.Common.Symbol.Camera);
                userType.AddEnumValue("CameraAdd", global::FluentIcons.Common.Symbol.CameraAdd);
                userType.AddEnumValue("CameraArrowUp", global::FluentIcons.Common.Symbol.CameraArrowUp);
                userType.AddEnumValue("CameraDome", global::FluentIcons.Common.Symbol.CameraDome);
                userType.AddEnumValue("CameraEdit", global::FluentIcons.Common.Symbol.CameraEdit);
                userType.AddEnumValue("CameraOff", global::FluentIcons.Common.Symbol.CameraOff);
                userType.AddEnumValue("CameraSparkles", global::FluentIcons.Common.Symbol.CameraSparkles);
                userType.AddEnumValue("CameraSwitch", global::FluentIcons.Common.Symbol.CameraSwitch);
                userType.AddEnumValue("CardUi", global::FluentIcons.Common.Symbol.CardUi);
                userType.AddEnumValue("CardUiPortraitFlip", global::FluentIcons.Common.Symbol.CardUiPortraitFlip);
                userType.AddEnumValue("CaretDown", global::FluentIcons.Common.Symbol.CaretDown);
                userType.AddEnumValue("CaretDownRight", global::FluentIcons.Common.Symbol.CaretDownRight);
                userType.AddEnumValue("CaretLeft", global::FluentIcons.Common.Symbol.CaretLeft);
                userType.AddEnumValue("CaretRight", global::FluentIcons.Common.Symbol.CaretRight);
                userType.AddEnumValue("CaretUp", global::FluentIcons.Common.Symbol.CaretUp);
                userType.AddEnumValue("Cart", global::FluentIcons.Common.Symbol.Cart);
                userType.AddEnumValue("Cast", global::FluentIcons.Common.Symbol.Cast);
                userType.AddEnumValue("CastMultiple", global::FluentIcons.Common.Symbol.CastMultiple);
                userType.AddEnumValue("CatchUp", global::FluentIcons.Common.Symbol.CatchUp);
                userType.AddEnumValue("Cellular3g", global::FluentIcons.Common.Symbol.Cellular3g);
                userType.AddEnumValue("Cellular4g", global::FluentIcons.Common.Symbol.Cellular4g);
                userType.AddEnumValue("Cellular5g", global::FluentIcons.Common.Symbol.Cellular5g);
                userType.AddEnumValue("CellularData1", global::FluentIcons.Common.Symbol.CellularData1);
                userType.AddEnumValue("CellularData2", global::FluentIcons.Common.Symbol.CellularData2);
                userType.AddEnumValue("CellularData3", global::FluentIcons.Common.Symbol.CellularData3);
                userType.AddEnumValue("CellularData4", global::FluentIcons.Common.Symbol.CellularData4);
                userType.AddEnumValue("CellularData5", global::FluentIcons.Common.Symbol.CellularData5);
                userType.AddEnumValue("CellularOff", global::FluentIcons.Common.Symbol.CellularOff);
                userType.AddEnumValue("CellularWarning", global::FluentIcons.Common.Symbol.CellularWarning);
                userType.AddEnumValue("CenterHorizontal", global::FluentIcons.Common.Symbol.CenterHorizontal);
                userType.AddEnumValue("CenterVertical", global::FluentIcons.Common.Symbol.CenterVertical);
                userType.AddEnumValue("Certificate", global::FluentIcons.Common.Symbol.Certificate);
                userType.AddEnumValue("Channel", global::FluentIcons.Common.Symbol.Channel);
                userType.AddEnumValue("ChannelAdd", global::FluentIcons.Common.Symbol.ChannelAdd);
                userType.AddEnumValue("ChannelAlert", global::FluentIcons.Common.Symbol.ChannelAlert);
                userType.AddEnumValue("ChannelArrowLeft", global::FluentIcons.Common.Symbol.ChannelArrowLeft);
                userType.AddEnumValue("ChannelDismiss", global::FluentIcons.Common.Symbol.ChannelDismiss);
                userType.AddEnumValue("ChannelShare", global::FluentIcons.Common.Symbol.ChannelShare);
                userType.AddEnumValue("ChannelSubtract", global::FluentIcons.Common.Symbol.ChannelSubtract);
                userType.AddEnumValue("ChartMultiple", global::FluentIcons.Common.Symbol.ChartMultiple);
                userType.AddEnumValue("ChartPerson", global::FluentIcons.Common.Symbol.ChartPerson);
                userType.AddEnumValue("Chat", global::FluentIcons.Common.Symbol.Chat);
                userType.AddEnumValue("ChatAdd", global::FluentIcons.Common.Symbol.ChatAdd);
                userType.AddEnumValue("ChatArrowBack", global::FluentIcons.Common.Symbol.ChatArrowBack);
                userType.AddEnumValue("ChatArrowBackDown", global::FluentIcons.Common.Symbol.ChatArrowBackDown);
                userType.AddEnumValue("ChatArrowDoubleBack", global::FluentIcons.Common.Symbol.ChatArrowDoubleBack);
                userType.AddEnumValue("ChatBubblesQuestion", global::FluentIcons.Common.Symbol.ChatBubblesQuestion);
                userType.AddEnumValue("ChatCursor", global::FluentIcons.Common.Symbol.ChatCursor);
                userType.AddEnumValue("ChatDismiss", global::FluentIcons.Common.Symbol.ChatDismiss);
                userType.AddEnumValue("ChatEmpty", global::FluentIcons.Common.Symbol.ChatEmpty);
                userType.AddEnumValue("ChatHelp", global::FluentIcons.Common.Symbol.ChatHelp);
                userType.AddEnumValue("ChatLock", global::FluentIcons.Common.Symbol.ChatLock);
                userType.AddEnumValue("ChatMail", global::FluentIcons.Common.Symbol.ChatMail);
                userType.AddEnumValue("ChatMultiple", global::FluentIcons.Common.Symbol.ChatMultiple);
                userType.AddEnumValue("ChatMultipleHeart", global::FluentIcons.Common.Symbol.ChatMultipleHeart);
                userType.AddEnumValue("ChatOff", global::FluentIcons.Common.Symbol.ChatOff);
                userType.AddEnumValue("ChatSettings", global::FluentIcons.Common.Symbol.ChatSettings);
                userType.AddEnumValue("ChatSparkle", global::FluentIcons.Common.Symbol.ChatSparkle);
                userType.AddEnumValue("ChatVideo", global::FluentIcons.Common.Symbol.ChatVideo);
                userType.AddEnumValue("ChatWarning", global::FluentIcons.Common.Symbol.ChatWarning);
                userType.AddEnumValue("Check", global::FluentIcons.Common.Symbol.Check);
                userType.AddEnumValue("Checkbox1", global::FluentIcons.Common.Symbol.Checkbox1);
                userType.AddEnumValue("Checkbox2", global::FluentIcons.Common.Symbol.Checkbox2);
                userType.AddEnumValue("CheckboxArrowRight", global::FluentIcons.Common.Symbol.CheckboxArrowRight);
                userType.AddEnumValue("CheckboxChecked", global::FluentIcons.Common.Symbol.CheckboxChecked);
                userType.AddEnumValue("CheckboxCheckedSync", global::FluentIcons.Common.Symbol.CheckboxCheckedSync);
                userType.AddEnumValue("CheckboxIndeterminate", global::FluentIcons.Common.Symbol.CheckboxIndeterminate);
                userType.AddEnumValue("CheckboxPerson", global::FluentIcons.Common.Symbol.CheckboxPerson);
                userType.AddEnumValue("CheckboxUnchecked", global::FluentIcons.Common.Symbol.CheckboxUnchecked);
                userType.AddEnumValue("CheckboxWarning", global::FluentIcons.Common.Symbol.CheckboxWarning);
                userType.AddEnumValue("Checkmark", global::FluentIcons.Common.Symbol.Checkmark);
                userType.AddEnumValue("CheckmarkCircle", global::FluentIcons.Common.Symbol.CheckmarkCircle);
                userType.AddEnumValue("CheckmarkCircleSquare", global::FluentIcons.Common.Symbol.CheckmarkCircleSquare);
                userType.AddEnumValue("CheckmarkCircleWarning", global::FluentIcons.Common.Symbol.CheckmarkCircleWarning);
                userType.AddEnumValue("CheckmarkLock", global::FluentIcons.Common.Symbol.CheckmarkLock);
                userType.AddEnumValue("CheckmarkNote", global::FluentIcons.Common.Symbol.CheckmarkNote);
                userType.AddEnumValue("CheckmarkSquare", global::FluentIcons.Common.Symbol.CheckmarkSquare);
                userType.AddEnumValue("CheckmarkStarburst", global::FluentIcons.Common.Symbol.CheckmarkStarburst);
                userType.AddEnumValue("CheckmarkUnderlineCircle", global::FluentIcons.Common.Symbol.CheckmarkUnderlineCircle);
                userType.AddEnumValue("Chess", global::FluentIcons.Common.Symbol.Chess);
                userType.AddEnumValue("ChevronCircleDown", global::FluentIcons.Common.Symbol.ChevronCircleDown);
                userType.AddEnumValue("ChevronCircleLeft", global::FluentIcons.Common.Symbol.ChevronCircleLeft);
                userType.AddEnumValue("ChevronCircleRight", global::FluentIcons.Common.Symbol.ChevronCircleRight);
                userType.AddEnumValue("ChevronCircleUp", global::FluentIcons.Common.Symbol.ChevronCircleUp);
                userType.AddEnumValue("ChevronDoubleDown", global::FluentIcons.Common.Symbol.ChevronDoubleDown);
                userType.AddEnumValue("ChevronDoubleLeft", global::FluentIcons.Common.Symbol.ChevronDoubleLeft);
                userType.AddEnumValue("ChevronDoubleRight", global::FluentIcons.Common.Symbol.ChevronDoubleRight);
                userType.AddEnumValue("ChevronDoubleUp", global::FluentIcons.Common.Symbol.ChevronDoubleUp);
                userType.AddEnumValue("ChevronDown", global::FluentIcons.Common.Symbol.ChevronDown);
                userType.AddEnumValue("ChevronDownUp", global::FluentIcons.Common.Symbol.ChevronDownUp);
                userType.AddEnumValue("ChevronLeft", global::FluentIcons.Common.Symbol.ChevronLeft);
                userType.AddEnumValue("ChevronRight", global::FluentIcons.Common.Symbol.ChevronRight);
                userType.AddEnumValue("ChevronUp", global::FluentIcons.Common.Symbol.ChevronUp);
                userType.AddEnumValue("ChevronUpDown", global::FluentIcons.Common.Symbol.ChevronUpDown);
                userType.AddEnumValue("Circle", global::FluentIcons.Common.Symbol.Circle);
                userType.AddEnumValue("CircleEdit", global::FluentIcons.Common.Symbol.CircleEdit);
                userType.AddEnumValue("CircleEraser", global::FluentIcons.Common.Symbol.CircleEraser);
                userType.AddEnumValue("CircleHalfFill", global::FluentIcons.Common.Symbol.CircleHalfFill);
                userType.AddEnumValue("CircleHighlight", global::FluentIcons.Common.Symbol.CircleHighlight);
                userType.AddEnumValue("CircleHint", global::FluentIcons.Common.Symbol.CircleHint);
                userType.AddEnumValue("CircleHintCursor", global::FluentIcons.Common.Symbol.CircleHintCursor);
                userType.AddEnumValue("CircleHintDismiss", global::FluentIcons.Common.Symbol.CircleHintDismiss);
                userType.AddEnumValue("CircleHintHalfVertical", global::FluentIcons.Common.Symbol.CircleHintHalfVertical);
                userType.AddEnumValue("CircleImage", global::FluentIcons.Common.Symbol.CircleImage);
                userType.AddEnumValue("CircleLine", global::FluentIcons.Common.Symbol.CircleLine);
                userType.AddEnumValue("CircleMultipleConcentric", global::FluentIcons.Common.Symbol.CircleMultipleConcentric);
                userType.AddEnumValue("CircleMultipleSubtractCheckmark", global::FluentIcons.Common.Symbol.CircleMultipleSubtractCheckmark);
                userType.AddEnumValue("CircleOff", global::FluentIcons.Common.Symbol.CircleOff);
                userType.AddEnumValue("CircleShadow", global::FluentIcons.Common.Symbol.CircleShadow);
                userType.AddEnumValue("CircleSmall", global::FluentIcons.Common.Symbol.CircleSmall);
                userType.AddEnumValue("City", global::FluentIcons.Common.Symbol.City);
                userType.AddEnumValue("Class", global::FluentIcons.Common.Symbol.Class);
                userType.AddEnumValue("Classification", global::FluentIcons.Common.Symbol.Classification);
                userType.AddEnumValue("ClearFormatting", global::FluentIcons.Common.Symbol.ClearFormatting);
                userType.AddEnumValue("Clipboard", global::FluentIcons.Common.Symbol.Clipboard);
                userType.AddEnumValue("Clipboard3Day", global::FluentIcons.Common.Symbol.Clipboard3Day);
                userType.AddEnumValue("ClipboardArrowRight", global::FluentIcons.Common.Symbol.ClipboardArrowRight);
                userType.AddEnumValue("ClipboardBrush", global::FluentIcons.Common.Symbol.ClipboardBrush);
                userType.AddEnumValue("ClipboardBulletList", global::FluentIcons.Common.Symbol.ClipboardBulletList);
                userType.AddEnumValue("ClipboardCheckmark", global::FluentIcons.Common.Symbol.ClipboardCheckmark);
                userType.AddEnumValue("ClipboardClock", global::FluentIcons.Common.Symbol.ClipboardClock);
                userType.AddEnumValue("ClipboardCode", global::FluentIcons.Common.Symbol.ClipboardCode);
                userType.AddEnumValue("ClipboardDataBar", global::FluentIcons.Common.Symbol.ClipboardDataBar);
                userType.AddEnumValue("ClipboardDay", global::FluentIcons.Common.Symbol.ClipboardDay);
                userType.AddEnumValue("ClipboardEdit", global::FluentIcons.Common.Symbol.ClipboardEdit);
                userType.AddEnumValue("ClipboardError", global::FluentIcons.Common.Symbol.ClipboardError);
                userType.AddEnumValue("ClipboardHeart", global::FluentIcons.Common.Symbol.ClipboardHeart);
                userType.AddEnumValue("ClipboardImage", global::FluentIcons.Common.Symbol.ClipboardImage);
                userType.AddEnumValue("ClipboardLetter", global::FluentIcons.Common.Symbol.ClipboardLetter);
                userType.AddEnumValue("ClipboardLink", global::FluentIcons.Common.Symbol.ClipboardLink);
                userType.AddEnumValue("ClipboardMathFormula", global::FluentIcons.Common.Symbol.ClipboardMathFormula);
                userType.AddEnumValue("ClipboardMonth", global::FluentIcons.Common.Symbol.ClipboardMonth);
                userType.AddEnumValue("ClipboardMore", global::FluentIcons.Common.Symbol.ClipboardMore);
                userType.AddEnumValue("ClipboardNote", global::FluentIcons.Common.Symbol.ClipboardNote);
                userType.AddEnumValue("ClipboardNumber123", global::FluentIcons.Common.Symbol.ClipboardNumber123);
                userType.AddEnumValue("ClipboardPaste", global::FluentIcons.Common.Symbol.ClipboardPaste);
                userType.AddEnumValue("ClipboardPulse", global::FluentIcons.Common.Symbol.ClipboardPulse);
                userType.AddEnumValue("ClipboardSearch", global::FluentIcons.Common.Symbol.ClipboardSearch);
                userType.AddEnumValue("ClipboardSettings", global::FluentIcons.Common.Symbol.ClipboardSettings);
                userType.AddEnumValue("ClipboardTask", global::FluentIcons.Common.Symbol.ClipboardTask);
                userType.AddEnumValue("ClipboardTaskAdd", global::FluentIcons.Common.Symbol.ClipboardTaskAdd);
                userType.AddEnumValue("ClipboardTaskList", global::FluentIcons.Common.Symbol.ClipboardTaskList);
                userType.AddEnumValue("ClipboardText", global::FluentIcons.Common.Symbol.ClipboardText);
                userType.AddEnumValue("ClipboardTextEdit", global::FluentIcons.Common.Symbol.ClipboardTextEdit);
                userType.AddEnumValue("Clock", global::FluentIcons.Common.Symbol.Clock);
                userType.AddEnumValue("ClockAlarm", global::FluentIcons.Common.Symbol.ClockAlarm);
                userType.AddEnumValue("ClockArrowDownload", global::FluentIcons.Common.Symbol.ClockArrowDownload);
                userType.AddEnumValue("ClockBill", global::FluentIcons.Common.Symbol.ClockBill);
                userType.AddEnumValue("ClockDismiss", global::FluentIcons.Common.Symbol.ClockDismiss);
                userType.AddEnumValue("ClockLock", global::FluentIcons.Common.Symbol.ClockLock);
                userType.AddEnumValue("ClockPause", global::FluentIcons.Common.Symbol.ClockPause);
                userType.AddEnumValue("ClockToolbox", global::FluentIcons.Common.Symbol.ClockToolbox);
                userType.AddEnumValue("ClosedCaption", global::FluentIcons.Common.Symbol.ClosedCaption);
                userType.AddEnumValue("ClosedCaptionOff", global::FluentIcons.Common.Symbol.ClosedCaptionOff);
                userType.AddEnumValue("ClothesHanger", global::FluentIcons.Common.Symbol.ClothesHanger);
                userType.AddEnumValue("Cloud", global::FluentIcons.Common.Symbol.Cloud);
                userType.AddEnumValue("CloudAdd", global::FluentIcons.Common.Symbol.CloudAdd);
                userType.AddEnumValue("CloudArchive", global::FluentIcons.Common.Symbol.CloudArchive);
                userType.AddEnumValue("CloudArrowDown", global::FluentIcons.Common.Symbol.CloudArrowDown);
                userType.AddEnumValue("CloudArrowRight", global::FluentIcons.Common.Symbol.CloudArrowRight);
                userType.AddEnumValue("CloudArrowUp", global::FluentIcons.Common.Symbol.CloudArrowUp);
                userType.AddEnumValue("CloudBeaker", global::FluentIcons.Common.Symbol.CloudBeaker);
                userType.AddEnumValue("CloudBidirectional", global::FluentIcons.Common.Symbol.CloudBidirectional);
                userType.AddEnumValue("CloudCheckmark", global::FluentIcons.Common.Symbol.CloudCheckmark);
                userType.AddEnumValue("CloudCube", global::FluentIcons.Common.Symbol.CloudCube);
                userType.AddEnumValue("CloudDatabase", global::FluentIcons.Common.Symbol.CloudDatabase);
                userType.AddEnumValue("CloudDesktop", global::FluentIcons.Common.Symbol.CloudDesktop);
                userType.AddEnumValue("CloudDismiss", global::FluentIcons.Common.Symbol.CloudDismiss);
                userType.AddEnumValue("CloudEdit", global::FluentIcons.Common.Symbol.CloudEdit);
                userType.AddEnumValue("CloudError", global::FluentIcons.Common.Symbol.CloudError);
                userType.AddEnumValue("CloudFlow", global::FluentIcons.Common.Symbol.CloudFlow);
                userType.AddEnumValue("CloudLink", global::FluentIcons.Common.Symbol.CloudLink);
                userType.AddEnumValue("CloudOff", global::FluentIcons.Common.Symbol.CloudOff);
                userType.AddEnumValue("CloudSwap", global::FluentIcons.Common.Symbol.CloudSwap);
                userType.AddEnumValue("CloudSync", global::FluentIcons.Common.Symbol.CloudSync);
                userType.AddEnumValue("CloudWords", global::FluentIcons.Common.Symbol.CloudWords);
                userType.AddEnumValue("Clover", global::FluentIcons.Common.Symbol.Clover);
                userType.AddEnumValue("Code", global::FluentIcons.Common.Symbol.Code);
                userType.AddEnumValue("CodeBlock", global::FluentIcons.Common.Symbol.CodeBlock);
                userType.AddEnumValue("CodeCircle", global::FluentIcons.Common.Symbol.CodeCircle);
                userType.AddEnumValue("CodeText", global::FluentIcons.Common.Symbol.CodeText);
                userType.AddEnumValue("CodeTextEdit", global::FluentIcons.Common.Symbol.CodeTextEdit);
                userType.AddEnumValue("CoinMultiple", global::FluentIcons.Common.Symbol.CoinMultiple);
                userType.AddEnumValue("CoinStack", global::FluentIcons.Common.Symbol.CoinStack);
                userType.AddEnumValue("Collections", global::FluentIcons.Common.Symbol.Collections);
                userType.AddEnumValue("CollectionsAdd", global::FluentIcons.Common.Symbol.CollectionsAdd);
                userType.AddEnumValue("Color", global::FluentIcons.Common.Symbol.Color);
                userType.AddEnumValue("ColorBackground", global::FluentIcons.Common.Symbol.ColorBackground);
                userType.AddEnumValue("ColorBackgroundAccent", global::FluentIcons.Common.Symbol.ColorBackgroundAccent);
                userType.AddEnumValue("ColorFill", global::FluentIcons.Common.Symbol.ColorFill);
                userType.AddEnumValue("ColorFillAccent", global::FluentIcons.Common.Symbol.ColorFillAccent);
                userType.AddEnumValue("ColorLine", global::FluentIcons.Common.Symbol.ColorLine);
                userType.AddEnumValue("ColorLineAccent", global::FluentIcons.Common.Symbol.ColorLineAccent);
                userType.AddEnumValue("Column", global::FluentIcons.Common.Symbol.Column);
                userType.AddEnumValue("ColumnArrowRight", global::FluentIcons.Common.Symbol.ColumnArrowRight);
                userType.AddEnumValue("ColumnDoubleCompare", global::FluentIcons.Common.Symbol.ColumnDoubleCompare);
                userType.AddEnumValue("ColumnEdit", global::FluentIcons.Common.Symbol.ColumnEdit);
                userType.AddEnumValue("ColumnSingleCompare", global::FluentIcons.Common.Symbol.ColumnSingleCompare);
                userType.AddEnumValue("ColumnTriple", global::FluentIcons.Common.Symbol.ColumnTriple);
                userType.AddEnumValue("ColumnTripleEdit", global::FluentIcons.Common.Symbol.ColumnTripleEdit);
                userType.AddEnumValue("Comma", global::FluentIcons.Common.Symbol.Comma);
                userType.AddEnumValue("Comment", global::FluentIcons.Common.Symbol.Comment);
                userType.AddEnumValue("CommentAdd", global::FluentIcons.Common.Symbol.CommentAdd);
                userType.AddEnumValue("CommentArrowLeft", global::FluentIcons.Common.Symbol.CommentArrowLeft);
                userType.AddEnumValue("CommentArrowRight", global::FluentIcons.Common.Symbol.CommentArrowRight);
                userType.AddEnumValue("CommentBadge", global::FluentIcons.Common.Symbol.CommentBadge);
                userType.AddEnumValue("CommentCheckmark", global::FluentIcons.Common.Symbol.CommentCheckmark);
                userType.AddEnumValue("CommentDismiss", global::FluentIcons.Common.Symbol.CommentDismiss);
                userType.AddEnumValue("CommentEdit", global::FluentIcons.Common.Symbol.CommentEdit);
                userType.AddEnumValue("CommentError", global::FluentIcons.Common.Symbol.CommentError);
                userType.AddEnumValue("CommentLightning", global::FluentIcons.Common.Symbol.CommentLightning);
                userType.AddEnumValue("CommentLink", global::FluentIcons.Common.Symbol.CommentLink);
                userType.AddEnumValue("CommentMention", global::FluentIcons.Common.Symbol.CommentMention);
                userType.AddEnumValue("CommentMultiple", global::FluentIcons.Common.Symbol.CommentMultiple);
                userType.AddEnumValue("CommentMultipleCheckmark", global::FluentIcons.Common.Symbol.CommentMultipleCheckmark);
                userType.AddEnumValue("CommentMultipleLink", global::FluentIcons.Common.Symbol.CommentMultipleLink);
                userType.AddEnumValue("CommentMultipleMention", global::FluentIcons.Common.Symbol.CommentMultipleMention);
                userType.AddEnumValue("CommentNote", global::FluentIcons.Common.Symbol.CommentNote);
                userType.AddEnumValue("CommentOff", global::FluentIcons.Common.Symbol.CommentOff);
                userType.AddEnumValue("CommentQuote", global::FluentIcons.Common.Symbol.CommentQuote);
                userType.AddEnumValue("CommentText", global::FluentIcons.Common.Symbol.CommentText);
                userType.AddEnumValue("Communication", global::FluentIcons.Common.Symbol.Communication);
                userType.AddEnumValue("CommunicationPerson", global::FluentIcons.Common.Symbol.CommunicationPerson);
                userType.AddEnumValue("CommunicationShield", global::FluentIcons.Common.Symbol.CommunicationShield);
                userType.AddEnumValue("CompassNorthwest", global::FluentIcons.Common.Symbol.CompassNorthwest);
                userType.AddEnumValue("Compose", global::FluentIcons.Common.Symbol.Compose);
                userType.AddEnumValue("ConferenceRoom", global::FluentIcons.Common.Symbol.ConferenceRoom);
                userType.AddEnumValue("Connected", global::FluentIcons.Common.Symbol.Connected);
                userType.AddEnumValue("Connector", global::FluentIcons.Common.Symbol.Connector);
                userType.AddEnumValue("ContactCard", global::FluentIcons.Common.Symbol.ContactCard);
                userType.AddEnumValue("ContactCardGroup", global::FluentIcons.Common.Symbol.ContactCardGroup);
                userType.AddEnumValue("ContactCardLink", global::FluentIcons.Common.Symbol.ContactCardLink);
                userType.AddEnumValue("ContactCardRibbon", global::FluentIcons.Common.Symbol.ContactCardRibbon);
                userType.AddEnumValue("ContentSettings", global::FluentIcons.Common.Symbol.ContentSettings);
                userType.AddEnumValue("ContentView", global::FluentIcons.Common.Symbol.ContentView);
                userType.AddEnumValue("ContentViewGallery", global::FluentIcons.Common.Symbol.ContentViewGallery);
                userType.AddEnumValue("ContentViewGalleryLightning", global::FluentIcons.Common.Symbol.ContentViewGalleryLightning);
                userType.AddEnumValue("ContractDownLeft", global::FluentIcons.Common.Symbol.ContractDownLeft);
                userType.AddEnumValue("ContractUpRight", global::FluentIcons.Common.Symbol.ContractUpRight);
                userType.AddEnumValue("ControlButton", global::FluentIcons.Common.Symbol.ControlButton);
                userType.AddEnumValue("ConvertRange", global::FluentIcons.Common.Symbol.ConvertRange);
                userType.AddEnumValue("Cookies", global::FluentIcons.Common.Symbol.Cookies);
                userType.AddEnumValue("Copy", global::FluentIcons.Common.Symbol.Copy);
                userType.AddEnumValue("CopyAdd", global::FluentIcons.Common.Symbol.CopyAdd);
                userType.AddEnumValue("CopyArrowRight", global::FluentIcons.Common.Symbol.CopyArrowRight);
                userType.AddEnumValue("CopySelect", global::FluentIcons.Common.Symbol.CopySelect);
                userType.AddEnumValue("Couch", global::FluentIcons.Common.Symbol.Couch);
                userType.AddEnumValue("CreditCardClock", global::FluentIcons.Common.Symbol.CreditCardClock);
                userType.AddEnumValue("CreditCardPerson", global::FluentIcons.Common.Symbol.CreditCardPerson);
                userType.AddEnumValue("CreditCardToolbox", global::FluentIcons.Common.Symbol.CreditCardToolbox);
                userType.AddEnumValue("Crop", global::FluentIcons.Common.Symbol.Crop);
                userType.AddEnumValue("CropArrowRotate", global::FluentIcons.Common.Symbol.CropArrowRotate);
                userType.AddEnumValue("CropInterim", global::FluentIcons.Common.Symbol.CropInterim);
                userType.AddEnumValue("CropInterimOff", global::FluentIcons.Common.Symbol.CropInterimOff);
                userType.AddEnumValue("Crown", global::FluentIcons.Common.Symbol.Crown);
                userType.AddEnumValue("Cube", global::FluentIcons.Common.Symbol.Cube);
                userType.AddEnumValue("CubeAdd", global::FluentIcons.Common.Symbol.CubeAdd);
                userType.AddEnumValue("CubeArrowCurveDown", global::FluentIcons.Common.Symbol.CubeArrowCurveDown);
                userType.AddEnumValue("CubeLink", global::FluentIcons.Common.Symbol.CubeLink);
                userType.AddEnumValue("CubeMultiple", global::FluentIcons.Common.Symbol.CubeMultiple);
                userType.AddEnumValue("CubeQuick", global::FluentIcons.Common.Symbol.CubeQuick);
                userType.AddEnumValue("CubeRotate", global::FluentIcons.Common.Symbol.CubeRotate);
                userType.AddEnumValue("CubeSync", global::FluentIcons.Common.Symbol.CubeSync);
                userType.AddEnumValue("CubeTree", global::FluentIcons.Common.Symbol.CubeTree);
                userType.AddEnumValue("CurrencyDollarEuro", global::FluentIcons.Common.Symbol.CurrencyDollarEuro);
                userType.AddEnumValue("CurrencyDollarRupee", global::FluentIcons.Common.Symbol.CurrencyDollarRupee);
                userType.AddEnumValue("Cursor", global::FluentIcons.Common.Symbol.Cursor);
                userType.AddEnumValue("CursorClick", global::FluentIcons.Common.Symbol.CursorClick);
                userType.AddEnumValue("CursorHover", global::FluentIcons.Common.Symbol.CursorHover);
                userType.AddEnumValue("CursorHoverOff", global::FluentIcons.Common.Symbol.CursorHoverOff);
                userType.AddEnumValue("CursorProhibited", global::FluentIcons.Common.Symbol.CursorProhibited);
                userType.AddEnumValue("Cut", global::FluentIcons.Common.Symbol.Cut);
                userType.AddEnumValue("DarkTheme", global::FluentIcons.Common.Symbol.DarkTheme);
                userType.AddEnumValue("DataArea", global::FluentIcons.Common.Symbol.DataArea);
                userType.AddEnumValue("DataBarHorizontal", global::FluentIcons.Common.Symbol.DataBarHorizontal);
                userType.AddEnumValue("DataBarVertical", global::FluentIcons.Common.Symbol.DataBarVertical);
                userType.AddEnumValue("DataBarVerticalAdd", global::FluentIcons.Common.Symbol.DataBarVerticalAdd);
                userType.AddEnumValue("DataBarVerticalArrowDown", global::FluentIcons.Common.Symbol.DataBarVerticalArrowDown);
                userType.AddEnumValue("DataBarVerticalAscending", global::FluentIcons.Common.Symbol.DataBarVerticalAscending);
                userType.AddEnumValue("DataBarVerticalStar", global::FluentIcons.Common.Symbol.DataBarVerticalStar);
                userType.AddEnumValue("DataFunnel", global::FluentIcons.Common.Symbol.DataFunnel);
                userType.AddEnumValue("DataHistogram", global::FluentIcons.Common.Symbol.DataHistogram);
                userType.AddEnumValue("DataLine", global::FluentIcons.Common.Symbol.DataLine);
                userType.AddEnumValue("DataPie", global::FluentIcons.Common.Symbol.DataPie);
                userType.AddEnumValue("DataScatter", global::FluentIcons.Common.Symbol.DataScatter);
                userType.AddEnumValue("DataSunburst", global::FluentIcons.Common.Symbol.DataSunburst);
                userType.AddEnumValue("DataTreemap", global::FluentIcons.Common.Symbol.DataTreemap);
                userType.AddEnumValue("DataTrending", global::FluentIcons.Common.Symbol.DataTrending);
                userType.AddEnumValue("DataUsage", global::FluentIcons.Common.Symbol.DataUsage);
                userType.AddEnumValue("DataUsageCheckmark", global::FluentIcons.Common.Symbol.DataUsageCheckmark);
                userType.AddEnumValue("DataUsageEdit", global::FluentIcons.Common.Symbol.DataUsageEdit);
                userType.AddEnumValue("DataUsageSettings", global::FluentIcons.Common.Symbol.DataUsageSettings);
                userType.AddEnumValue("DataUsageToolbox", global::FluentIcons.Common.Symbol.DataUsageToolbox);
                userType.AddEnumValue("DataWaterfall", global::FluentIcons.Common.Symbol.DataWaterfall);
                userType.AddEnumValue("DataWhisker", global::FluentIcons.Common.Symbol.DataWhisker);
                userType.AddEnumValue("Database", global::FluentIcons.Common.Symbol.Database);
                userType.AddEnumValue("DatabaseArrowDown", global::FluentIcons.Common.Symbol.DatabaseArrowDown);
                userType.AddEnumValue("DatabaseArrowRight", global::FluentIcons.Common.Symbol.DatabaseArrowRight);
                userType.AddEnumValue("DatabaseArrowUp", global::FluentIcons.Common.Symbol.DatabaseArrowUp);
                userType.AddEnumValue("DatabaseCheckmark", global::FluentIcons.Common.Symbol.DatabaseCheckmark);
                userType.AddEnumValue("DatabaseLightning", global::FluentIcons.Common.Symbol.DatabaseLightning);
                userType.AddEnumValue("DatabaseLink", global::FluentIcons.Common.Symbol.DatabaseLink);
                userType.AddEnumValue("DatabaseMultiple", global::FluentIcons.Common.Symbol.DatabaseMultiple);
                userType.AddEnumValue("DatabasePerson", global::FluentIcons.Common.Symbol.DatabasePerson);
                userType.AddEnumValue("DatabasePlugConnected", global::FluentIcons.Common.Symbol.DatabasePlugConnected);
                userType.AddEnumValue("DatabaseSearch", global::FluentIcons.Common.Symbol.DatabaseSearch);
                userType.AddEnumValue("DatabaseSwitch", global::FluentIcons.Common.Symbol.DatabaseSwitch);
                userType.AddEnumValue("DatabaseWarning", global::FluentIcons.Common.Symbol.DatabaseWarning);
                userType.AddEnumValue("DatabaseWindow", global::FluentIcons.Common.Symbol.DatabaseWindow);
                userType.AddEnumValue("DecimalArrowLeft", global::FluentIcons.Common.Symbol.DecimalArrowLeft);
                userType.AddEnumValue("DecimalArrowRight", global::FluentIcons.Common.Symbol.DecimalArrowRight);
                userType.AddEnumValue("Delete", global::FluentIcons.Common.Symbol.Delete);
                userType.AddEnumValue("DeleteArrowBack", global::FluentIcons.Common.Symbol.DeleteArrowBack);
                userType.AddEnumValue("DeleteDismiss", global::FluentIcons.Common.Symbol.DeleteDismiss);
                userType.AddEnumValue("DeleteLines", global::FluentIcons.Common.Symbol.DeleteLines);
                userType.AddEnumValue("DeleteOff", global::FluentIcons.Common.Symbol.DeleteOff);
                userType.AddEnumValue("Dentist", global::FluentIcons.Common.Symbol.Dentist);
                userType.AddEnumValue("DesignIdeas", global::FluentIcons.Common.Symbol.DesignIdeas);
                userType.AddEnumValue("Desk", global::FluentIcons.Common.Symbol.Desk);
                userType.AddEnumValue("Desktop", global::FluentIcons.Common.Symbol.Desktop);
                userType.AddEnumValue("DesktopArrowDown", global::FluentIcons.Common.Symbol.DesktopArrowDown);
                userType.AddEnumValue("DesktopArrowRight", global::FluentIcons.Common.Symbol.DesktopArrowRight);
                userType.AddEnumValue("DesktopCheckmark", global::FluentIcons.Common.Symbol.DesktopCheckmark);
                userType.AddEnumValue("DesktopCursor", global::FluentIcons.Common.Symbol.DesktopCursor);
                userType.AddEnumValue("DesktopEdit", global::FluentIcons.Common.Symbol.DesktopEdit);
                userType.AddEnumValue("DesktopFlow", global::FluentIcons.Common.Symbol.DesktopFlow);
                userType.AddEnumValue("DesktopKeyboard", global::FluentIcons.Common.Symbol.DesktopKeyboard);
                userType.AddEnumValue("DesktopMac", global::FluentIcons.Common.Symbol.DesktopMac);
                userType.AddEnumValue("DesktopOff", global::FluentIcons.Common.Symbol.DesktopOff);
                userType.AddEnumValue("DesktopPulse", global::FluentIcons.Common.Symbol.DesktopPulse);
                userType.AddEnumValue("DesktopSignal", global::FluentIcons.Common.Symbol.DesktopSignal);
                userType.AddEnumValue("DesktopSpeaker", global::FluentIcons.Common.Symbol.DesktopSpeaker);
                userType.AddEnumValue("DesktopSpeakerOff", global::FluentIcons.Common.Symbol.DesktopSpeakerOff);
                userType.AddEnumValue("DesktopSync", global::FluentIcons.Common.Symbol.DesktopSync);
                userType.AddEnumValue("DesktopToolbox", global::FluentIcons.Common.Symbol.DesktopToolbox);
                userType.AddEnumValue("DesktopTower", global::FluentIcons.Common.Symbol.DesktopTower);
                userType.AddEnumValue("DeveloperBoard", global::FluentIcons.Common.Symbol.DeveloperBoard);
                userType.AddEnumValue("DeveloperBoardLightning", global::FluentIcons.Common.Symbol.DeveloperBoardLightning);
                userType.AddEnumValue("DeveloperBoardLightningToolbox", global::FluentIcons.Common.Symbol.DeveloperBoardLightningToolbox);
                userType.AddEnumValue("DeveloperBoardSearch", global::FluentIcons.Common.Symbol.DeveloperBoardSearch);
                userType.AddEnumValue("DeviceEq", global::FluentIcons.Common.Symbol.DeviceEq);
                userType.AddEnumValue("DeviceMeetingRoom", global::FluentIcons.Common.Symbol.DeviceMeetingRoom);
                userType.AddEnumValue("DeviceMeetingRoomRemote", global::FluentIcons.Common.Symbol.DeviceMeetingRoomRemote);
                userType.AddEnumValue("Diagram", global::FluentIcons.Common.Symbol.Diagram);
                userType.AddEnumValue("Dialpad", global::FluentIcons.Common.Symbol.Dialpad);
                userType.AddEnumValue("DialpadOff", global::FluentIcons.Common.Symbol.DialpadOff);
                userType.AddEnumValue("DialpadQuestionMark", global::FluentIcons.Common.Symbol.DialpadQuestionMark);
                userType.AddEnumValue("Diamond", global::FluentIcons.Common.Symbol.Diamond);
                userType.AddEnumValue("Directions", global::FluentIcons.Common.Symbol.Directions);
                userType.AddEnumValue("Dishwasher", global::FluentIcons.Common.Symbol.Dishwasher);
                userType.AddEnumValue("Dismiss", global::FluentIcons.Common.Symbol.Dismiss);
                userType.AddEnumValue("DismissCircle", global::FluentIcons.Common.Symbol.DismissCircle);
                userType.AddEnumValue("DismissSquare", global::FluentIcons.Common.Symbol.DismissSquare);
                userType.AddEnumValue("DismissSquareMultiple", global::FluentIcons.Common.Symbol.DismissSquareMultiple);
                userType.AddEnumValue("Diversity", global::FluentIcons.Common.Symbol.Diversity);
                userType.AddEnumValue("DividerShort", global::FluentIcons.Common.Symbol.DividerShort);
                userType.AddEnumValue("DividerTall", global::FluentIcons.Common.Symbol.DividerTall);
                userType.AddEnumValue("Dock", global::FluentIcons.Common.Symbol.Dock);
                userType.AddEnumValue("DockRow", global::FluentIcons.Common.Symbol.DockRow);
                userType.AddEnumValue("Doctor", global::FluentIcons.Common.Symbol.Doctor);
                userType.AddEnumValue("Document", global::FluentIcons.Common.Symbol.Document);
                userType.AddEnumValue("Document100", global::FluentIcons.Common.Symbol.Document100);
                userType.AddEnumValue("DocumentAdd", global::FluentIcons.Common.Symbol.DocumentAdd);
                userType.AddEnumValue("DocumentArrowDown", global::FluentIcons.Common.Symbol.DocumentArrowDown);
                userType.AddEnumValue("DocumentArrowLeft", global::FluentIcons.Common.Symbol.DocumentArrowLeft);
                userType.AddEnumValue("DocumentArrowRight", global::FluentIcons.Common.Symbol.DocumentArrowRight);
                userType.AddEnumValue("DocumentArrowUp", global::FluentIcons.Common.Symbol.DocumentArrowUp);
                userType.AddEnumValue("DocumentBorder", global::FluentIcons.Common.Symbol.DocumentBorder);
                userType.AddEnumValue("DocumentBorderPrint", global::FluentIcons.Common.Symbol.DocumentBorderPrint);
                userType.AddEnumValue("DocumentBriefcase", global::FluentIcons.Common.Symbol.DocumentBriefcase);
                userType.AddEnumValue("DocumentBulletList", global::FluentIcons.Common.Symbol.DocumentBulletList);
                userType.AddEnumValue("DocumentBulletListArrowLeft", global::FluentIcons.Common.Symbol.DocumentBulletListArrowLeft);
                userType.AddEnumValue("DocumentBulletListClock", global::FluentIcons.Common.Symbol.DocumentBulletListClock);
                userType.AddEnumValue("DocumentBulletListCube", global::FluentIcons.Common.Symbol.DocumentBulletListCube);
                userType.AddEnumValue("DocumentBulletListMultiple", global::FluentIcons.Common.Symbol.DocumentBulletListMultiple);
                userType.AddEnumValue("DocumentBulletListOff", global::FluentIcons.Common.Symbol.DocumentBulletListOff);
                userType.AddEnumValue("DocumentCatchUp", global::FluentIcons.Common.Symbol.DocumentCatchUp);
                userType.AddEnumValue("DocumentCheckmark", global::FluentIcons.Common.Symbol.DocumentCheckmark);
                userType.AddEnumValue("DocumentChevronDouble", global::FluentIcons.Common.Symbol.DocumentChevronDouble);
                userType.AddEnumValue("DocumentCopy", global::FluentIcons.Common.Symbol.DocumentCopy);
                userType.AddEnumValue("DocumentCss", global::FluentIcons.Common.Symbol.DocumentCss);
                userType.AddEnumValue("DocumentCube", global::FluentIcons.Common.Symbol.DocumentCube);
                userType.AddEnumValue("DocumentData", global::FluentIcons.Common.Symbol.DocumentData);
                userType.AddEnumValue("DocumentDataLink", global::FluentIcons.Common.Symbol.DocumentDataLink);
                userType.AddEnumValue("DocumentDataLock", global::FluentIcons.Common.Symbol.DocumentDataLock);
                userType.AddEnumValue("DocumentDatabase", global::FluentIcons.Common.Symbol.DocumentDatabase);
                userType.AddEnumValue("DocumentDismiss", global::FluentIcons.Common.Symbol.DocumentDismiss);
                userType.AddEnumValue("DocumentEdit", global::FluentIcons.Common.Symbol.DocumentEdit);
                userType.AddEnumValue("DocumentEndnote", global::FluentIcons.Common.Symbol.DocumentEndnote);
                userType.AddEnumValue("DocumentError", global::FluentIcons.Common.Symbol.DocumentError);
                userType.AddEnumValue("DocumentFit", global::FluentIcons.Common.Symbol.DocumentFit);
                userType.AddEnumValue("DocumentFlowchart", global::FluentIcons.Common.Symbol.DocumentFlowchart);
                userType.AddEnumValue("DocumentFolder", global::FluentIcons.Common.Symbol.DocumentFolder);
                userType.AddEnumValue("DocumentFooter", global::FluentIcons.Common.Symbol.DocumentFooter);
                userType.AddEnumValue("DocumentFooterDismiss", global::FluentIcons.Common.Symbol.DocumentFooterDismiss);
                userType.AddEnumValue("DocumentGlobe", global::FluentIcons.Common.Symbol.DocumentGlobe);
                userType.AddEnumValue("DocumentHeader", global::FluentIcons.Common.Symbol.DocumentHeader);
                userType.AddEnumValue("DocumentHeaderArrowDown", global::FluentIcons.Common.Symbol.DocumentHeaderArrowDown);
                userType.AddEnumValue("DocumentHeaderDismiss", global::FluentIcons.Common.Symbol.DocumentHeaderDismiss);
                userType.AddEnumValue("DocumentHeaderFooter", global::FluentIcons.Common.Symbol.DocumentHeaderFooter);
                userType.AddEnumValue("DocumentHeart", global::FluentIcons.Common.Symbol.DocumentHeart);
                userType.AddEnumValue("DocumentHeartPulse", global::FluentIcons.Common.Symbol.DocumentHeartPulse);
                userType.AddEnumValue("DocumentImage", global::FluentIcons.Common.Symbol.DocumentImage);
                userType.AddEnumValue("DocumentJava", global::FluentIcons.Common.Symbol.DocumentJava);
                userType.AddEnumValue("DocumentJavascript", global::FluentIcons.Common.Symbol.DocumentJavascript);
                userType.AddEnumValue("DocumentKey", global::FluentIcons.Common.Symbol.DocumentKey);
                userType.AddEnumValue("DocumentLandscape", global::FluentIcons.Common.Symbol.DocumentLandscape);
                userType.AddEnumValue("DocumentLandscapeData", global::FluentIcons.Common.Symbol.DocumentLandscapeData);
                userType.AddEnumValue("DocumentLandscapeSplit", global::FluentIcons.Common.Symbol.DocumentLandscapeSplit);
                userType.AddEnumValue("DocumentLandscapeSplitHint", global::FluentIcons.Common.Symbol.DocumentLandscapeSplitHint);
                userType.AddEnumValue("DocumentLightning", global::FluentIcons.Common.Symbol.DocumentLightning);
                userType.AddEnumValue("DocumentLink", global::FluentIcons.Common.Symbol.DocumentLink);
                userType.AddEnumValue("DocumentLock", global::FluentIcons.Common.Symbol.DocumentLock);
                userType.AddEnumValue("DocumentMargins", global::FluentIcons.Common.Symbol.DocumentMargins);
                userType.AddEnumValue("DocumentMention", global::FluentIcons.Common.Symbol.DocumentMention);
                userType.AddEnumValue("DocumentMultiple", global::FluentIcons.Common.Symbol.DocumentMultiple);
                userType.AddEnumValue("DocumentMultiplePercent", global::FluentIcons.Common.Symbol.DocumentMultiplePercent);
                userType.AddEnumValue("DocumentMultipleProhibited", global::FluentIcons.Common.Symbol.DocumentMultipleProhibited);
                userType.AddEnumValue("DocumentMultipleSync", global::FluentIcons.Common.Symbol.DocumentMultipleSync);
                userType.AddEnumValue("DocumentOnePage", global::FluentIcons.Common.Symbol.DocumentOnePage);
                userType.AddEnumValue("DocumentOnePageAdd", global::FluentIcons.Common.Symbol.DocumentOnePageAdd);
                userType.AddEnumValue("DocumentOnePageColumns", global::FluentIcons.Common.Symbol.DocumentOnePageColumns);
                userType.AddEnumValue("DocumentOnePageLink", global::FluentIcons.Common.Symbol.DocumentOnePageLink);
                userType.AddEnumValue("DocumentOnePageMultiple", global::FluentIcons.Common.Symbol.DocumentOnePageMultiple);
                userType.AddEnumValue("DocumentOnePageMultipleSparkle", global::FluentIcons.Common.Symbol.DocumentOnePageMultipleSparkle);
                userType.AddEnumValue("DocumentOnePageSparkle", global::FluentIcons.Common.Symbol.DocumentOnePageSparkle);
                userType.AddEnumValue("DocumentPageBottomCenter", global::FluentIcons.Common.Symbol.DocumentPageBottomCenter);
                userType.AddEnumValue("DocumentPageBottomLeft", global::FluentIcons.Common.Symbol.DocumentPageBottomLeft);
                userType.AddEnumValue("DocumentPageBottomRight", global::FluentIcons.Common.Symbol.DocumentPageBottomRight);
                userType.AddEnumValue("DocumentPageBreak", global::FluentIcons.Common.Symbol.DocumentPageBreak);
                userType.AddEnumValue("DocumentPageNumber", global::FluentIcons.Common.Symbol.DocumentPageNumber);
                userType.AddEnumValue("DocumentPageTopCenter", global::FluentIcons.Common.Symbol.DocumentPageTopCenter);
                userType.AddEnumValue("DocumentPageTopLeft", global::FluentIcons.Common.Symbol.DocumentPageTopLeft);
                userType.AddEnumValue("DocumentPageTopRight", global::FluentIcons.Common.Symbol.DocumentPageTopRight);
                userType.AddEnumValue("DocumentPdf", global::FluentIcons.Common.Symbol.DocumentPdf);
                userType.AddEnumValue("DocumentPercent", global::FluentIcons.Common.Symbol.DocumentPercent);
                userType.AddEnumValue("DocumentPerson", global::FluentIcons.Common.Symbol.DocumentPerson);
                userType.AddEnumValue("DocumentPill", global::FluentIcons.Common.Symbol.DocumentPill);
                userType.AddEnumValue("DocumentPrint", global::FluentIcons.Common.Symbol.DocumentPrint);
                userType.AddEnumValue("DocumentProhibited", global::FluentIcons.Common.Symbol.DocumentProhibited);
                userType.AddEnumValue("DocumentQuestionMark", global::FluentIcons.Common.Symbol.DocumentQuestionMark);
                userType.AddEnumValue("DocumentQueue", global::FluentIcons.Common.Symbol.DocumentQueue);
                userType.AddEnumValue("DocumentQueueAdd", global::FluentIcons.Common.Symbol.DocumentQueueAdd);
                userType.AddEnumValue("DocumentQueueMultiple", global::FluentIcons.Common.Symbol.DocumentQueueMultiple);
                userType.AddEnumValue("DocumentRibbon", global::FluentIcons.Common.Symbol.DocumentRibbon);
                userType.AddEnumValue("DocumentSass", global::FluentIcons.Common.Symbol.DocumentSass);
                userType.AddEnumValue("DocumentSave", global::FluentIcons.Common.Symbol.DocumentSave);
                userType.AddEnumValue("DocumentSearch", global::FluentIcons.Common.Symbol.DocumentSearch);
                userType.AddEnumValue("DocumentSettings", global::FluentIcons.Common.Symbol.DocumentSettings);
                userType.AddEnumValue("DocumentSignature", global::FluentIcons.Common.Symbol.DocumentSignature);
                userType.AddEnumValue("DocumentSplitHint", global::FluentIcons.Common.Symbol.DocumentSplitHint);
                userType.AddEnumValue("DocumentSplitHintOff", global::FluentIcons.Common.Symbol.DocumentSplitHintOff);
                userType.AddEnumValue("DocumentSync", global::FluentIcons.Common.Symbol.DocumentSync);
                userType.AddEnumValue("DocumentTable", global::FluentIcons.Common.Symbol.DocumentTable);
                userType.AddEnumValue("DocumentTableArrowRight", global::FluentIcons.Common.Symbol.DocumentTableArrowRight);
                userType.AddEnumValue("DocumentTableCheckmark", global::FluentIcons.Common.Symbol.DocumentTableCheckmark);
                userType.AddEnumValue("DocumentTableCube", global::FluentIcons.Common.Symbol.DocumentTableCube);
                userType.AddEnumValue("DocumentTableSearch", global::FluentIcons.Common.Symbol.DocumentTableSearch);
                userType.AddEnumValue("DocumentTableTruck", global::FluentIcons.Common.Symbol.DocumentTableTruck);
                userType.AddEnumValue("DocumentTarget", global::FluentIcons.Common.Symbol.DocumentTarget);
                userType.AddEnumValue("DocumentText", global::FluentIcons.Common.Symbol.DocumentText);
                userType.AddEnumValue("DocumentTextClock", global::FluentIcons.Common.Symbol.DocumentTextClock);
                userType.AddEnumValue("DocumentTextExtract", global::FluentIcons.Common.Symbol.DocumentTextExtract);
                userType.AddEnumValue("DocumentTextLink", global::FluentIcons.Common.Symbol.DocumentTextLink);
                userType.AddEnumValue("DocumentTextToolbox", global::FluentIcons.Common.Symbol.DocumentTextToolbox);
                userType.AddEnumValue("DocumentToolbox", global::FluentIcons.Common.Symbol.DocumentToolbox);
                userType.AddEnumValue("DocumentWidth", global::FluentIcons.Common.Symbol.DocumentWidth);
                userType.AddEnumValue("DocumentYml", global::FluentIcons.Common.Symbol.DocumentYml);
                userType.AddEnumValue("Door", global::FluentIcons.Common.Symbol.Door);
                userType.AddEnumValue("DoorArrowLeft", global::FluentIcons.Common.Symbol.DoorArrowLeft);
                userType.AddEnumValue("DoorArrowRight", global::FluentIcons.Common.Symbol.DoorArrowRight);
                userType.AddEnumValue("DoorTag", global::FluentIcons.Common.Symbol.DoorTag);
                userType.AddEnumValue("DoubleSwipeDown", global::FluentIcons.Common.Symbol.DoubleSwipeDown);
                userType.AddEnumValue("DoubleSwipeUp", global::FluentIcons.Common.Symbol.DoubleSwipeUp);
                userType.AddEnumValue("DoubleTapSwipeDown", global::FluentIcons.Common.Symbol.DoubleTapSwipeDown);
                userType.AddEnumValue("DoubleTapSwipeUp", global::FluentIcons.Common.Symbol.DoubleTapSwipeUp);
                userType.AddEnumValue("Drafts", global::FluentIcons.Common.Symbol.Drafts);
                userType.AddEnumValue("Drag", global::FluentIcons.Common.Symbol.Drag);
                userType.AddEnumValue("DrawImage", global::FluentIcons.Common.Symbol.DrawImage);
                userType.AddEnumValue("DrawShape", global::FluentIcons.Common.Symbol.DrawShape);
                userType.AddEnumValue("DrawText", global::FluentIcons.Common.Symbol.DrawText);
                userType.AddEnumValue("Drawer", global::FluentIcons.Common.Symbol.Drawer);
                userType.AddEnumValue("DrawerAdd", global::FluentIcons.Common.Symbol.DrawerAdd);
                userType.AddEnumValue("DrawerArrowDownload", global::FluentIcons.Common.Symbol.DrawerArrowDownload);
                userType.AddEnumValue("DrawerDismiss", global::FluentIcons.Common.Symbol.DrawerDismiss);
                userType.AddEnumValue("DrawerPlay", global::FluentIcons.Common.Symbol.DrawerPlay);
                userType.AddEnumValue("DrawerSubtract", global::FluentIcons.Common.Symbol.DrawerSubtract);
                userType.AddEnumValue("DrinkBeer", global::FluentIcons.Common.Symbol.DrinkBeer);
                userType.AddEnumValue("DrinkBottle", global::FluentIcons.Common.Symbol.DrinkBottle);
                userType.AddEnumValue("DrinkBottleOff", global::FluentIcons.Common.Symbol.DrinkBottleOff);
                userType.AddEnumValue("DrinkCoffee", global::FluentIcons.Common.Symbol.DrinkCoffee);
                userType.AddEnumValue("DrinkMargarita", global::FluentIcons.Common.Symbol.DrinkMargarita);
                userType.AddEnumValue("DrinkToGo", global::FluentIcons.Common.Symbol.DrinkToGo);
                userType.AddEnumValue("DrinkWine", global::FluentIcons.Common.Symbol.DrinkWine);
                userType.AddEnumValue("DriveTrain", global::FluentIcons.Common.Symbol.DriveTrain);
                userType.AddEnumValue("Drop", global::FluentIcons.Common.Symbol.Drop);
                userType.AddEnumValue("DualScreen", global::FluentIcons.Common.Symbol.DualScreen);
                userType.AddEnumValue("DualScreenAdd", global::FluentIcons.Common.Symbol.DualScreenAdd);
                userType.AddEnumValue("DualScreenArrowRight", global::FluentIcons.Common.Symbol.DualScreenArrowRight);
                userType.AddEnumValue("DualScreenArrowUp", global::FluentIcons.Common.Symbol.DualScreenArrowUp);
                userType.AddEnumValue("DualScreenClock", global::FluentIcons.Common.Symbol.DualScreenClock);
                userType.AddEnumValue("DualScreenClosedAlert", global::FluentIcons.Common.Symbol.DualScreenClosedAlert);
                userType.AddEnumValue("DualScreenDesktop", global::FluentIcons.Common.Symbol.DualScreenDesktop);
                userType.AddEnumValue("DualScreenDismiss", global::FluentIcons.Common.Symbol.DualScreenDismiss);
                userType.AddEnumValue("DualScreenGroup", global::FluentIcons.Common.Symbol.DualScreenGroup);
                userType.AddEnumValue("DualScreenHeader", global::FluentIcons.Common.Symbol.DualScreenHeader);
                userType.AddEnumValue("DualScreenLock", global::FluentIcons.Common.Symbol.DualScreenLock);
                userType.AddEnumValue("DualScreenMirror", global::FluentIcons.Common.Symbol.DualScreenMirror);
                userType.AddEnumValue("DualScreenPagination", global::FluentIcons.Common.Symbol.DualScreenPagination);
                userType.AddEnumValue("DualScreenSettings", global::FluentIcons.Common.Symbol.DualScreenSettings);
                userType.AddEnumValue("DualScreenSpan", global::FluentIcons.Common.Symbol.DualScreenSpan);
                userType.AddEnumValue("DualScreenSpeaker", global::FluentIcons.Common.Symbol.DualScreenSpeaker);
                userType.AddEnumValue("DualScreenStatusBar", global::FluentIcons.Common.Symbol.DualScreenStatusBar);
                userType.AddEnumValue("DualScreenTablet", global::FluentIcons.Common.Symbol.DualScreenTablet);
                userType.AddEnumValue("DualScreenUpdate", global::FluentIcons.Common.Symbol.DualScreenUpdate);
                userType.AddEnumValue("DualScreenVerticalScroll", global::FluentIcons.Common.Symbol.DualScreenVerticalScroll);
                userType.AddEnumValue("DualScreenVibrate", global::FluentIcons.Common.Symbol.DualScreenVibrate);
                userType.AddEnumValue("Dumbbell", global::FluentIcons.Common.Symbol.Dumbbell);
                userType.AddEnumValue("Dust", global::FluentIcons.Common.Symbol.Dust);
                userType.AddEnumValue("Earth", global::FluentIcons.Common.Symbol.Earth);
                userType.AddEnumValue("EarthLeaf", global::FluentIcons.Common.Symbol.EarthLeaf);
                userType.AddEnumValue("Edit", global::FluentIcons.Common.Symbol.Edit);
                userType.AddEnumValue("EditArrowBack", global::FluentIcons.Common.Symbol.EditArrowBack);
                userType.AddEnumValue("EditLineHorizontal3", global::FluentIcons.Common.Symbol.EditLineHorizontal3);
                userType.AddEnumValue("EditLock", global::FluentIcons.Common.Symbol.EditLock);
                userType.AddEnumValue("EditOff", global::FluentIcons.Common.Symbol.EditOff);
                userType.AddEnumValue("EditPerson", global::FluentIcons.Common.Symbol.EditPerson);
                userType.AddEnumValue("EditProhibited", global::FluentIcons.Common.Symbol.EditProhibited);
                userType.AddEnumValue("EditSettings", global::FluentIcons.Common.Symbol.EditSettings);
                userType.AddEnumValue("Elevator", global::FluentIcons.Common.Symbol.Elevator);
                userType.AddEnumValue("Emoji", global::FluentIcons.Common.Symbol.Emoji);
                userType.AddEnumValue("EmojiAdd", global::FluentIcons.Common.Symbol.EmojiAdd);
                userType.AddEnumValue("EmojiAngry", global::FluentIcons.Common.Symbol.EmojiAngry);
                userType.AddEnumValue("EmojiEdit", global::FluentIcons.Common.Symbol.EmojiEdit);
                userType.AddEnumValue("EmojiHand", global::FluentIcons.Common.Symbol.EmojiHand);
                userType.AddEnumValue("EmojiHint", global::FluentIcons.Common.Symbol.EmojiHint);
                userType.AddEnumValue("EmojiLaugh", global::FluentIcons.Common.Symbol.EmojiLaugh);
                userType.AddEnumValue("EmojiMeh", global::FluentIcons.Common.Symbol.EmojiMeh);
                userType.AddEnumValue("EmojiMeme", global::FluentIcons.Common.Symbol.EmojiMeme);
                userType.AddEnumValue("EmojiMultiple", global::FluentIcons.Common.Symbol.EmojiMultiple);
                userType.AddEnumValue("EmojiSad", global::FluentIcons.Common.Symbol.EmojiSad);
                userType.AddEnumValue("EmojiSadSlight", global::FluentIcons.Common.Symbol.EmojiSadSlight);
                userType.AddEnumValue("EmojiSmileSlight", global::FluentIcons.Common.Symbol.EmojiSmileSlight);
                userType.AddEnumValue("EmojiSparkle", global::FluentIcons.Common.Symbol.EmojiSparkle);
                userType.AddEnumValue("EmojiSurprise", global::FluentIcons.Common.Symbol.EmojiSurprise);
                userType.AddEnumValue("Engine", global::FluentIcons.Common.Symbol.Engine);
                userType.AddEnumValue("EqualCircle", global::FluentIcons.Common.Symbol.EqualCircle);
                userType.AddEnumValue("EqualOff", global::FluentIcons.Common.Symbol.EqualOff);
                userType.AddEnumValue("Eraser", global::FluentIcons.Common.Symbol.Eraser);
                userType.AddEnumValue("EraserMedium", global::FluentIcons.Common.Symbol.EraserMedium);
                userType.AddEnumValue("EraserSegment", global::FluentIcons.Common.Symbol.EraserSegment);
                userType.AddEnumValue("EraserSmall", global::FluentIcons.Common.Symbol.EraserSmall);
                userType.AddEnumValue("EraserTool", global::FluentIcons.Common.Symbol.EraserTool);
                userType.AddEnumValue("ErrorCircle", global::FluentIcons.Common.Symbol.ErrorCircle);
                userType.AddEnumValue("ErrorCircleSettings", global::FluentIcons.Common.Symbol.ErrorCircleSettings);
                userType.AddEnumValue("ExpandUpLeft", global::FluentIcons.Common.Symbol.ExpandUpLeft);
                userType.AddEnumValue("ExpandUpRight", global::FluentIcons.Common.Symbol.ExpandUpRight);
                userType.AddEnumValue("ExtendedDock", global::FluentIcons.Common.Symbol.ExtendedDock);
                userType.AddEnumValue("Eye", global::FluentIcons.Common.Symbol.Eye);
                userType.AddEnumValue("EyeLines", global::FluentIcons.Common.Symbol.EyeLines);
                userType.AddEnumValue("EyeOff", global::FluentIcons.Common.Symbol.EyeOff);
                userType.AddEnumValue("EyeTracking", global::FluentIcons.Common.Symbol.EyeTracking);
                userType.AddEnumValue("EyeTrackingOff", global::FluentIcons.Common.Symbol.EyeTrackingOff);
                userType.AddEnumValue("Eyedropper", global::FluentIcons.Common.Symbol.Eyedropper);
                userType.AddEnumValue("EyedropperOff", global::FluentIcons.Common.Symbol.EyedropperOff);
                userType.AddEnumValue("FStop", global::FluentIcons.Common.Symbol.FStop);
                userType.AddEnumValue("FastAcceleration", global::FluentIcons.Common.Symbol.FastAcceleration);
                userType.AddEnumValue("FastForward", global::FluentIcons.Common.Symbol.FastForward);
                userType.AddEnumValue("Fax", global::FluentIcons.Common.Symbol.Fax);
                userType.AddEnumValue("Feed", global::FluentIcons.Common.Symbol.Feed);
                userType.AddEnumValue("Filmstrip", global::FluentIcons.Common.Symbol.Filmstrip);
                userType.AddEnumValue("FilmstripImage", global::FluentIcons.Common.Symbol.FilmstripImage);
                userType.AddEnumValue("FilmstripPlay", global::FluentIcons.Common.Symbol.FilmstripPlay);
                userType.AddEnumValue("FilmstripSplit", global::FluentIcons.Common.Symbol.FilmstripSplit);
                userType.AddEnumValue("Filter", global::FluentIcons.Common.Symbol.Filter);
                userType.AddEnumValue("FilterAdd", global::FluentIcons.Common.Symbol.FilterAdd);
                userType.AddEnumValue("FilterDismiss", global::FluentIcons.Common.Symbol.FilterDismiss);
                userType.AddEnumValue("FilterSync", global::FluentIcons.Common.Symbol.FilterSync);
                userType.AddEnumValue("Fingerprint", global::FluentIcons.Common.Symbol.Fingerprint);
                userType.AddEnumValue("Fire", global::FluentIcons.Common.Symbol.Fire);
                userType.AddEnumValue("Fireplace", global::FluentIcons.Common.Symbol.Fireplace);
                userType.AddEnumValue("FixedWidth", global::FluentIcons.Common.Symbol.FixedWidth);
                userType.AddEnumValue("Flag", global::FluentIcons.Common.Symbol.Flag);
                userType.AddEnumValue("FlagCheckered", global::FluentIcons.Common.Symbol.FlagCheckered);
                userType.AddEnumValue("FlagClock", global::FluentIcons.Common.Symbol.FlagClock);
                userType.AddEnumValue("FlagOff", global::FluentIcons.Common.Symbol.FlagOff);
                userType.AddEnumValue("FlagPride", global::FluentIcons.Common.Symbol.FlagPride);
                userType.AddEnumValue("FlagPrideIntersexInclusiveProgress", global::FluentIcons.Common.Symbol.FlagPrideIntersexInclusiveProgress);
                userType.AddEnumValue("FlagPridePhiladelphia", global::FluentIcons.Common.Symbol.FlagPridePhiladelphia);
                userType.AddEnumValue("FlagPrideProgress", global::FluentIcons.Common.Symbol.FlagPrideProgress);
                userType.AddEnumValue("Flash", global::FluentIcons.Common.Symbol.Flash);
                userType.AddEnumValue("FlashAdd", global::FluentIcons.Common.Symbol.FlashAdd);
                userType.AddEnumValue("FlashAuto", global::FluentIcons.Common.Symbol.FlashAuto);
                userType.AddEnumValue("FlashCheckmark", global::FluentIcons.Common.Symbol.FlashCheckmark);
                userType.AddEnumValue("FlashFlow", global::FluentIcons.Common.Symbol.FlashFlow);
                userType.AddEnumValue("FlashOff", global::FluentIcons.Common.Symbol.FlashOff);
                userType.AddEnumValue("FlashPlay", global::FluentIcons.Common.Symbol.FlashPlay);
                userType.AddEnumValue("FlashSettings", global::FluentIcons.Common.Symbol.FlashSettings);
                userType.AddEnumValue("FlashSparkle", global::FluentIcons.Common.Symbol.FlashSparkle);
                userType.AddEnumValue("Flashlight", global::FluentIcons.Common.Symbol.Flashlight);
                userType.AddEnumValue("FlashlightOff", global::FluentIcons.Common.Symbol.FlashlightOff);
                userType.AddEnumValue("FlipHorizontal", global::FluentIcons.Common.Symbol.FlipHorizontal);
                userType.AddEnumValue("FlipVertical", global::FluentIcons.Common.Symbol.FlipVertical);
                userType.AddEnumValue("Flow", global::FluentIcons.Common.Symbol.Flow);
                userType.AddEnumValue("Flowchart", global::FluentIcons.Common.Symbol.Flowchart);
                userType.AddEnumValue("FlowchartCircle", global::FluentIcons.Common.Symbol.FlowchartCircle);
                userType.AddEnumValue("Fluent", global::FluentIcons.Common.Symbol.Fluent);
                userType.AddEnumValue("Fluid", global::FluentIcons.Common.Symbol.Fluid);
                userType.AddEnumValue("Folder", global::FluentIcons.Common.Symbol.Folder);
                userType.AddEnumValue("FolderAdd", global::FluentIcons.Common.Symbol.FolderAdd);
                userType.AddEnumValue("FolderArrowLeft", global::FluentIcons.Common.Symbol.FolderArrowLeft);
                userType.AddEnumValue("FolderArrowRight", global::FluentIcons.Common.Symbol.FolderArrowRight);
                userType.AddEnumValue("FolderArrowUp", global::FluentIcons.Common.Symbol.FolderArrowUp);
                userType.AddEnumValue("FolderBriefcase", global::FluentIcons.Common.Symbol.FolderBriefcase);
                userType.AddEnumValue("FolderDocument", global::FluentIcons.Common.Symbol.FolderDocument);
                userType.AddEnumValue("FolderGlobe", global::FluentIcons.Common.Symbol.FolderGlobe);
                userType.AddEnumValue("FolderLightning", global::FluentIcons.Common.Symbol.FolderLightning);
                userType.AddEnumValue("FolderLink", global::FluentIcons.Common.Symbol.FolderLink);
                userType.AddEnumValue("FolderList", global::FluentIcons.Common.Symbol.FolderList);
                userType.AddEnumValue("FolderMail", global::FluentIcons.Common.Symbol.FolderMail);
                userType.AddEnumValue("FolderOpen", global::FluentIcons.Common.Symbol.FolderOpen);
                userType.AddEnumValue("FolderOpenDown", global::FluentIcons.Common.Symbol.FolderOpenDown);
                userType.AddEnumValue("FolderOpenVertical", global::FluentIcons.Common.Symbol.FolderOpenVertical);
                userType.AddEnumValue("FolderPeople", global::FluentIcons.Common.Symbol.FolderPeople);
                userType.AddEnumValue("FolderPerson", global::FluentIcons.Common.Symbol.FolderPerson);
                userType.AddEnumValue("FolderProhibited", global::FluentIcons.Common.Symbol.FolderProhibited);
                userType.AddEnumValue("FolderSearch", global::FluentIcons.Common.Symbol.FolderSearch);
                userType.AddEnumValue("FolderSwap", global::FluentIcons.Common.Symbol.FolderSwap);
                userType.AddEnumValue("FolderSync", global::FluentIcons.Common.Symbol.FolderSync);
                userType.AddEnumValue("FolderZip", global::FluentIcons.Common.Symbol.FolderZip);
                userType.AddEnumValue("FontDecrease", global::FluentIcons.Common.Symbol.FontDecrease);
                userType.AddEnumValue("FontIncrease", global::FluentIcons.Common.Symbol.FontIncrease);
                userType.AddEnumValue("FontSpaceTrackingIn", global::FluentIcons.Common.Symbol.FontSpaceTrackingIn);
                userType.AddEnumValue("FontSpaceTrackingOut", global::FluentIcons.Common.Symbol.FontSpaceTrackingOut);
                userType.AddEnumValue("Food", global::FluentIcons.Common.Symbol.Food);
                userType.AddEnumValue("FoodApple", global::FluentIcons.Common.Symbol.FoodApple);
                userType.AddEnumValue("FoodCake", global::FluentIcons.Common.Symbol.FoodCake);
                userType.AddEnumValue("FoodCarrot", global::FluentIcons.Common.Symbol.FoodCarrot);
                userType.AddEnumValue("FoodChickenLeg", global::FluentIcons.Common.Symbol.FoodChickenLeg);
                userType.AddEnumValue("FoodEgg", global::FluentIcons.Common.Symbol.FoodEgg);
                userType.AddEnumValue("FoodFish", global::FluentIcons.Common.Symbol.FoodFish);
                userType.AddEnumValue("FoodGrains", global::FluentIcons.Common.Symbol.FoodGrains);
                userType.AddEnumValue("FoodPizza", global::FluentIcons.Common.Symbol.FoodPizza);
                userType.AddEnumValue("FoodToast", global::FluentIcons.Common.Symbol.FoodToast);
                userType.AddEnumValue("Form", global::FluentIcons.Common.Symbol.Form);
                userType.AddEnumValue("FormMultiple", global::FluentIcons.Common.Symbol.FormMultiple);
                userType.AddEnumValue("FormNew", global::FluentIcons.Common.Symbol.FormNew);
                userType.AddEnumValue("FormSparkle", global::FluentIcons.Common.Symbol.FormSparkle);
                userType.AddEnumValue("Fps120", global::FluentIcons.Common.Symbol.Fps120);
                userType.AddEnumValue("Fps240", global::FluentIcons.Common.Symbol.Fps240);
                userType.AddEnumValue("Fps30", global::FluentIcons.Common.Symbol.Fps30);
                userType.AddEnumValue("Fps60", global::FluentIcons.Common.Symbol.Fps60);
                userType.AddEnumValue("Fps960", global::FluentIcons.Common.Symbol.Fps960);
                userType.AddEnumValue("Frame", global::FluentIcons.Common.Symbol.Frame);
                userType.AddEnumValue("FullScreenMaximize", global::FluentIcons.Common.Symbol.FullScreenMaximize);
                userType.AddEnumValue("FullScreenMinimize", global::FluentIcons.Common.Symbol.FullScreenMinimize);
                userType.AddEnumValue("GameChat", global::FluentIcons.Common.Symbol.GameChat);
                userType.AddEnumValue("Games", global::FluentIcons.Common.Symbol.Games);
                userType.AddEnumValue("GanttChart", global::FluentIcons.Common.Symbol.GanttChart);
                userType.AddEnumValue("Gas", global::FluentIcons.Common.Symbol.Gas);
                userType.AddEnumValue("GasPump", global::FluentIcons.Common.Symbol.GasPump);
                userType.AddEnumValue("Gather", global::FluentIcons.Common.Symbol.Gather);
                userType.AddEnumValue("Gauge", global::FluentIcons.Common.Symbol.Gauge);
                userType.AddEnumValue("GaugeAdd", global::FluentIcons.Common.Symbol.GaugeAdd);
                userType.AddEnumValue("Gavel", global::FluentIcons.Common.Symbol.Gavel);
                userType.AddEnumValue("GavelProhibited", global::FluentIcons.Common.Symbol.GavelProhibited);
                userType.AddEnumValue("Gesture", global::FluentIcons.Common.Symbol.Gesture);
                userType.AddEnumValue("Gif", global::FluentIcons.Common.Symbol.Gif);
                userType.AddEnumValue("Gift", global::FluentIcons.Common.Symbol.Gift);
                userType.AddEnumValue("GiftCard", global::FluentIcons.Common.Symbol.GiftCard);
                userType.AddEnumValue("GiftCardAdd", global::FluentIcons.Common.Symbol.GiftCardAdd);
                userType.AddEnumValue("GiftCardArrowRight", global::FluentIcons.Common.Symbol.GiftCardArrowRight);
                userType.AddEnumValue("GiftCardMoney", global::FluentIcons.Common.Symbol.GiftCardMoney);
                userType.AddEnumValue("GiftCardMultiple", global::FluentIcons.Common.Symbol.GiftCardMultiple);
                userType.AddEnumValue("GiftOpen", global::FluentIcons.Common.Symbol.GiftOpen);
                userType.AddEnumValue("Glance", global::FluentIcons.Common.Symbol.Glance);
                userType.AddEnumValue("GlanceHorizontal", global::FluentIcons.Common.Symbol.GlanceHorizontal);
                userType.AddEnumValue("GlanceHorizontalSparkles", global::FluentIcons.Common.Symbol.GlanceHorizontalSparkles);
                userType.AddEnumValue("Glasses", global::FluentIcons.Common.Symbol.Glasses);
                userType.AddEnumValue("GlassesOff", global::FluentIcons.Common.Symbol.GlassesOff);
                userType.AddEnumValue("Globe", global::FluentIcons.Common.Symbol.Globe);
                userType.AddEnumValue("GlobeAdd", global::FluentIcons.Common.Symbol.GlobeAdd);
                userType.AddEnumValue("GlobeArrowForward", global::FluentIcons.Common.Symbol.GlobeArrowForward);
                userType.AddEnumValue("GlobeArrowUp", global::FluentIcons.Common.Symbol.GlobeArrowUp);
                userType.AddEnumValue("GlobeClock", global::FluentIcons.Common.Symbol.GlobeClock);
                userType.AddEnumValue("GlobeDesktop", global::FluentIcons.Common.Symbol.GlobeDesktop);
                userType.AddEnumValue("GlobeError", global::FluentIcons.Common.Symbol.GlobeError);
                userType.AddEnumValue("GlobeLocation", global::FluentIcons.Common.Symbol.GlobeLocation);
                userType.AddEnumValue("GlobeOff", global::FluentIcons.Common.Symbol.GlobeOff);
                userType.AddEnumValue("GlobePerson", global::FluentIcons.Common.Symbol.GlobePerson);
                userType.AddEnumValue("GlobeProhibited", global::FluentIcons.Common.Symbol.GlobeProhibited);
                userType.AddEnumValue("GlobeSearch", global::FluentIcons.Common.Symbol.GlobeSearch);
                userType.AddEnumValue("GlobeShield", global::FluentIcons.Common.Symbol.GlobeShield);
                userType.AddEnumValue("GlobeStar", global::FluentIcons.Common.Symbol.GlobeStar);
                userType.AddEnumValue("GlobeSurface", global::FluentIcons.Common.Symbol.GlobeSurface);
                userType.AddEnumValue("GlobeSync", global::FluentIcons.Common.Symbol.GlobeSync);
                userType.AddEnumValue("GlobeVideo", global::FluentIcons.Common.Symbol.GlobeVideo);
                userType.AddEnumValue("GlobeWarning", global::FluentIcons.Common.Symbol.GlobeWarning);
                userType.AddEnumValue("Grid", global::FluentIcons.Common.Symbol.Grid);
                userType.AddEnumValue("GridDots", global::FluentIcons.Common.Symbol.GridDots);
                userType.AddEnumValue("GridKanban", global::FluentIcons.Common.Symbol.GridKanban);
                userType.AddEnumValue("Group", global::FluentIcons.Common.Symbol.Group);
                userType.AddEnumValue("GroupDismiss", global::FluentIcons.Common.Symbol.GroupDismiss);
                userType.AddEnumValue("GroupList", global::FluentIcons.Common.Symbol.GroupList);
                userType.AddEnumValue("GroupReturn", global::FluentIcons.Common.Symbol.GroupReturn);
                userType.AddEnumValue("Guardian", global::FluentIcons.Common.Symbol.Guardian);
                userType.AddEnumValue("Guest", global::FluentIcons.Common.Symbol.Guest);
                userType.AddEnumValue("GuestAdd", global::FluentIcons.Common.Symbol.GuestAdd);
                userType.AddEnumValue("Guitar", global::FluentIcons.Common.Symbol.Guitar);
                userType.AddEnumValue("HandDraw", global::FluentIcons.Common.Symbol.HandDraw);
                userType.AddEnumValue("HandLeft", global::FluentIcons.Common.Symbol.HandLeft);
                userType.AddEnumValue("HandLeftChat", global::FluentIcons.Common.Symbol.HandLeftChat);
                userType.AddEnumValue("HandOpenHeart", global::FluentIcons.Common.Symbol.HandOpenHeart);
                userType.AddEnumValue("HandPoint", global::FluentIcons.Common.Symbol.HandPoint);
                userType.AddEnumValue("HandRight", global::FluentIcons.Common.Symbol.HandRight);
                userType.AddEnumValue("HandRightOff", global::FluentIcons.Common.Symbol.HandRightOff);
                userType.AddEnumValue("HandWave", global::FluentIcons.Common.Symbol.HandWave);
                userType.AddEnumValue("Handshake", global::FluentIcons.Common.Symbol.Handshake);
                userType.AddEnumValue("HapticStrong", global::FluentIcons.Common.Symbol.HapticStrong);
                userType.AddEnumValue("HapticWeak", global::FluentIcons.Common.Symbol.HapticWeak);
                userType.AddEnumValue("HardDrive", global::FluentIcons.Common.Symbol.HardDrive);
                userType.AddEnumValue("HatGraduation", global::FluentIcons.Common.Symbol.HatGraduation);
                userType.AddEnumValue("HatGraduationAdd", global::FluentIcons.Common.Symbol.HatGraduationAdd);
                userType.AddEnumValue("HatGraduationSparkle", global::FluentIcons.Common.Symbol.HatGraduationSparkle);
                userType.AddEnumValue("Hd", global::FluentIcons.Common.Symbol.Hd);
                userType.AddEnumValue("HdOff", global::FluentIcons.Common.Symbol.HdOff);
                userType.AddEnumValue("Hdr", global::FluentIcons.Common.Symbol.Hdr);
                userType.AddEnumValue("HdrOff", global::FluentIcons.Common.Symbol.HdrOff);
                userType.AddEnumValue("Headphones", global::FluentIcons.Common.Symbol.Headphones);
                userType.AddEnumValue("HeadphonesSoundWave", global::FluentIcons.Common.Symbol.HeadphonesSoundWave);
                userType.AddEnumValue("Headset", global::FluentIcons.Common.Symbol.Headset);
                userType.AddEnumValue("HeadsetAdd", global::FluentIcons.Common.Symbol.HeadsetAdd);
                userType.AddEnumValue("HeadsetVr", global::FluentIcons.Common.Symbol.HeadsetVr);
                userType.AddEnumValue("Heart", global::FluentIcons.Common.Symbol.Heart);
                userType.AddEnumValue("HeartBroken", global::FluentIcons.Common.Symbol.HeartBroken);
                userType.AddEnumValue("HeartCircle", global::FluentIcons.Common.Symbol.HeartCircle);
                userType.AddEnumValue("HeartCircleHint", global::FluentIcons.Common.Symbol.HeartCircleHint);
                userType.AddEnumValue("HeartOff", global::FluentIcons.Common.Symbol.HeartOff);
                userType.AddEnumValue("HeartPulse", global::FluentIcons.Common.Symbol.HeartPulse);
                userType.AddEnumValue("HeartPulseCheckmark", global::FluentIcons.Common.Symbol.HeartPulseCheckmark);
                userType.AddEnumValue("HeartPulseError", global::FluentIcons.Common.Symbol.HeartPulseError);
                userType.AddEnumValue("HeartPulseWarning", global::FluentIcons.Common.Symbol.HeartPulseWarning);
                userType.AddEnumValue("Hexagon", global::FluentIcons.Common.Symbol.Hexagon);
                userType.AddEnumValue("HexagonSparkle", global::FluentIcons.Common.Symbol.HexagonSparkle);
                userType.AddEnumValue("HexagonThree", global::FluentIcons.Common.Symbol.HexagonThree);
                userType.AddEnumValue("Highlight", global::FluentIcons.Common.Symbol.Highlight);
                userType.AddEnumValue("HighlightAccent", global::FluentIcons.Common.Symbol.HighlightAccent);
                userType.AddEnumValue("HighlightLink", global::FluentIcons.Common.Symbol.HighlightLink);
                userType.AddEnumValue("Highway", global::FluentIcons.Common.Symbol.Highway);
                userType.AddEnumValue("History", global::FluentIcons.Common.Symbol.History);
                userType.AddEnumValue("HistoryDismiss", global::FluentIcons.Common.Symbol.HistoryDismiss);
                userType.AddEnumValue("Home", global::FluentIcons.Common.Symbol.Home);
                userType.AddEnumValue("HomeAdd", global::FluentIcons.Common.Symbol.HomeAdd);
                userType.AddEnumValue("HomeCheckmark", global::FluentIcons.Common.Symbol.HomeCheckmark);
                userType.AddEnumValue("HomeDatabase", global::FluentIcons.Common.Symbol.HomeDatabase);
                userType.AddEnumValue("HomeGarage", global::FluentIcons.Common.Symbol.HomeGarage);
                userType.AddEnumValue("HomeHeart", global::FluentIcons.Common.Symbol.HomeHeart);
                userType.AddEnumValue("HomeMore", global::FluentIcons.Common.Symbol.HomeMore);
                userType.AddEnumValue("HomePerson", global::FluentIcons.Common.Symbol.HomePerson);
                userType.AddEnumValue("HomeSplit", global::FluentIcons.Common.Symbol.HomeSplit);
                userType.AddEnumValue("Hourglass", global::FluentIcons.Common.Symbol.Hourglass);
                userType.AddEnumValue("HourglassHalf", global::FluentIcons.Common.Symbol.HourglassHalf);
                userType.AddEnumValue("HourglassOneQuarter", global::FluentIcons.Common.Symbol.HourglassOneQuarter);
                userType.AddEnumValue("HourglassThreeQuarter", global::FluentIcons.Common.Symbol.HourglassThreeQuarter);
                userType.AddEnumValue("Icons", global::FluentIcons.Common.Symbol.Icons);
                userType.AddEnumValue("Image", global::FluentIcons.Common.Symbol.Image);
                userType.AddEnumValue("ImageAdd", global::FluentIcons.Common.Symbol.ImageAdd);
                userType.AddEnumValue("ImageAltText", global::FluentIcons.Common.Symbol.ImageAltText);
                userType.AddEnumValue("ImageArrowBack", global::FluentIcons.Common.Symbol.ImageArrowBack);
                userType.AddEnumValue("ImageArrowCounterclockwise", global::FluentIcons.Common.Symbol.ImageArrowCounterclockwise);
                userType.AddEnumValue("ImageArrowForward", global::FluentIcons.Common.Symbol.ImageArrowForward);
                userType.AddEnumValue("ImageBorder", global::FluentIcons.Common.Symbol.ImageBorder);
                userType.AddEnumValue("ImageCircle", global::FluentIcons.Common.Symbol.ImageCircle);
                userType.AddEnumValue("ImageCopy", global::FluentIcons.Common.Symbol.ImageCopy);
                userType.AddEnumValue("ImageEdit", global::FluentIcons.Common.Symbol.ImageEdit);
                userType.AddEnumValue("ImageGlobe", global::FluentIcons.Common.Symbol.ImageGlobe);
                userType.AddEnumValue("ImageMultiple", global::FluentIcons.Common.Symbol.ImageMultiple);
                userType.AddEnumValue("ImageMultipleOff", global::FluentIcons.Common.Symbol.ImageMultipleOff);
                userType.AddEnumValue("ImageOff", global::FluentIcons.Common.Symbol.ImageOff);
                userType.AddEnumValue("ImageProhibited", global::FluentIcons.Common.Symbol.ImageProhibited);
                userType.AddEnumValue("ImageReflection", global::FluentIcons.Common.Symbol.ImageReflection);
                userType.AddEnumValue("ImageSearch", global::FluentIcons.Common.Symbol.ImageSearch);
                userType.AddEnumValue("ImageShadow", global::FluentIcons.Common.Symbol.ImageShadow);
                userType.AddEnumValue("ImageSparkle", global::FluentIcons.Common.Symbol.ImageSparkle);
                userType.AddEnumValue("ImageSplit", global::FluentIcons.Common.Symbol.ImageSplit);
                userType.AddEnumValue("ImageStack", global::FluentIcons.Common.Symbol.ImageStack);
                userType.AddEnumValue("ImageTable", global::FluentIcons.Common.Symbol.ImageTable);
                userType.AddEnumValue("ImmersiveReader", global::FluentIcons.Common.Symbol.ImmersiveReader);
                userType.AddEnumValue("Important", global::FluentIcons.Common.Symbol.Important);
                userType.AddEnumValue("Incognito", global::FluentIcons.Common.Symbol.Incognito);
                userType.AddEnumValue("Info", global::FluentIcons.Common.Symbol.Info);
                userType.AddEnumValue("InfoShield", global::FluentIcons.Common.Symbol.InfoShield);
                userType.AddEnumValue("InkStroke", global::FluentIcons.Common.Symbol.InkStroke);
                userType.AddEnumValue("InkStrokeArrowDown", global::FluentIcons.Common.Symbol.InkStrokeArrowDown);
                userType.AddEnumValue("InkStrokeArrowUpDown", global::FluentIcons.Common.Symbol.InkStrokeArrowUpDown);
                userType.AddEnumValue("InkingTool", global::FluentIcons.Common.Symbol.InkingTool);
                userType.AddEnumValue("InkingToolAccent", global::FluentIcons.Common.Symbol.InkingToolAccent);
                userType.AddEnumValue("InprivateAccount", global::FluentIcons.Common.Symbol.InprivateAccount);
                userType.AddEnumValue("Insert", global::FluentIcons.Common.Symbol.Insert);
                userType.AddEnumValue("IosChevronRight", global::FluentIcons.Common.Symbol.IosChevronRight);
                userType.AddEnumValue("Iot", global::FluentIcons.Common.Symbol.Iot);
                userType.AddEnumValue("IotAlert", global::FluentIcons.Common.Symbol.IotAlert);
                userType.AddEnumValue("Javascript", global::FluentIcons.Common.Symbol.Javascript);
                userType.AddEnumValue("Joystick", global::FluentIcons.Common.Symbol.Joystick);
                userType.AddEnumValue("Key", global::FluentIcons.Common.Symbol.Key);
                userType.AddEnumValue("KeyCommand", global::FluentIcons.Common.Symbol.KeyCommand);
                userType.AddEnumValue("KeyMultiple", global::FluentIcons.Common.Symbol.KeyMultiple);
                userType.AddEnumValue("KeyReset", global::FluentIcons.Common.Symbol.KeyReset);
                userType.AddEnumValue("Keyboard", global::FluentIcons.Common.Symbol.Keyboard);
                userType.AddEnumValue("Keyboard123", global::FluentIcons.Common.Symbol.Keyboard123);
                userType.AddEnumValue("KeyboardDock", global::FluentIcons.Common.Symbol.KeyboardDock);
                userType.AddEnumValue("KeyboardLayoutFloat", global::FluentIcons.Common.Symbol.KeyboardLayoutFloat);
                userType.AddEnumValue("KeyboardLayoutOneHandedLeft", global::FluentIcons.Common.Symbol.KeyboardLayoutOneHandedLeft);
                userType.AddEnumValue("KeyboardLayoutResize", global::FluentIcons.Common.Symbol.KeyboardLayoutResize);
                userType.AddEnumValue("KeyboardLayoutSplit", global::FluentIcons.Common.Symbol.KeyboardLayoutSplit);
                userType.AddEnumValue("KeyboardShift", global::FluentIcons.Common.Symbol.KeyboardShift);
                userType.AddEnumValue("KeyboardShiftUppercase", global::FluentIcons.Common.Symbol.KeyboardShiftUppercase);
                userType.AddEnumValue("KeyboardTab", global::FluentIcons.Common.Symbol.KeyboardTab);
                userType.AddEnumValue("Laptop", global::FluentIcons.Common.Symbol.Laptop);
                userType.AddEnumValue("LaptopBriefcase", global::FluentIcons.Common.Symbol.LaptopBriefcase);
                userType.AddEnumValue("LaptopDismiss", global::FluentIcons.Common.Symbol.LaptopDismiss);
                userType.AddEnumValue("LaptopPerson", global::FluentIcons.Common.Symbol.LaptopPerson);
                userType.AddEnumValue("LaptopSettings", global::FluentIcons.Common.Symbol.LaptopSettings);
                userType.AddEnumValue("LaptopShield", global::FluentIcons.Common.Symbol.LaptopShield);
                userType.AddEnumValue("LaserTool", global::FluentIcons.Common.Symbol.LaserTool);
                userType.AddEnumValue("Lasso", global::FluentIcons.Common.Symbol.Lasso);
                userType.AddEnumValue("LauncherSettings", global::FluentIcons.Common.Symbol.LauncherSettings);
                userType.AddEnumValue("Layer", global::FluentIcons.Common.Symbol.Layer);
                userType.AddEnumValue("LayerDiagonal", global::FluentIcons.Common.Symbol.LayerDiagonal);
                userType.AddEnumValue("LayerDiagonalAdd", global::FluentIcons.Common.Symbol.LayerDiagonalAdd);
                userType.AddEnumValue("LayerDiagonalPerson", global::FluentIcons.Common.Symbol.LayerDiagonalPerson);
                userType.AddEnumValue("LayerDiagonalSparkle", global::FluentIcons.Common.Symbol.LayerDiagonalSparkle);
                userType.AddEnumValue("LayoutCellFour", global::FluentIcons.Common.Symbol.LayoutCellFour);
                userType.AddEnumValue("LayoutCellFourFocusBottomLeft", global::FluentIcons.Common.Symbol.LayoutCellFourFocusBottomLeft);
                userType.AddEnumValue("LayoutCellFourFocusBottomRight", global::FluentIcons.Common.Symbol.LayoutCellFourFocusBottomRight);
                userType.AddEnumValue("LayoutCellFourFocusTopLeft", global::FluentIcons.Common.Symbol.LayoutCellFourFocusTopLeft);
                userType.AddEnumValue("LayoutCellFourFocusTopRight", global::FluentIcons.Common.Symbol.LayoutCellFourFocusTopRight);
                userType.AddEnumValue("LayoutColumnFour", global::FluentIcons.Common.Symbol.LayoutColumnFour);
                userType.AddEnumValue("LayoutColumnFourFocusCenterLeft", global::FluentIcons.Common.Symbol.LayoutColumnFourFocusCenterLeft);
                userType.AddEnumValue("LayoutColumnFourFocusCenterRight", global::FluentIcons.Common.Symbol.LayoutColumnFourFocusCenterRight);
                userType.AddEnumValue("LayoutColumnFourFocusLeft", global::FluentIcons.Common.Symbol.LayoutColumnFourFocusLeft);
                userType.AddEnumValue("LayoutColumnFourFocusRight", global::FluentIcons.Common.Symbol.LayoutColumnFourFocusRight);
                userType.AddEnumValue("LayoutColumnOneThirdLeft", global::FluentIcons.Common.Symbol.LayoutColumnOneThirdLeft);
                userType.AddEnumValue("LayoutColumnOneThirdRight", global::FluentIcons.Common.Symbol.LayoutColumnOneThirdRight);
                userType.AddEnumValue("LayoutColumnOneThirdRightHint", global::FluentIcons.Common.Symbol.LayoutColumnOneThirdRightHint);
                userType.AddEnumValue("LayoutColumnThree", global::FluentIcons.Common.Symbol.LayoutColumnThree);
                userType.AddEnumValue("LayoutColumnThreeFocusCenter", global::FluentIcons.Common.Symbol.LayoutColumnThreeFocusCenter);
                userType.AddEnumValue("LayoutColumnThreeFocusLeft", global::FluentIcons.Common.Symbol.LayoutColumnThreeFocusLeft);
                userType.AddEnumValue("LayoutColumnThreeFocusRight", global::FluentIcons.Common.Symbol.LayoutColumnThreeFocusRight);
                userType.AddEnumValue("LayoutColumnTwo", global::FluentIcons.Common.Symbol.LayoutColumnTwo);
                userType.AddEnumValue("LayoutColumnTwoFocusLeft", global::FluentIcons.Common.Symbol.LayoutColumnTwoFocusLeft);
                userType.AddEnumValue("LayoutColumnTwoFocusRight", global::FluentIcons.Common.Symbol.LayoutColumnTwoFocusRight);
                userType.AddEnumValue("LayoutColumnTwoSplitLeft", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitLeft);
                userType.AddEnumValue("LayoutColumnTwoSplitLeftFocusBottomLeft", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitLeftFocusBottomLeft);
                userType.AddEnumValue("LayoutColumnTwoSplitLeftFocusRight", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitLeftFocusRight);
                userType.AddEnumValue("LayoutColumnTwoSplitLeftFocusTopLeft", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitLeftFocusTopLeft);
                userType.AddEnumValue("LayoutColumnTwoSplitRight", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitRight);
                userType.AddEnumValue("LayoutColumnTwoSplitRightFocusBottomRight", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitRightFocusBottomRight);
                userType.AddEnumValue("LayoutColumnTwoSplitRightFocusLeft", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitRightFocusLeft);
                userType.AddEnumValue("LayoutColumnTwoSplitRightFocusTopRight", global::FluentIcons.Common.Symbol.LayoutColumnTwoSplitRightFocusTopRight);
                userType.AddEnumValue("LayoutRowFour", global::FluentIcons.Common.Symbol.LayoutRowFour);
                userType.AddEnumValue("LayoutRowFourFocusBottom", global::FluentIcons.Common.Symbol.LayoutRowFourFocusBottom);
                userType.AddEnumValue("LayoutRowFourFocusCenterBottom", global::FluentIcons.Common.Symbol.LayoutRowFourFocusCenterBottom);
                userType.AddEnumValue("LayoutRowFourFocusCenterTop", global::FluentIcons.Common.Symbol.LayoutRowFourFocusCenterTop);
                userType.AddEnumValue("LayoutRowFourFocusTop", global::FluentIcons.Common.Symbol.LayoutRowFourFocusTop);
                userType.AddEnumValue("LayoutRowThree", global::FluentIcons.Common.Symbol.LayoutRowThree);
                userType.AddEnumValue("LayoutRowThreeFocusBottom", global::FluentIcons.Common.Symbol.LayoutRowThreeFocusBottom);
                userType.AddEnumValue("LayoutRowThreeFocusCenter", global::FluentIcons.Common.Symbol.LayoutRowThreeFocusCenter);
                userType.AddEnumValue("LayoutRowThreeFocusTop", global::FluentIcons.Common.Symbol.LayoutRowThreeFocusTop);
                userType.AddEnumValue("LayoutRowTwo", global::FluentIcons.Common.Symbol.LayoutRowTwo);
                userType.AddEnumValue("LayoutRowTwoFocusBottom", global::FluentIcons.Common.Symbol.LayoutRowTwoFocusBottom);
                userType.AddEnumValue("LayoutRowTwoFocusTop", global::FluentIcons.Common.Symbol.LayoutRowTwoFocusTop);
                userType.AddEnumValue("LayoutRowTwoFocusTopSettings", global::FluentIcons.Common.Symbol.LayoutRowTwoFocusTopSettings);
                userType.AddEnumValue("LayoutRowTwoSettings", global::FluentIcons.Common.Symbol.LayoutRowTwoSettings);
                userType.AddEnumValue("LayoutRowTwoSplitBottom", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitBottom);
                userType.AddEnumValue("LayoutRowTwoSplitBottomFocusBottomLeft", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitBottomFocusBottomLeft);
                userType.AddEnumValue("LayoutRowTwoSplitBottomFocusBottomRight", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitBottomFocusBottomRight);
                userType.AddEnumValue("LayoutRowTwoSplitBottomFocusTop", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitBottomFocusTop);
                userType.AddEnumValue("LayoutRowTwoSplitTop", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitTop);
                userType.AddEnumValue("LayoutRowTwoSplitTopFocusBottom", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitTopFocusBottom);
                userType.AddEnumValue("LayoutRowTwoSplitTopFocusTopLeft", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitTopFocusTopLeft);
                userType.AddEnumValue("LayoutRowTwoSplitTopFocusTopRight", global::FluentIcons.Common.Symbol.LayoutRowTwoSplitTopFocusTopRight);
                userType.AddEnumValue("LeafOne", global::FluentIcons.Common.Symbol.LeafOne);
                userType.AddEnumValue("LeafThree", global::FluentIcons.Common.Symbol.LeafThree);
                userType.AddEnumValue("LeafTwo", global::FluentIcons.Common.Symbol.LeafTwo);
                userType.AddEnumValue("LearningApp", global::FluentIcons.Common.Symbol.LearningApp);
                userType.AddEnumValue("Library", global::FluentIcons.Common.Symbol.Library);
                userType.AddEnumValue("Lightbulb", global::FluentIcons.Common.Symbol.Lightbulb);
                userType.AddEnumValue("LightbulbCheckmark", global::FluentIcons.Common.Symbol.LightbulbCheckmark);
                userType.AddEnumValue("LightbulbCircle", global::FluentIcons.Common.Symbol.LightbulbCircle);
                userType.AddEnumValue("LightbulbFilament", global::FluentIcons.Common.Symbol.LightbulbFilament);
                userType.AddEnumValue("LightbulbPerson", global::FluentIcons.Common.Symbol.LightbulbPerson);
                userType.AddEnumValue("Likert", global::FluentIcons.Common.Symbol.Likert);
                userType.AddEnumValue("Line", global::FluentIcons.Common.Symbol.Line);
                userType.AddEnumValue("LineDashes", global::FluentIcons.Common.Symbol.LineDashes);
                userType.AddEnumValue("LineFlowDiagonalUpRight", global::FluentIcons.Common.Symbol.LineFlowDiagonalUpRight);
                userType.AddEnumValue("LineHorizontal1", global::FluentIcons.Common.Symbol.LineHorizontal1);
                userType.AddEnumValue("LineHorizontal1DashDotDash", global::FluentIcons.Common.Symbol.LineHorizontal1DashDotDash);
                userType.AddEnumValue("LineHorizontal1Dashes", global::FluentIcons.Common.Symbol.LineHorizontal1Dashes);
                userType.AddEnumValue("LineHorizontal1Dot", global::FluentIcons.Common.Symbol.LineHorizontal1Dot);
                userType.AddEnumValue("LineHorizontal2DashesSolid", global::FluentIcons.Common.Symbol.LineHorizontal2DashesSolid);
                userType.AddEnumValue("LineHorizontal3", global::FluentIcons.Common.Symbol.LineHorizontal3);
                userType.AddEnumValue("LineHorizontal4", global::FluentIcons.Common.Symbol.LineHorizontal4);
                userType.AddEnumValue("LineHorizontal4Search", global::FluentIcons.Common.Symbol.LineHorizontal4Search);
                userType.AddEnumValue("LineHorizontal5", global::FluentIcons.Common.Symbol.LineHorizontal5);
                userType.AddEnumValue("LineHorizontal5Error", global::FluentIcons.Common.Symbol.LineHorizontal5Error);
                userType.AddEnumValue("LineStyle", global::FluentIcons.Common.Symbol.LineStyle);
                userType.AddEnumValue("LineStyleSketch", global::FluentIcons.Common.Symbol.LineStyleSketch);
                userType.AddEnumValue("LineThickness", global::FluentIcons.Common.Symbol.LineThickness);
                userType.AddEnumValue("Link", global::FluentIcons.Common.Symbol.Link);
                userType.AddEnumValue("LinkAdd", global::FluentIcons.Common.Symbol.LinkAdd);
                userType.AddEnumValue("LinkDismiss", global::FluentIcons.Common.Symbol.LinkDismiss);
                userType.AddEnumValue("LinkEdit", global::FluentIcons.Common.Symbol.LinkEdit);
                userType.AddEnumValue("LinkMultiple", global::FluentIcons.Common.Symbol.LinkMultiple);
                userType.AddEnumValue("LinkPerson", global::FluentIcons.Common.Symbol.LinkPerson);
                userType.AddEnumValue("LinkSquare", global::FluentIcons.Common.Symbol.LinkSquare);
                userType.AddEnumValue("LinkToolbox", global::FluentIcons.Common.Symbol.LinkToolbox);
                userType.AddEnumValue("List", global::FluentIcons.Common.Symbol.List);
                userType.AddEnumValue("ListBar", global::FluentIcons.Common.Symbol.ListBar);
                userType.AddEnumValue("ListBarTree", global::FluentIcons.Common.Symbol.ListBarTree);
                userType.AddEnumValue("ListBarTreeOffset", global::FluentIcons.Common.Symbol.ListBarTreeOffset);
                userType.AddEnumValue("Live", global::FluentIcons.Common.Symbol.Live);
                userType.AddEnumValue("LiveOff", global::FluentIcons.Common.Symbol.LiveOff);
                userType.AddEnumValue("LocalLanguage", global::FluentIcons.Common.Symbol.LocalLanguage);
                userType.AddEnumValue("Location", global::FluentIcons.Common.Symbol.Location);
                userType.AddEnumValue("LocationAdd", global::FluentIcons.Common.Symbol.LocationAdd);
                userType.AddEnumValue("LocationAddLeft", global::FluentIcons.Common.Symbol.LocationAddLeft);
                userType.AddEnumValue("LocationAddRight", global::FluentIcons.Common.Symbol.LocationAddRight);
                userType.AddEnumValue("LocationAddUp", global::FluentIcons.Common.Symbol.LocationAddUp);
                userType.AddEnumValue("LocationArrow", global::FluentIcons.Common.Symbol.LocationArrow);
                userType.AddEnumValue("LocationArrowLeft", global::FluentIcons.Common.Symbol.LocationArrowLeft);
                userType.AddEnumValue("LocationArrowRight", global::FluentIcons.Common.Symbol.LocationArrowRight);
                userType.AddEnumValue("LocationArrowUp", global::FluentIcons.Common.Symbol.LocationArrowUp);
                userType.AddEnumValue("LocationDismiss", global::FluentIcons.Common.Symbol.LocationDismiss);
                userType.AddEnumValue("LocationLive", global::FluentIcons.Common.Symbol.LocationLive);
                userType.AddEnumValue("LocationOff", global::FluentIcons.Common.Symbol.LocationOff);
                userType.AddEnumValue("LocationRipple", global::FluentIcons.Common.Symbol.LocationRipple);
                userType.AddEnumValue("LocationTargetSquare", global::FluentIcons.Common.Symbol.LocationTargetSquare);
                userType.AddEnumValue("LockClosed", global::FluentIcons.Common.Symbol.LockClosed);
                userType.AddEnumValue("LockClosedKey", global::FluentIcons.Common.Symbol.LockClosedKey);
                userType.AddEnumValue("LockMultiple", global::FluentIcons.Common.Symbol.LockMultiple);
                userType.AddEnumValue("LockOpen", global::FluentIcons.Common.Symbol.LockOpen);
                userType.AddEnumValue("LockShield", global::FluentIcons.Common.Symbol.LockShield);
                userType.AddEnumValue("Lottery", global::FluentIcons.Common.Symbol.Lottery);
                userType.AddEnumValue("Luggage", global::FluentIcons.Common.Symbol.Luggage);
                userType.AddEnumValue("Mail", global::FluentIcons.Common.Symbol.Mail);
                userType.AddEnumValue("MailAdd", global::FluentIcons.Common.Symbol.MailAdd);
                userType.AddEnumValue("MailAlert", global::FluentIcons.Common.Symbol.MailAlert);
                userType.AddEnumValue("MailAllRead", global::FluentIcons.Common.Symbol.MailAllRead);
                userType.AddEnumValue("MailAllUnread", global::FluentIcons.Common.Symbol.MailAllUnread);
                userType.AddEnumValue("MailArrowClockwise", global::FluentIcons.Common.Symbol.MailArrowClockwise);
                userType.AddEnumValue("MailArrowDoubleBack", global::FluentIcons.Common.Symbol.MailArrowDoubleBack);
                userType.AddEnumValue("MailArrowDown", global::FluentIcons.Common.Symbol.MailArrowDown);
                userType.AddEnumValue("MailArrowForward", global::FluentIcons.Common.Symbol.MailArrowForward);
                userType.AddEnumValue("MailArrowUp", global::FluentIcons.Common.Symbol.MailArrowUp);
                userType.AddEnumValue("MailAttach", global::FluentIcons.Common.Symbol.MailAttach);
                userType.AddEnumValue("MailCheckmark", global::FluentIcons.Common.Symbol.MailCheckmark);
                userType.AddEnumValue("MailClock", global::FluentIcons.Common.Symbol.MailClock);
                userType.AddEnumValue("MailCopy", global::FluentIcons.Common.Symbol.MailCopy);
                userType.AddEnumValue("MailDismiss", global::FluentIcons.Common.Symbol.MailDismiss);
                userType.AddEnumValue("MailEdit", global::FluentIcons.Common.Symbol.MailEdit);
                userType.AddEnumValue("MailError", global::FluentIcons.Common.Symbol.MailError);
                userType.AddEnumValue("MailInbox", global::FluentIcons.Common.Symbol.MailInbox);
                userType.AddEnumValue("MailInboxAdd", global::FluentIcons.Common.Symbol.MailInboxAdd);
                userType.AddEnumValue("MailInboxAll", global::FluentIcons.Common.Symbol.MailInboxAll);
                userType.AddEnumValue("MailInboxArrowDown", global::FluentIcons.Common.Symbol.MailInboxArrowDown);
                userType.AddEnumValue("MailInboxArrowRight", global::FluentIcons.Common.Symbol.MailInboxArrowRight);
                userType.AddEnumValue("MailInboxArrowUp", global::FluentIcons.Common.Symbol.MailInboxArrowUp);
                userType.AddEnumValue("MailInboxCheckmark", global::FluentIcons.Common.Symbol.MailInboxCheckmark);
                userType.AddEnumValue("MailInboxDismiss", global::FluentIcons.Common.Symbol.MailInboxDismiss);
                userType.AddEnumValue("MailInboxPerson", global::FluentIcons.Common.Symbol.MailInboxPerson);
                userType.AddEnumValue("MailLink", global::FluentIcons.Common.Symbol.MailLink);
                userType.AddEnumValue("MailList", global::FluentIcons.Common.Symbol.MailList);
                userType.AddEnumValue("MailMultiple", global::FluentIcons.Common.Symbol.MailMultiple);
                userType.AddEnumValue("MailOff", global::FluentIcons.Common.Symbol.MailOff);
                userType.AddEnumValue("MailOpenPerson", global::FluentIcons.Common.Symbol.MailOpenPerson);
                userType.AddEnumValue("MailPause", global::FluentIcons.Common.Symbol.MailPause);
                userType.AddEnumValue("MailProhibited", global::FluentIcons.Common.Symbol.MailProhibited);
                userType.AddEnumValue("MailRead", global::FluentIcons.Common.Symbol.MailRead);
                userType.AddEnumValue("MailReadBriefcase", global::FluentIcons.Common.Symbol.MailReadBriefcase);
                userType.AddEnumValue("MailReadMultiple", global::FluentIcons.Common.Symbol.MailReadMultiple);
                userType.AddEnumValue("MailRewind", global::FluentIcons.Common.Symbol.MailRewind);
                userType.AddEnumValue("MailSettings", global::FluentIcons.Common.Symbol.MailSettings);
                userType.AddEnumValue("MailShield", global::FluentIcons.Common.Symbol.MailShield);
                userType.AddEnumValue("MailTemplate", global::FluentIcons.Common.Symbol.MailTemplate);
                userType.AddEnumValue("MailUnread", global::FluentIcons.Common.Symbol.MailUnread);
                userType.AddEnumValue("MailWarning", global::FluentIcons.Common.Symbol.MailWarning);
                userType.AddEnumValue("Mailbox", global::FluentIcons.Common.Symbol.Mailbox);
                userType.AddEnumValue("Map", global::FluentIcons.Common.Symbol.Map);
                userType.AddEnumValue("MapDrive", global::FluentIcons.Common.Symbol.MapDrive);
                userType.AddEnumValue("Markdown", global::FluentIcons.Common.Symbol.Markdown);
                userType.AddEnumValue("MatchAppLayout", global::FluentIcons.Common.Symbol.MatchAppLayout);
                userType.AddEnumValue("MathFormatLinear", global::FluentIcons.Common.Symbol.MathFormatLinear);
                userType.AddEnumValue("MathFormatProfessional", global::FluentIcons.Common.Symbol.MathFormatProfessional);
                userType.AddEnumValue("MathFormula", global::FluentIcons.Common.Symbol.MathFormula);
                userType.AddEnumValue("MathSymbols", global::FluentIcons.Common.Symbol.MathSymbols);
                userType.AddEnumValue("Maximize", global::FluentIcons.Common.Symbol.Maximize);
                userType.AddEnumValue("MeetNow", global::FluentIcons.Common.Symbol.MeetNow);
                userType.AddEnumValue("Megaphone", global::FluentIcons.Common.Symbol.Megaphone);
                userType.AddEnumValue("MegaphoneCircle", global::FluentIcons.Common.Symbol.MegaphoneCircle);
                userType.AddEnumValue("MegaphoneLoud", global::FluentIcons.Common.Symbol.MegaphoneLoud);
                userType.AddEnumValue("MegaphoneOff", global::FluentIcons.Common.Symbol.MegaphoneOff);
                userType.AddEnumValue("Mention", global::FluentIcons.Common.Symbol.Mention);
                userType.AddEnumValue("MentionArrowDown", global::FluentIcons.Common.Symbol.MentionArrowDown);
                userType.AddEnumValue("MentionBrackets", global::FluentIcons.Common.Symbol.MentionBrackets);
                userType.AddEnumValue("Merge", global::FluentIcons.Common.Symbol.Merge);
                userType.AddEnumValue("Mic", global::FluentIcons.Common.Symbol.Mic);
                userType.AddEnumValue("MicLink", global::FluentIcons.Common.Symbol.MicLink);
                userType.AddEnumValue("MicOff", global::FluentIcons.Common.Symbol.MicOff);
                userType.AddEnumValue("MicProhibited", global::FluentIcons.Common.Symbol.MicProhibited);
                userType.AddEnumValue("MicPulse", global::FluentIcons.Common.Symbol.MicPulse);
                userType.AddEnumValue("MicPulseOff", global::FluentIcons.Common.Symbol.MicPulseOff);
                userType.AddEnumValue("MicRecord", global::FluentIcons.Common.Symbol.MicRecord);
                userType.AddEnumValue("MicSettings", global::FluentIcons.Common.Symbol.MicSettings);
                userType.AddEnumValue("MicSparkle", global::FluentIcons.Common.Symbol.MicSparkle);
                userType.AddEnumValue("MicSync", global::FluentIcons.Common.Symbol.MicSync);
                userType.AddEnumValue("Microscope", global::FluentIcons.Common.Symbol.Microscope);
                userType.AddEnumValue("Midi", global::FluentIcons.Common.Symbol.Midi);
                userType.AddEnumValue("MobileOptimized", global::FluentIcons.Common.Symbol.MobileOptimized);
                userType.AddEnumValue("Mold", global::FluentIcons.Common.Symbol.Mold);
                userType.AddEnumValue("Molecule", global::FluentIcons.Common.Symbol.Molecule);
                userType.AddEnumValue("Money", global::FluentIcons.Common.Symbol.Money);
                userType.AddEnumValue("MoneyCalculator", global::FluentIcons.Common.Symbol.MoneyCalculator);
                userType.AddEnumValue("MoneyDismiss", global::FluentIcons.Common.Symbol.MoneyDismiss);
                userType.AddEnumValue("MoneyHand", global::FluentIcons.Common.Symbol.MoneyHand);
                userType.AddEnumValue("MoneyOff", global::FluentIcons.Common.Symbol.MoneyOff);
                userType.AddEnumValue("MoneySettings", global::FluentIcons.Common.Symbol.MoneySettings);
                userType.AddEnumValue("MoreCircle", global::FluentIcons.Common.Symbol.MoreCircle);
                userType.AddEnumValue("MoreHorizontal", global::FluentIcons.Common.Symbol.MoreHorizontal);
                userType.AddEnumValue("MoreVertical", global::FluentIcons.Common.Symbol.MoreVertical);
                userType.AddEnumValue("MountainLocationBottom", global::FluentIcons.Common.Symbol.MountainLocationBottom);
                userType.AddEnumValue("MountainLocationTop", global::FluentIcons.Common.Symbol.MountainLocationTop);
                userType.AddEnumValue("MountainTrail", global::FluentIcons.Common.Symbol.MountainTrail);
                userType.AddEnumValue("MoviesAndTv", global::FluentIcons.Common.Symbol.MoviesAndTv);
                userType.AddEnumValue("Multiplier12x", global::FluentIcons.Common.Symbol.Multiplier12x);
                userType.AddEnumValue("Multiplier15x", global::FluentIcons.Common.Symbol.Multiplier15x);
                userType.AddEnumValue("Multiplier18x", global::FluentIcons.Common.Symbol.Multiplier18x);
                userType.AddEnumValue("Multiplier1x", global::FluentIcons.Common.Symbol.Multiplier1x);
                userType.AddEnumValue("Multiplier2x", global::FluentIcons.Common.Symbol.Multiplier2x);
                userType.AddEnumValue("Multiplier5x", global::FluentIcons.Common.Symbol.Multiplier5x);
                userType.AddEnumValue("Multiselect", global::FluentIcons.Common.Symbol.Multiselect);
                userType.AddEnumValue("MusicNote1", global::FluentIcons.Common.Symbol.MusicNote1);
                userType.AddEnumValue("MusicNote2", global::FluentIcons.Common.Symbol.MusicNote2);
                userType.AddEnumValue("MusicNote2Play", global::FluentIcons.Common.Symbol.MusicNote2Play);
                userType.AddEnumValue("MusicNoteOff1", global::FluentIcons.Common.Symbol.MusicNoteOff1);
                userType.AddEnumValue("MusicNoteOff2", global::FluentIcons.Common.Symbol.MusicNoteOff2);
                userType.AddEnumValue("MyLocation", global::FluentIcons.Common.Symbol.MyLocation);
                userType.AddEnumValue("Navigation", global::FluentIcons.Common.Symbol.Navigation);
                userType.AddEnumValue("NavigationLocationTarget", global::FluentIcons.Common.Symbol.NavigationLocationTarget);
                userType.AddEnumValue("NavigationPlay", global::FluentIcons.Common.Symbol.NavigationPlay);
                userType.AddEnumValue("NavigationUnread", global::FluentIcons.Common.Symbol.NavigationUnread);
                userType.AddEnumValue("NetworkCheck", global::FluentIcons.Common.Symbol.NetworkCheck);
                userType.AddEnumValue("New", global::FluentIcons.Common.Symbol.New);
                userType.AddEnumValue("News", global::FluentIcons.Common.Symbol.News);
                userType.AddEnumValue("Next", global::FluentIcons.Common.Symbol.Next);
                userType.AddEnumValue("NextFrame", global::FluentIcons.Common.Symbol.NextFrame);
                userType.AddEnumValue("Note", global::FluentIcons.Common.Symbol.Note);
                userType.AddEnumValue("NoteAdd", global::FluentIcons.Common.Symbol.NoteAdd);
                userType.AddEnumValue("NoteEdit", global::FluentIcons.Common.Symbol.NoteEdit);
                userType.AddEnumValue("NotePin", global::FluentIcons.Common.Symbol.NotePin);
                userType.AddEnumValue("Notebook", global::FluentIcons.Common.Symbol.Notebook);
                userType.AddEnumValue("NotebookAdd", global::FluentIcons.Common.Symbol.NotebookAdd);
                userType.AddEnumValue("NotebookArrowCurveDown", global::FluentIcons.Common.Symbol.NotebookArrowCurveDown);
                userType.AddEnumValue("NotebookError", global::FluentIcons.Common.Symbol.NotebookError);
                userType.AddEnumValue("NotebookEye", global::FluentIcons.Common.Symbol.NotebookEye);
                userType.AddEnumValue("NotebookLightning", global::FluentIcons.Common.Symbol.NotebookLightning);
                userType.AddEnumValue("NotebookQuestionMark", global::FluentIcons.Common.Symbol.NotebookQuestionMark);
                userType.AddEnumValue("NotebookSection", global::FluentIcons.Common.Symbol.NotebookSection);
                userType.AddEnumValue("NotebookSectionArrowRight", global::FluentIcons.Common.Symbol.NotebookSectionArrowRight);
                userType.AddEnumValue("NotebookSubsection", global::FluentIcons.Common.Symbol.NotebookSubsection);
                userType.AddEnumValue("NotebookSync", global::FluentIcons.Common.Symbol.NotebookSync);
                userType.AddEnumValue("Notepad", global::FluentIcons.Common.Symbol.Notepad);
                userType.AddEnumValue("NotepadEdit", global::FluentIcons.Common.Symbol.NotepadEdit);
                userType.AddEnumValue("NotepadPerson", global::FluentIcons.Common.Symbol.NotepadPerson);
                userType.AddEnumValue("NotepadSparkle", global::FluentIcons.Common.Symbol.NotepadSparkle);
                userType.AddEnumValue("NumberCircle0", global::FluentIcons.Common.Symbol.NumberCircle0);
                userType.AddEnumValue("NumberCircle1", global::FluentIcons.Common.Symbol.NumberCircle1);
                userType.AddEnumValue("NumberCircle2", global::FluentIcons.Common.Symbol.NumberCircle2);
                userType.AddEnumValue("NumberCircle3", global::FluentIcons.Common.Symbol.NumberCircle3);
                userType.AddEnumValue("NumberCircle4", global::FluentIcons.Common.Symbol.NumberCircle4);
                userType.AddEnumValue("NumberCircle5", global::FluentIcons.Common.Symbol.NumberCircle5);
                userType.AddEnumValue("NumberCircle6", global::FluentIcons.Common.Symbol.NumberCircle6);
                userType.AddEnumValue("NumberCircle7", global::FluentIcons.Common.Symbol.NumberCircle7);
                userType.AddEnumValue("NumberCircle8", global::FluentIcons.Common.Symbol.NumberCircle8);
                userType.AddEnumValue("NumberCircle9", global::FluentIcons.Common.Symbol.NumberCircle9);
                userType.AddEnumValue("NumberRow", global::FluentIcons.Common.Symbol.NumberRow);
                userType.AddEnumValue("NumberSymbol", global::FluentIcons.Common.Symbol.NumberSymbol);
                userType.AddEnumValue("NumberSymbolDismiss", global::FluentIcons.Common.Symbol.NumberSymbolDismiss);
                userType.AddEnumValue("NumberSymbolSquare", global::FluentIcons.Common.Symbol.NumberSymbolSquare);
                userType.AddEnumValue("Open", global::FluentIcons.Common.Symbol.Open);
                userType.AddEnumValue("OpenFolder", global::FluentIcons.Common.Symbol.OpenFolder);
                userType.AddEnumValue("OpenOff", global::FluentIcons.Common.Symbol.OpenOff);
                userType.AddEnumValue("Options", global::FluentIcons.Common.Symbol.Options);
                userType.AddEnumValue("Organization", global::FluentIcons.Common.Symbol.Organization);
                userType.AddEnumValue("OrganizationHorizontal", global::FluentIcons.Common.Symbol.OrganizationHorizontal);
                userType.AddEnumValue("Orientation", global::FluentIcons.Common.Symbol.Orientation);
                userType.AddEnumValue("Oval", global::FluentIcons.Common.Symbol.Oval);
                userType.AddEnumValue("Oven", global::FluentIcons.Common.Symbol.Oven);
                userType.AddEnumValue("PaddingDown", global::FluentIcons.Common.Symbol.PaddingDown);
                userType.AddEnumValue("PaddingLeft", global::FluentIcons.Common.Symbol.PaddingLeft);
                userType.AddEnumValue("PaddingRight", global::FluentIcons.Common.Symbol.PaddingRight);
                userType.AddEnumValue("PaddingTop", global::FluentIcons.Common.Symbol.PaddingTop);
                userType.AddEnumValue("PageFit", global::FluentIcons.Common.Symbol.PageFit);
                userType.AddEnumValue("PaintBrush", global::FluentIcons.Common.Symbol.PaintBrush);
                userType.AddEnumValue("PaintBrushArrowDown", global::FluentIcons.Common.Symbol.PaintBrushArrowDown);
                userType.AddEnumValue("PaintBrushArrowUp", global::FluentIcons.Common.Symbol.PaintBrushArrowUp);
                userType.AddEnumValue("PaintBrushSparkle", global::FluentIcons.Common.Symbol.PaintBrushSparkle);
                userType.AddEnumValue("PaintBrushSubtract", global::FluentIcons.Common.Symbol.PaintBrushSubtract);
                userType.AddEnumValue("PaintBucket", global::FluentIcons.Common.Symbol.PaintBucket);
                userType.AddEnumValue("Pair", global::FluentIcons.Common.Symbol.Pair);
                userType.AddEnumValue("PanelBottom", global::FluentIcons.Common.Symbol.PanelBottom);
                userType.AddEnumValue("PanelBottomContract", global::FluentIcons.Common.Symbol.PanelBottomContract);
                userType.AddEnumValue("PanelBottomExpand", global::FluentIcons.Common.Symbol.PanelBottomExpand);
                userType.AddEnumValue("PanelLeft", global::FluentIcons.Common.Symbol.PanelLeft);
                userType.AddEnumValue("PanelLeftAdd", global::FluentIcons.Common.Symbol.PanelLeftAdd);
                userType.AddEnumValue("PanelLeftContract", global::FluentIcons.Common.Symbol.PanelLeftContract);
                userType.AddEnumValue("PanelLeftDefault", global::FluentIcons.Common.Symbol.PanelLeftDefault);
                userType.AddEnumValue("PanelLeftExpand", global::FluentIcons.Common.Symbol.PanelLeftExpand);
                userType.AddEnumValue("PanelLeftFocusRight", global::FluentIcons.Common.Symbol.PanelLeftFocusRight);
                userType.AddEnumValue("PanelLeftHeader", global::FluentIcons.Common.Symbol.PanelLeftHeader);
                userType.AddEnumValue("PanelLeftHeaderAdd", global::FluentIcons.Common.Symbol.PanelLeftHeaderAdd);
                userType.AddEnumValue("PanelLeftHeaderKey", global::FluentIcons.Common.Symbol.PanelLeftHeaderKey);
                userType.AddEnumValue("PanelLeftKey", global::FluentIcons.Common.Symbol.PanelLeftKey);
                userType.AddEnumValue("PanelLeftText", global::FluentIcons.Common.Symbol.PanelLeftText);
                userType.AddEnumValue("PanelLeftTextAdd", global::FluentIcons.Common.Symbol.PanelLeftTextAdd);
                userType.AddEnumValue("PanelLeftTextDismiss", global::FluentIcons.Common.Symbol.PanelLeftTextDismiss);
                userType.AddEnumValue("PanelRight", global::FluentIcons.Common.Symbol.PanelRight);
                userType.AddEnumValue("PanelRightAdd", global::FluentIcons.Common.Symbol.PanelRightAdd);
                userType.AddEnumValue("PanelRightContract", global::FluentIcons.Common.Symbol.PanelRightContract);
                userType.AddEnumValue("PanelRightCursor", global::FluentIcons.Common.Symbol.PanelRightCursor);
                userType.AddEnumValue("PanelRightExpand", global::FluentIcons.Common.Symbol.PanelRightExpand);
                userType.AddEnumValue("PanelRightGallery", global::FluentIcons.Common.Symbol.PanelRightGallery);
                userType.AddEnumValue("PanelSeparateWindow", global::FluentIcons.Common.Symbol.PanelSeparateWindow);
                userType.AddEnumValue("PanelTopContract", global::FluentIcons.Common.Symbol.PanelTopContract);
                userType.AddEnumValue("PanelTopExpand", global::FluentIcons.Common.Symbol.PanelTopExpand);
                userType.AddEnumValue("PanelTopGallery", global::FluentIcons.Common.Symbol.PanelTopGallery);
                userType.AddEnumValue("Password", global::FluentIcons.Common.Symbol.Password);
                userType.AddEnumValue("Patch", global::FluentIcons.Common.Symbol.Patch);
                userType.AddEnumValue("Patient", global::FluentIcons.Common.Symbol.Patient);
                userType.AddEnumValue("Pause", global::FluentIcons.Common.Symbol.Pause);
                userType.AddEnumValue("PauseCircle", global::FluentIcons.Common.Symbol.PauseCircle);
                userType.AddEnumValue("PauseOff", global::FluentIcons.Common.Symbol.PauseOff);
                userType.AddEnumValue("PauseSettings", global::FluentIcons.Common.Symbol.PauseSettings);
                userType.AddEnumValue("Payment", global::FluentIcons.Common.Symbol.Payment);
                userType.AddEnumValue("PaymentWireless", global::FluentIcons.Common.Symbol.PaymentWireless);
                userType.AddEnumValue("Pen", global::FluentIcons.Common.Symbol.Pen);
                userType.AddEnumValue("PenDismiss", global::FluentIcons.Common.Symbol.PenDismiss);
                userType.AddEnumValue("PenOff", global::FluentIcons.Common.Symbol.PenOff);
                userType.AddEnumValue("PenProhibited", global::FluentIcons.Common.Symbol.PenProhibited);
                userType.AddEnumValue("PenSparkle", global::FluentIcons.Common.Symbol.PenSparkle);
                userType.AddEnumValue("PenSync", global::FluentIcons.Common.Symbol.PenSync);
                userType.AddEnumValue("Pentagon", global::FluentIcons.Common.Symbol.Pentagon);
                userType.AddEnumValue("People", global::FluentIcons.Common.Symbol.People);
                userType.AddEnumValue("PeopleAdd", global::FluentIcons.Common.Symbol.PeopleAdd);
                userType.AddEnumValue("PeopleAudience", global::FluentIcons.Common.Symbol.PeopleAudience);
                userType.AddEnumValue("PeopleCall", global::FluentIcons.Common.Symbol.PeopleCall);
                userType.AddEnumValue("PeopleChat", global::FluentIcons.Common.Symbol.PeopleChat);
                userType.AddEnumValue("PeopleCheckmark", global::FluentIcons.Common.Symbol.PeopleCheckmark);
                userType.AddEnumValue("PeopleCommunity", global::FluentIcons.Common.Symbol.PeopleCommunity);
                userType.AddEnumValue("PeopleCommunityAdd", global::FluentIcons.Common.Symbol.PeopleCommunityAdd);
                userType.AddEnumValue("PeopleEdit", global::FluentIcons.Common.Symbol.PeopleEdit);
                userType.AddEnumValue("PeopleError", global::FluentIcons.Common.Symbol.PeopleError);
                userType.AddEnumValue("PeopleEye", global::FluentIcons.Common.Symbol.PeopleEye);
                userType.AddEnumValue("PeopleLink", global::FluentIcons.Common.Symbol.PeopleLink);
                userType.AddEnumValue("PeopleList", global::FluentIcons.Common.Symbol.PeopleList);
                userType.AddEnumValue("PeopleLock", global::FluentIcons.Common.Symbol.PeopleLock);
                userType.AddEnumValue("PeopleMoney", global::FluentIcons.Common.Symbol.PeopleMoney);
                userType.AddEnumValue("PeopleProhibited", global::FluentIcons.Common.Symbol.PeopleProhibited);
                userType.AddEnumValue("PeopleQueue", global::FluentIcons.Common.Symbol.PeopleQueue);
                userType.AddEnumValue("PeopleSearch", global::FluentIcons.Common.Symbol.PeopleSearch);
                userType.AddEnumValue("PeopleSettings", global::FluentIcons.Common.Symbol.PeopleSettings);
                userType.AddEnumValue("PeopleStar", global::FluentIcons.Common.Symbol.PeopleStar);
                userType.AddEnumValue("PeopleSubtract", global::FluentIcons.Common.Symbol.PeopleSubtract);
                userType.AddEnumValue("PeopleSwap", global::FluentIcons.Common.Symbol.PeopleSwap);
                userType.AddEnumValue("PeopleSync", global::FluentIcons.Common.Symbol.PeopleSync);
                userType.AddEnumValue("PeopleTeam", global::FluentIcons.Common.Symbol.PeopleTeam);
                userType.AddEnumValue("PeopleTeamAdd", global::FluentIcons.Common.Symbol.PeopleTeamAdd);
                userType.AddEnumValue("PeopleTeamDelete", global::FluentIcons.Common.Symbol.PeopleTeamDelete);
                userType.AddEnumValue("PeopleTeamToolbox", global::FluentIcons.Common.Symbol.PeopleTeamToolbox);
                userType.AddEnumValue("PeopleToolbox", global::FluentIcons.Common.Symbol.PeopleToolbox);
                userType.AddEnumValue("Person", global::FluentIcons.Common.Symbol.Person);
                userType.AddEnumValue("Person5", global::FluentIcons.Common.Symbol.Person5);
                userType.AddEnumValue("Person6", global::FluentIcons.Common.Symbol.Person6);
                userType.AddEnumValue("PersonAccounts", global::FluentIcons.Common.Symbol.PersonAccounts);
                userType.AddEnumValue("PersonAdd", global::FluentIcons.Common.Symbol.PersonAdd);
                userType.AddEnumValue("PersonAlert", global::FluentIcons.Common.Symbol.PersonAlert);
                userType.AddEnumValue("PersonAlertOff", global::FluentIcons.Common.Symbol.PersonAlertOff);
                userType.AddEnumValue("PersonArrowBack", global::FluentIcons.Common.Symbol.PersonArrowBack);
                userType.AddEnumValue("PersonArrowLeft", global::FluentIcons.Common.Symbol.PersonArrowLeft);
                userType.AddEnumValue("PersonArrowRight", global::FluentIcons.Common.Symbol.PersonArrowRight);
                userType.AddEnumValue("PersonAvailable", global::FluentIcons.Common.Symbol.PersonAvailable);
                userType.AddEnumValue("PersonBoard", global::FluentIcons.Common.Symbol.PersonBoard);
                userType.AddEnumValue("PersonBoardAdd", global::FluentIcons.Common.Symbol.PersonBoardAdd);
                userType.AddEnumValue("PersonCall", global::FluentIcons.Common.Symbol.PersonCall);
                userType.AddEnumValue("PersonChat", global::FluentIcons.Common.Symbol.PersonChat);
                userType.AddEnumValue("PersonCircle", global::FluentIcons.Common.Symbol.PersonCircle);
                userType.AddEnumValue("PersonClock", global::FluentIcons.Common.Symbol.PersonClock);
                userType.AddEnumValue("PersonDelete", global::FluentIcons.Common.Symbol.PersonDelete);
                userType.AddEnumValue("PersonDesktop", global::FluentIcons.Common.Symbol.PersonDesktop);
                userType.AddEnumValue("PersonEdit", global::FluentIcons.Common.Symbol.PersonEdit);
                userType.AddEnumValue("PersonFeedback", global::FluentIcons.Common.Symbol.PersonFeedback);
                userType.AddEnumValue("PersonHeadHint", global::FluentIcons.Common.Symbol.PersonHeadHint);
                userType.AddEnumValue("PersonHeart", global::FluentIcons.Common.Symbol.PersonHeart);
                userType.AddEnumValue("PersonHome", global::FluentIcons.Common.Symbol.PersonHome);
                userType.AddEnumValue("PersonInfo", global::FluentIcons.Common.Symbol.PersonInfo);
                userType.AddEnumValue("PersonKey", global::FluentIcons.Common.Symbol.PersonKey);
                userType.AddEnumValue("PersonLightbulb", global::FluentIcons.Common.Symbol.PersonLightbulb);
                userType.AddEnumValue("PersonLightning", global::FluentIcons.Common.Symbol.PersonLightning);
                userType.AddEnumValue("PersonLink", global::FluentIcons.Common.Symbol.PersonLink);
                userType.AddEnumValue("PersonLock", global::FluentIcons.Common.Symbol.PersonLock);
                userType.AddEnumValue("PersonMail", global::FluentIcons.Common.Symbol.PersonMail);
                userType.AddEnumValue("PersonMoney", global::FluentIcons.Common.Symbol.PersonMoney);
                userType.AddEnumValue("PersonNote", global::FluentIcons.Common.Symbol.PersonNote);
                userType.AddEnumValue("PersonPasskey", global::FluentIcons.Common.Symbol.PersonPasskey);
                userType.AddEnumValue("PersonPill", global::FluentIcons.Common.Symbol.PersonPill);
                userType.AddEnumValue("PersonProhibited", global::FluentIcons.Common.Symbol.PersonProhibited);
                userType.AddEnumValue("PersonQuestionMark", global::FluentIcons.Common.Symbol.PersonQuestionMark);
                userType.AddEnumValue("PersonRibbon", global::FluentIcons.Common.Symbol.PersonRibbon);
                userType.AddEnumValue("PersonRunning", global::FluentIcons.Common.Symbol.PersonRunning);
                userType.AddEnumValue("PersonSearch", global::FluentIcons.Common.Symbol.PersonSearch);
                userType.AddEnumValue("PersonSettings", global::FluentIcons.Common.Symbol.PersonSettings);
                userType.AddEnumValue("PersonSoundSpatial", global::FluentIcons.Common.Symbol.PersonSoundSpatial);
                userType.AddEnumValue("PersonSquare", global::FluentIcons.Common.Symbol.PersonSquare);
                userType.AddEnumValue("PersonSquareAdd", global::FluentIcons.Common.Symbol.PersonSquareAdd);
                userType.AddEnumValue("PersonSquareCheckmark", global::FluentIcons.Common.Symbol.PersonSquareCheckmark);
                userType.AddEnumValue("PersonStar", global::FluentIcons.Common.Symbol.PersonStar);
                userType.AddEnumValue("PersonStarburst", global::FluentIcons.Common.Symbol.PersonStarburst);
                userType.AddEnumValue("PersonSubtract", global::FluentIcons.Common.Symbol.PersonSubtract);
                userType.AddEnumValue("PersonSuport", global::FluentIcons.Common.Symbol.PersonSuport);
                userType.AddEnumValue("PersonSupport", global::FluentIcons.Common.Symbol.PersonSupport);
                userType.AddEnumValue("PersonSwap", global::FluentIcons.Common.Symbol.PersonSwap);
                userType.AddEnumValue("PersonSync", global::FluentIcons.Common.Symbol.PersonSync);
                userType.AddEnumValue("PersonTag", global::FluentIcons.Common.Symbol.PersonTag);
                userType.AddEnumValue("PersonTentative", global::FluentIcons.Common.Symbol.PersonTentative);
                userType.AddEnumValue("PersonVoice", global::FluentIcons.Common.Symbol.PersonVoice);
                userType.AddEnumValue("PersonWalking", global::FluentIcons.Common.Symbol.PersonWalking);
                userType.AddEnumValue("PersonWarning", global::FluentIcons.Common.Symbol.PersonWarning);
                userType.AddEnumValue("PersonWrench", global::FluentIcons.Common.Symbol.PersonWrench);
                userType.AddEnumValue("Phone", global::FluentIcons.Common.Symbol.Phone);
                userType.AddEnumValue("PhoneAdd", global::FluentIcons.Common.Symbol.PhoneAdd);
                userType.AddEnumValue("PhoneArrowRight", global::FluentIcons.Common.Symbol.PhoneArrowRight);
                userType.AddEnumValue("PhoneChat", global::FluentIcons.Common.Symbol.PhoneChat);
                userType.AddEnumValue("PhoneCheckmark", global::FluentIcons.Common.Symbol.PhoneCheckmark);
                userType.AddEnumValue("PhoneDesktop", global::FluentIcons.Common.Symbol.PhoneDesktop);
                userType.AddEnumValue("PhoneDesktopAdd", global::FluentIcons.Common.Symbol.PhoneDesktopAdd);
                userType.AddEnumValue("PhoneDismiss", global::FluentIcons.Common.Symbol.PhoneDismiss);
                userType.AddEnumValue("PhoneEdit", global::FluentIcons.Common.Symbol.PhoneEdit);
                userType.AddEnumValue("PhoneEraser", global::FluentIcons.Common.Symbol.PhoneEraser);
                userType.AddEnumValue("PhoneFooterArrowDown", global::FluentIcons.Common.Symbol.PhoneFooterArrowDown);
                userType.AddEnumValue("PhoneHeaderArrowUp", global::FluentIcons.Common.Symbol.PhoneHeaderArrowUp);
                userType.AddEnumValue("PhoneKey", global::FluentIcons.Common.Symbol.PhoneKey);
                userType.AddEnumValue("PhoneLaptop", global::FluentIcons.Common.Symbol.PhoneLaptop);
                userType.AddEnumValue("PhoneLinkSetup", global::FluentIcons.Common.Symbol.PhoneLinkSetup);
                userType.AddEnumValue("PhoneLock", global::FluentIcons.Common.Symbol.PhoneLock);
                userType.AddEnumValue("PhonePageHeader", global::FluentIcons.Common.Symbol.PhonePageHeader);
                userType.AddEnumValue("PhonePagination", global::FluentIcons.Common.Symbol.PhonePagination);
                userType.AddEnumValue("PhoneScreenTime", global::FluentIcons.Common.Symbol.PhoneScreenTime);
                userType.AddEnumValue("PhoneShake", global::FluentIcons.Common.Symbol.PhoneShake);
                userType.AddEnumValue("PhoneSpanIn", global::FluentIcons.Common.Symbol.PhoneSpanIn);
                userType.AddEnumValue("PhoneSpanOut", global::FluentIcons.Common.Symbol.PhoneSpanOut);
                userType.AddEnumValue("PhoneSpeaker", global::FluentIcons.Common.Symbol.PhoneSpeaker);
                userType.AddEnumValue("PhoneStatusBar", global::FluentIcons.Common.Symbol.PhoneStatusBar);
                userType.AddEnumValue("PhoneTablet", global::FluentIcons.Common.Symbol.PhoneTablet);
                userType.AddEnumValue("PhoneUpdate", global::FluentIcons.Common.Symbol.PhoneUpdate);
                userType.AddEnumValue("PhoneUpdateCheckmark", global::FluentIcons.Common.Symbol.PhoneUpdateCheckmark);
                userType.AddEnumValue("PhoneVerticalScroll", global::FluentIcons.Common.Symbol.PhoneVerticalScroll);
                userType.AddEnumValue("PhoneVibrate", global::FluentIcons.Common.Symbol.PhoneVibrate);
                userType.AddEnumValue("PhotoFilter", global::FluentIcons.Common.Symbol.PhotoFilter);
                userType.AddEnumValue("Pi", global::FluentIcons.Common.Symbol.Pi);
                userType.AddEnumValue("PictureInPicture", global::FluentIcons.Common.Symbol.PictureInPicture);
                userType.AddEnumValue("PictureInPictureEnter", global::FluentIcons.Common.Symbol.PictureInPictureEnter);
                userType.AddEnumValue("PictureInPictureExit", global::FluentIcons.Common.Symbol.PictureInPictureExit);
                userType.AddEnumValue("Pill", global::FluentIcons.Common.Symbol.Pill);
                userType.AddEnumValue("Pin", global::FluentIcons.Common.Symbol.Pin);
                userType.AddEnumValue("PinGlobe", global::FluentIcons.Common.Symbol.PinGlobe);
                userType.AddEnumValue("PinOff", global::FluentIcons.Common.Symbol.PinOff);
                userType.AddEnumValue("Pipeline", global::FluentIcons.Common.Symbol.Pipeline);
                userType.AddEnumValue("PipelineAdd", global::FluentIcons.Common.Symbol.PipelineAdd);
                userType.AddEnumValue("PipelineArrowCurveDown", global::FluentIcons.Common.Symbol.PipelineArrowCurveDown);
                userType.AddEnumValue("PipelinePlay", global::FluentIcons.Common.Symbol.PipelinePlay);
                userType.AddEnumValue("Pivot", global::FluentIcons.Common.Symbol.Pivot);
                userType.AddEnumValue("PlantCattail", global::FluentIcons.Common.Symbol.PlantCattail);
                userType.AddEnumValue("PlantGrass", global::FluentIcons.Common.Symbol.PlantGrass);
                userType.AddEnumValue("PlantRagweed", global::FluentIcons.Common.Symbol.PlantRagweed);
                userType.AddEnumValue("Play", global::FluentIcons.Common.Symbol.Play);
                userType.AddEnumValue("PlayCircle", global::FluentIcons.Common.Symbol.PlayCircle);
                userType.AddEnumValue("PlayCircleHint", global::FluentIcons.Common.Symbol.PlayCircleHint);
                userType.AddEnumValue("PlayCircleSparkle", global::FluentIcons.Common.Symbol.PlayCircleSparkle);
                userType.AddEnumValue("PlaySettings", global::FluentIcons.Common.Symbol.PlaySettings);
                userType.AddEnumValue("PlayingCards", global::FluentIcons.Common.Symbol.PlayingCards);
                userType.AddEnumValue("PlugConnected", global::FluentIcons.Common.Symbol.PlugConnected);
                userType.AddEnumValue("PlugConnectedAdd", global::FluentIcons.Common.Symbol.PlugConnectedAdd);
                userType.AddEnumValue("PlugConnectedCheckmark", global::FluentIcons.Common.Symbol.PlugConnectedCheckmark);
                userType.AddEnumValue("PlugConnectedSettings", global::FluentIcons.Common.Symbol.PlugConnectedSettings);
                userType.AddEnumValue("PlugDisconnected", global::FluentIcons.Common.Symbol.PlugDisconnected);
                userType.AddEnumValue("PointScan", global::FluentIcons.Common.Symbol.PointScan);
                userType.AddEnumValue("Poll", global::FluentIcons.Common.Symbol.Poll);
                userType.AddEnumValue("PollHorizontal", global::FluentIcons.Common.Symbol.PollHorizontal);
                userType.AddEnumValue("PollOff", global::FluentIcons.Common.Symbol.PollOff);
                userType.AddEnumValue("PortHdmi", global::FluentIcons.Common.Symbol.PortHdmi);
                userType.AddEnumValue("PortMicroUsb", global::FluentIcons.Common.Symbol.PortMicroUsb);
                userType.AddEnumValue("PortUsbA", global::FluentIcons.Common.Symbol.PortUsbA);
                userType.AddEnumValue("PortUsbC", global::FluentIcons.Common.Symbol.PortUsbC);
                userType.AddEnumValue("PositionBackward", global::FluentIcons.Common.Symbol.PositionBackward);
                userType.AddEnumValue("PositionForward", global::FluentIcons.Common.Symbol.PositionForward);
                userType.AddEnumValue("PositionToBack", global::FluentIcons.Common.Symbol.PositionToBack);
                userType.AddEnumValue("PositionToFront", global::FluentIcons.Common.Symbol.PositionToFront);
                userType.AddEnumValue("Power", global::FluentIcons.Common.Symbol.Power);
                userType.AddEnumValue("Predictions", global::FluentIcons.Common.Symbol.Predictions);
                userType.AddEnumValue("Premium", global::FluentIcons.Common.Symbol.Premium);
                userType.AddEnumValue("PremiumPerson", global::FluentIcons.Common.Symbol.PremiumPerson);
                userType.AddEnumValue("PresenceAvailable", global::FluentIcons.Common.Symbol.PresenceAvailable);
                userType.AddEnumValue("PresenceAway", global::FluentIcons.Common.Symbol.PresenceAway);
                userType.AddEnumValue("PresenceBlocked", global::FluentIcons.Common.Symbol.PresenceBlocked);
                userType.AddEnumValue("PresenceBusy", global::FluentIcons.Common.Symbol.PresenceBusy);
                userType.AddEnumValue("PresenceDnd", global::FluentIcons.Common.Symbol.PresenceDnd);
                userType.AddEnumValue("PresenceOffline", global::FluentIcons.Common.Symbol.PresenceOffline);
                userType.AddEnumValue("PresenceOof", global::FluentIcons.Common.Symbol.PresenceOof);
                userType.AddEnumValue("PresenceTentative", global::FluentIcons.Common.Symbol.PresenceTentative);
                userType.AddEnumValue("PresenceUnknown", global::FluentIcons.Common.Symbol.PresenceUnknown);
                userType.AddEnumValue("Presenter", global::FluentIcons.Common.Symbol.Presenter);
                userType.AddEnumValue("PresenterOff", global::FluentIcons.Common.Symbol.PresenterOff);
                userType.AddEnumValue("PreviewLink", global::FluentIcons.Common.Symbol.PreviewLink);
                userType.AddEnumValue("Previous", global::FluentIcons.Common.Symbol.Previous);
                userType.AddEnumValue("PreviousFrame", global::FluentIcons.Common.Symbol.PreviousFrame);
                userType.AddEnumValue("Print", global::FluentIcons.Common.Symbol.Print);
                userType.AddEnumValue("PrintAdd", global::FluentIcons.Common.Symbol.PrintAdd);
                userType.AddEnumValue("Production", global::FluentIcons.Common.Symbol.Production);
                userType.AddEnumValue("ProductionCheckmark", global::FluentIcons.Common.Symbol.ProductionCheckmark);
                userType.AddEnumValue("Prohibited", global::FluentIcons.Common.Symbol.Prohibited);
                userType.AddEnumValue("ProhibitedMultiple", global::FluentIcons.Common.Symbol.ProhibitedMultiple);
                userType.AddEnumValue("ProhibitedNote", global::FluentIcons.Common.Symbol.ProhibitedNote);
                userType.AddEnumValue("ProjectionScreen", global::FluentIcons.Common.Symbol.ProjectionScreen);
                userType.AddEnumValue("ProjectionScreenDismiss", global::FluentIcons.Common.Symbol.ProjectionScreenDismiss);
                userType.AddEnumValue("ProjectionScreenText", global::FluentIcons.Common.Symbol.ProjectionScreenText);
                userType.AddEnumValue("Prompt", global::FluentIcons.Common.Symbol.Prompt);
                userType.AddEnumValue("ProtocolHandler", global::FluentIcons.Common.Symbol.ProtocolHandler);
                userType.AddEnumValue("Pulse", global::FluentIcons.Common.Symbol.Pulse);
                userType.AddEnumValue("PulseSquare", global::FluentIcons.Common.Symbol.PulseSquare);
                userType.AddEnumValue("PuzzleCube", global::FluentIcons.Common.Symbol.PuzzleCube);
                userType.AddEnumValue("PuzzleCubePiece", global::FluentIcons.Common.Symbol.PuzzleCubePiece);
                userType.AddEnumValue("PuzzlePiece", global::FluentIcons.Common.Symbol.PuzzlePiece);
                userType.AddEnumValue("PuzzlePieceShield", global::FluentIcons.Common.Symbol.PuzzlePieceShield);
                userType.AddEnumValue("QrCode", global::FluentIcons.Common.Symbol.QrCode);
                userType.AddEnumValue("Question", global::FluentIcons.Common.Symbol.Question);
                userType.AddEnumValue("QuestionCircle", global::FluentIcons.Common.Symbol.QuestionCircle);
                userType.AddEnumValue("QuizNew", global::FluentIcons.Common.Symbol.QuizNew);
                userType.AddEnumValue("Radar", global::FluentIcons.Common.Symbol.Radar);
                userType.AddEnumValue("RadarCheckmark", global::FluentIcons.Common.Symbol.RadarCheckmark);
                userType.AddEnumValue("RadarRectangleMultiple", global::FluentIcons.Common.Symbol.RadarRectangleMultiple);
                userType.AddEnumValue("RadioButton", global::FluentIcons.Common.Symbol.RadioButton);
                userType.AddEnumValue("Ram", global::FluentIcons.Common.Symbol.Ram);
                userType.AddEnumValue("RatingMature", global::FluentIcons.Common.Symbol.RatingMature);
                userType.AddEnumValue("RatioOneToOne", global::FluentIcons.Common.Symbol.RatioOneToOne);
                userType.AddEnumValue("ReOrder", global::FluentIcons.Common.Symbol.ReOrder);
                userType.AddEnumValue("ReOrderDotsHorizontal", global::FluentIcons.Common.Symbol.ReOrderDotsHorizontal);
                userType.AddEnumValue("ReOrderDotsVertical", global::FluentIcons.Common.Symbol.ReOrderDotsVertical);
                userType.AddEnumValue("ReadAloud", global::FluentIcons.Common.Symbol.ReadAloud);
                userType.AddEnumValue("ReadingList", global::FluentIcons.Common.Symbol.ReadingList);
                userType.AddEnumValue("ReadingListAdd", global::FluentIcons.Common.Symbol.ReadingListAdd);
                userType.AddEnumValue("ReadingModeMobile", global::FluentIcons.Common.Symbol.ReadingModeMobile);
                userType.AddEnumValue("RealEstate", global::FluentIcons.Common.Symbol.RealEstate);
                userType.AddEnumValue("Receipt", global::FluentIcons.Common.Symbol.Receipt);
                userType.AddEnumValue("ReceiptAdd", global::FluentIcons.Common.Symbol.ReceiptAdd);
                userType.AddEnumValue("ReceiptBag", global::FluentIcons.Common.Symbol.ReceiptBag);
                userType.AddEnumValue("ReceiptCube", global::FluentIcons.Common.Symbol.ReceiptCube);
                userType.AddEnumValue("ReceiptMoney", global::FluentIcons.Common.Symbol.ReceiptMoney);
                userType.AddEnumValue("ReceiptPlay", global::FluentIcons.Common.Symbol.ReceiptPlay);
                userType.AddEnumValue("ReceiptSearch", global::FluentIcons.Common.Symbol.ReceiptSearch);
                userType.AddEnumValue("ReceiptSparkles", global::FluentIcons.Common.Symbol.ReceiptSparkles);
                userType.AddEnumValue("Record", global::FluentIcons.Common.Symbol.Record);
                userType.AddEnumValue("RecordStop", global::FluentIcons.Common.Symbol.RecordStop);
                userType.AddEnumValue("RectangleLandscape", global::FluentIcons.Common.Symbol.RectangleLandscape);
                userType.AddEnumValue("RectangleLandscapeHintCopy", global::FluentIcons.Common.Symbol.RectangleLandscapeHintCopy);
                userType.AddEnumValue("RectangleLandscapeSparkle", global::FluentIcons.Common.Symbol.RectangleLandscapeSparkle);
                userType.AddEnumValue("RectangleLandscapeSync", global::FluentIcons.Common.Symbol.RectangleLandscapeSync);
                userType.AddEnumValue("RectangleLandscapeSyncOff", global::FluentIcons.Common.Symbol.RectangleLandscapeSyncOff);
                userType.AddEnumValue("RectanglePortraitLocationTarget", global::FluentIcons.Common.Symbol.RectanglePortraitLocationTarget);
                userType.AddEnumValue("Recycle", global::FluentIcons.Common.Symbol.Recycle);
                userType.AddEnumValue("RemixAdd", global::FluentIcons.Common.Symbol.RemixAdd);
                userType.AddEnumValue("Remote", global::FluentIcons.Common.Symbol.Remote);
                userType.AddEnumValue("Rename", global::FluentIcons.Common.Symbol.Rename);
                userType.AddEnumValue("Reorder", global::FluentIcons.Common.Symbol.Reorder);
                userType.AddEnumValue("Replay", global::FluentIcons.Common.Symbol.Replay);
                userType.AddEnumValue("Resize", global::FluentIcons.Common.Symbol.Resize);
                userType.AddEnumValue("ResizeImage", global::FluentIcons.Common.Symbol.ResizeImage);
                userType.AddEnumValue("ResizeLarge", global::FluentIcons.Common.Symbol.ResizeLarge);
                userType.AddEnumValue("ResizeSmall", global::FluentIcons.Common.Symbol.ResizeSmall);
                userType.AddEnumValue("ResizeTable", global::FluentIcons.Common.Symbol.ResizeTable);
                userType.AddEnumValue("ResizeVideo", global::FluentIcons.Common.Symbol.ResizeVideo);
                userType.AddEnumValue("Reward", global::FluentIcons.Common.Symbol.Reward);
                userType.AddEnumValue("Rewind", global::FluentIcons.Common.Symbol.Rewind);
                userType.AddEnumValue("Rhombus", global::FluentIcons.Common.Symbol.Rhombus);
                userType.AddEnumValue("Ribbon", global::FluentIcons.Common.Symbol.Ribbon);
                userType.AddEnumValue("RibbonAdd", global::FluentIcons.Common.Symbol.RibbonAdd);
                userType.AddEnumValue("RibbonOff", global::FluentIcons.Common.Symbol.RibbonOff);
                userType.AddEnumValue("RibbonStar", global::FluentIcons.Common.Symbol.RibbonStar);
                userType.AddEnumValue("Road", global::FluentIcons.Common.Symbol.Road);
                userType.AddEnumValue("RoadCone", global::FluentIcons.Common.Symbol.RoadCone);
                userType.AddEnumValue("Rocket", global::FluentIcons.Common.Symbol.Rocket);
                userType.AddEnumValue("RotateLeft", global::FluentIcons.Common.Symbol.RotateLeft);
                userType.AddEnumValue("RotateRight", global::FluentIcons.Common.Symbol.RotateRight);
                userType.AddEnumValue("Router", global::FluentIcons.Common.Symbol.Router);
                userType.AddEnumValue("RowChild", global::FluentIcons.Common.Symbol.RowChild);
                userType.AddEnumValue("RowTriple", global::FluentIcons.Common.Symbol.RowTriple);
                userType.AddEnumValue("Rss", global::FluentIcons.Common.Symbol.Rss);
                userType.AddEnumValue("Ruler", global::FluentIcons.Common.Symbol.Ruler);
                userType.AddEnumValue("Run", global::FluentIcons.Common.Symbol.Run);
                userType.AddEnumValue("Sanitize", global::FluentIcons.Common.Symbol.Sanitize);
                userType.AddEnumValue("Save", global::FluentIcons.Common.Symbol.Save);
                userType.AddEnumValue("SaveArrowRight", global::FluentIcons.Common.Symbol.SaveArrowRight);
                userType.AddEnumValue("SaveCopy", global::FluentIcons.Common.Symbol.SaveCopy);
                userType.AddEnumValue("SaveEdit", global::FluentIcons.Common.Symbol.SaveEdit);
                userType.AddEnumValue("SaveImage", global::FluentIcons.Common.Symbol.SaveImage);
                userType.AddEnumValue("SaveMultiple", global::FluentIcons.Common.Symbol.SaveMultiple);
                userType.AddEnumValue("SaveSearch", global::FluentIcons.Common.Symbol.SaveSearch);
                userType.AddEnumValue("SaveSync", global::FluentIcons.Common.Symbol.SaveSync);
                userType.AddEnumValue("Savings", global::FluentIcons.Common.Symbol.Savings);
                userType.AddEnumValue("ScaleFill", global::FluentIcons.Common.Symbol.ScaleFill);
                userType.AddEnumValue("ScaleFit", global::FluentIcons.Common.Symbol.ScaleFit);
                userType.AddEnumValue("Scales", global::FluentIcons.Common.Symbol.Scales);
                userType.AddEnumValue("Scan", global::FluentIcons.Common.Symbol.Scan);
                userType.AddEnumValue("ScanCamera", global::FluentIcons.Common.Symbol.ScanCamera);
                userType.AddEnumValue("ScanDash", global::FluentIcons.Common.Symbol.ScanDash);
                userType.AddEnumValue("ScanObject", global::FluentIcons.Common.Symbol.ScanObject);
                userType.AddEnumValue("ScanPerson", global::FluentIcons.Common.Symbol.ScanPerson);
                userType.AddEnumValue("ScanTable", global::FluentIcons.Common.Symbol.ScanTable);
                userType.AddEnumValue("ScanText", global::FluentIcons.Common.Symbol.ScanText);
                userType.AddEnumValue("ScanThumbUp", global::FluentIcons.Common.Symbol.ScanThumbUp);
                userType.AddEnumValue("ScanThumbUpOff", global::FluentIcons.Common.Symbol.ScanThumbUpOff);
                userType.AddEnumValue("ScanType", global::FluentIcons.Common.Symbol.ScanType);
                userType.AddEnumValue("ScanTypeCheckmark", global::FluentIcons.Common.Symbol.ScanTypeCheckmark);
                userType.AddEnumValue("ScanTypeOff", global::FluentIcons.Common.Symbol.ScanTypeOff);
                userType.AddEnumValue("Scratchpad", global::FluentIcons.Common.Symbol.Scratchpad);
                userType.AddEnumValue("ScreenCut", global::FluentIcons.Common.Symbol.ScreenCut);
                userType.AddEnumValue("ScreenPerson", global::FluentIcons.Common.Symbol.ScreenPerson);
                userType.AddEnumValue("ScreenSearch", global::FluentIcons.Common.Symbol.ScreenSearch);
                userType.AddEnumValue("Screenshot", global::FluentIcons.Common.Symbol.Screenshot);
                userType.AddEnumValue("ScreenshotRecord", global::FluentIcons.Common.Symbol.ScreenshotRecord);
                userType.AddEnumValue("Script", global::FluentIcons.Common.Symbol.Script);
                userType.AddEnumValue("Search", global::FluentIcons.Common.Symbol.Search);
                userType.AddEnumValue("SearchInfo", global::FluentIcons.Common.Symbol.SearchInfo);
                userType.AddEnumValue("SearchSettings", global::FluentIcons.Common.Symbol.SearchSettings);
                userType.AddEnumValue("SearchShield", global::FluentIcons.Common.Symbol.SearchShield);
                userType.AddEnumValue("SearchSparkle", global::FluentIcons.Common.Symbol.SearchSparkle);
                userType.AddEnumValue("SearchSquare", global::FluentIcons.Common.Symbol.SearchSquare);
                userType.AddEnumValue("SearchVisual", global::FluentIcons.Common.Symbol.SearchVisual);
                userType.AddEnumValue("Seat", global::FluentIcons.Common.Symbol.Seat);
                userType.AddEnumValue("SeatAdd", global::FluentIcons.Common.Symbol.SeatAdd);
                userType.AddEnumValue("SelectAllOff", global::FluentIcons.Common.Symbol.SelectAllOff);
                userType.AddEnumValue("SelectAllOn", global::FluentIcons.Common.Symbol.SelectAllOn);
                userType.AddEnumValue("SelectObject", global::FluentIcons.Common.Symbol.SelectObject);
                userType.AddEnumValue("SelectObjectSkew", global::FluentIcons.Common.Symbol.SelectObjectSkew);
                userType.AddEnumValue("SelectObjectSkewDismiss", global::FluentIcons.Common.Symbol.SelectObjectSkewDismiss);
                userType.AddEnumValue("SelectObjectSkewEdit", global::FluentIcons.Common.Symbol.SelectObjectSkewEdit);
                userType.AddEnumValue("Send", global::FluentIcons.Common.Symbol.Send);
                userType.AddEnumValue("SendBeaker", global::FluentIcons.Common.Symbol.SendBeaker);
                userType.AddEnumValue("SendClock", global::FluentIcons.Common.Symbol.SendClock);
                userType.AddEnumValue("SendCopy", global::FluentIcons.Common.Symbol.SendCopy);
                userType.AddEnumValue("SendPerson", global::FluentIcons.Common.Symbol.SendPerson);
                userType.AddEnumValue("SerialPort", global::FluentIcons.Common.Symbol.SerialPort);
                userType.AddEnumValue("Server", global::FluentIcons.Common.Symbol.Server);
                userType.AddEnumValue("ServerLink", global::FluentIcons.Common.Symbol.ServerLink);
                userType.AddEnumValue("ServerMultiple", global::FluentIcons.Common.Symbol.ServerMultiple);
                userType.AddEnumValue("ServerPlay", global::FluentIcons.Common.Symbol.ServerPlay);
                userType.AddEnumValue("ServiceBell", global::FluentIcons.Common.Symbol.ServiceBell);
                userType.AddEnumValue("Settings", global::FluentIcons.Common.Symbol.Settings);
                userType.AddEnumValue("SettingsChat", global::FluentIcons.Common.Symbol.SettingsChat);
                userType.AddEnumValue("SettingsCogMultiple", global::FluentIcons.Common.Symbol.SettingsCogMultiple);
                userType.AddEnumValue("ShapeExclude", global::FluentIcons.Common.Symbol.ShapeExclude);
                userType.AddEnumValue("ShapeIntersect", global::FluentIcons.Common.Symbol.ShapeIntersect);
                userType.AddEnumValue("ShapeOrganic", global::FluentIcons.Common.Symbol.ShapeOrganic);
                userType.AddEnumValue("ShapeSubtract", global::FluentIcons.Common.Symbol.ShapeSubtract);
                userType.AddEnumValue("ShapeUnion", global::FluentIcons.Common.Symbol.ShapeUnion);
                userType.AddEnumValue("Shapes", global::FluentIcons.Common.Symbol.Shapes);
                userType.AddEnumValue("Share", global::FluentIcons.Common.Symbol.Share);
                userType.AddEnumValue("ShareAndroid", global::FluentIcons.Common.Symbol.ShareAndroid);
                userType.AddEnumValue("ShareCloseTray", global::FluentIcons.Common.Symbol.ShareCloseTray);
                userType.AddEnumValue("ShareIos", global::FluentIcons.Common.Symbol.ShareIos);
                userType.AddEnumValue("ShareMultiple", global::FluentIcons.Common.Symbol.ShareMultiple);
                userType.AddEnumValue("ShareScreenPerson", global::FluentIcons.Common.Symbol.ShareScreenPerson);
                userType.AddEnumValue("ShareScreenPersonOverlay", global::FluentIcons.Common.Symbol.ShareScreenPersonOverlay);
                userType.AddEnumValue("ShareScreenPersonOverlayInside", global::FluentIcons.Common.Symbol.ShareScreenPersonOverlayInside);
                userType.AddEnumValue("ShareScreenPersonP", global::FluentIcons.Common.Symbol.ShareScreenPersonP);
                userType.AddEnumValue("ShareScreenStart", global::FluentIcons.Common.Symbol.ShareScreenStart);
                userType.AddEnumValue("ShareScreenStop", global::FluentIcons.Common.Symbol.ShareScreenStop);
                userType.AddEnumValue("Shield", global::FluentIcons.Common.Symbol.Shield);
                userType.AddEnumValue("ShieldAdd", global::FluentIcons.Common.Symbol.ShieldAdd);
                userType.AddEnumValue("ShieldBadge", global::FluentIcons.Common.Symbol.ShieldBadge);
                userType.AddEnumValue("ShieldCheckmark", global::FluentIcons.Common.Symbol.ShieldCheckmark);
                userType.AddEnumValue("ShieldDismiss", global::FluentIcons.Common.Symbol.ShieldDismiss);
                userType.AddEnumValue("ShieldDismissShield", global::FluentIcons.Common.Symbol.ShieldDismissShield);
                userType.AddEnumValue("ShieldError", global::FluentIcons.Common.Symbol.ShieldError);
                userType.AddEnumValue("ShieldGlobe", global::FluentIcons.Common.Symbol.ShieldGlobe);
                userType.AddEnumValue("ShieldKeyhole", global::FluentIcons.Common.Symbol.ShieldKeyhole);
                userType.AddEnumValue("ShieldLock", global::FluentIcons.Common.Symbol.ShieldLock);
                userType.AddEnumValue("ShieldPerson", global::FluentIcons.Common.Symbol.ShieldPerson);
                userType.AddEnumValue("ShieldPersonAdd", global::FluentIcons.Common.Symbol.ShieldPersonAdd);
                userType.AddEnumValue("ShieldProhibited", global::FluentIcons.Common.Symbol.ShieldProhibited);
                userType.AddEnumValue("ShieldQuestion", global::FluentIcons.Common.Symbol.ShieldQuestion);
                userType.AddEnumValue("ShieldTask", global::FluentIcons.Common.Symbol.ShieldTask);
                userType.AddEnumValue("Shifts", global::FluentIcons.Common.Symbol.Shifts);
                userType.AddEnumValue("Shifts30Minutes", global::FluentIcons.Common.Symbol.Shifts30Minutes);
                userType.AddEnumValue("ShiftsActivity", global::FluentIcons.Common.Symbol.ShiftsActivity);
                userType.AddEnumValue("ShiftsAdd", global::FluentIcons.Common.Symbol.ShiftsAdd);
                userType.AddEnumValue("ShiftsAvailability", global::FluentIcons.Common.Symbol.ShiftsAvailability);
                userType.AddEnumValue("ShiftsCheckmark", global::FluentIcons.Common.Symbol.ShiftsCheckmark);
                userType.AddEnumValue("ShiftsDay", global::FluentIcons.Common.Symbol.ShiftsDay);
                userType.AddEnumValue("ShiftsOpen", global::FluentIcons.Common.Symbol.ShiftsOpen);
                userType.AddEnumValue("ShiftsProhibited", global::FluentIcons.Common.Symbol.ShiftsProhibited);
                userType.AddEnumValue("ShiftsQuestionMark", global::FluentIcons.Common.Symbol.ShiftsQuestionMark);
                userType.AddEnumValue("ShiftsTeam", global::FluentIcons.Common.Symbol.ShiftsTeam);
                userType.AddEnumValue("ShoppingBag", global::FluentIcons.Common.Symbol.ShoppingBag);
                userType.AddEnumValue("ShoppingBagAdd", global::FluentIcons.Common.Symbol.ShoppingBagAdd);
                userType.AddEnumValue("ShoppingBagArrowLeft", global::FluentIcons.Common.Symbol.ShoppingBagArrowLeft);
                userType.AddEnumValue("ShoppingBagDismiss", global::FluentIcons.Common.Symbol.ShoppingBagDismiss);
                userType.AddEnumValue("ShoppingBagPause", global::FluentIcons.Common.Symbol.ShoppingBagPause);
                userType.AddEnumValue("ShoppingBagPercent", global::FluentIcons.Common.Symbol.ShoppingBagPercent);
                userType.AddEnumValue("ShoppingBagPlay", global::FluentIcons.Common.Symbol.ShoppingBagPlay);
                userType.AddEnumValue("ShoppingBagTag", global::FluentIcons.Common.Symbol.ShoppingBagTag);
                userType.AddEnumValue("Shortpick", global::FluentIcons.Common.Symbol.Shortpick);
                userType.AddEnumValue("Showerhead", global::FluentIcons.Common.Symbol.Showerhead);
                userType.AddEnumValue("SidebarSearch", global::FluentIcons.Common.Symbol.SidebarSearch);
                userType.AddEnumValue("SignOut", global::FluentIcons.Common.Symbol.SignOut);
                userType.AddEnumValue("Signature", global::FluentIcons.Common.Symbol.Signature);
                userType.AddEnumValue("Sim", global::FluentIcons.Common.Symbol.Sim);
                userType.AddEnumValue("SkipBack10", global::FluentIcons.Common.Symbol.SkipBack10);
                userType.AddEnumValue("SkipForward10", global::FluentIcons.Common.Symbol.SkipForward10);
                userType.AddEnumValue("SkipForward30", global::FluentIcons.Common.Symbol.SkipForward30);
                userType.AddEnumValue("SkipForwardTab", global::FluentIcons.Common.Symbol.SkipForwardTab);
                userType.AddEnumValue("SlashForward", global::FluentIcons.Common.Symbol.SlashForward);
                userType.AddEnumValue("Sleep", global::FluentIcons.Common.Symbol.Sleep);
                userType.AddEnumValue("SlideAdd", global::FluentIcons.Common.Symbol.SlideAdd);
                userType.AddEnumValue("SlideArrowRight", global::FluentIcons.Common.Symbol.SlideArrowRight);
                userType.AddEnumValue("SlideEraser", global::FluentIcons.Common.Symbol.SlideEraser);
                userType.AddEnumValue("SlideGrid", global::FluentIcons.Common.Symbol.SlideGrid);
                userType.AddEnumValue("SlideHide", global::FluentIcons.Common.Symbol.SlideHide);
                userType.AddEnumValue("SlideLayout", global::FluentIcons.Common.Symbol.SlideLayout);
                userType.AddEnumValue("SlideLink", global::FluentIcons.Common.Symbol.SlideLink);
                userType.AddEnumValue("SlideMicrophone", global::FluentIcons.Common.Symbol.SlideMicrophone);
                userType.AddEnumValue("SlideMultiple", global::FluentIcons.Common.Symbol.SlideMultiple);
                userType.AddEnumValue("SlideMultipleArrowRight", global::FluentIcons.Common.Symbol.SlideMultipleArrowRight);
                userType.AddEnumValue("SlideMultipleSearch", global::FluentIcons.Common.Symbol.SlideMultipleSearch);
                userType.AddEnumValue("SlidePlay", global::FluentIcons.Common.Symbol.SlidePlay);
                userType.AddEnumValue("SlideRecord", global::FluentIcons.Common.Symbol.SlideRecord);
                userType.AddEnumValue("SlideSearch", global::FluentIcons.Common.Symbol.SlideSearch);
                userType.AddEnumValue("SlideSettings", global::FluentIcons.Common.Symbol.SlideSettings);
                userType.AddEnumValue("SlideSize", global::FluentIcons.Common.Symbol.SlideSize);
                userType.AddEnumValue("SlideText", global::FluentIcons.Common.Symbol.SlideText);
                userType.AddEnumValue("SlideTextCall", global::FluentIcons.Common.Symbol.SlideTextCall);
                userType.AddEnumValue("SlideTextCursor", global::FluentIcons.Common.Symbol.SlideTextCursor);
                userType.AddEnumValue("SlideTextEdit", global::FluentIcons.Common.Symbol.SlideTextEdit);
                userType.AddEnumValue("SlideTextMultiple", global::FluentIcons.Common.Symbol.SlideTextMultiple);
                userType.AddEnumValue("SlideTextPerson", global::FluentIcons.Common.Symbol.SlideTextPerson);
                userType.AddEnumValue("SlideTextSparkle", global::FluentIcons.Common.Symbol.SlideTextSparkle);
                userType.AddEnumValue("SlideTransition", global::FluentIcons.Common.Symbol.SlideTransition);
                userType.AddEnumValue("Smartwatch", global::FluentIcons.Common.Symbol.Smartwatch);
                userType.AddEnumValue("SmartwatchDot", global::FluentIcons.Common.Symbol.SmartwatchDot);
                userType.AddEnumValue("Snooze", global::FluentIcons.Common.Symbol.Snooze);
                userType.AddEnumValue("SoundSource", global::FluentIcons.Common.Symbol.SoundSource);
                userType.AddEnumValue("SoundWaveCircle", global::FluentIcons.Common.Symbol.SoundWaveCircle);
                userType.AddEnumValue("SoundWaveCircleSparkle", global::FluentIcons.Common.Symbol.SoundWaveCircleSparkle);
                userType.AddEnumValue("Space3d", global::FluentIcons.Common.Symbol.Space3d);
                userType.AddEnumValue("Spacebar", global::FluentIcons.Common.Symbol.Spacebar);
                userType.AddEnumValue("Sparkle", global::FluentIcons.Common.Symbol.Sparkle);
                userType.AddEnumValue("SparkleCircle", global::FluentIcons.Common.Symbol.SparkleCircle);
                userType.AddEnumValue("SpatulaSpoon", global::FluentIcons.Common.Symbol.SpatulaSpoon);
                userType.AddEnumValue("Speaker0", global::FluentIcons.Common.Symbol.Speaker0);
                userType.AddEnumValue("Speaker1", global::FluentIcons.Common.Symbol.Speaker1);
                userType.AddEnumValue("Speaker2", global::FluentIcons.Common.Symbol.Speaker2);
                userType.AddEnumValue("SpeakerBluetooth", global::FluentIcons.Common.Symbol.SpeakerBluetooth);
                userType.AddEnumValue("SpeakerBox", global::FluentIcons.Common.Symbol.SpeakerBox);
                userType.AddEnumValue("SpeakerEdit", global::FluentIcons.Common.Symbol.SpeakerEdit);
                userType.AddEnumValue("SpeakerMute", global::FluentIcons.Common.Symbol.SpeakerMute);
                userType.AddEnumValue("SpeakerOff", global::FluentIcons.Common.Symbol.SpeakerOff);
                userType.AddEnumValue("SpeakerSettings", global::FluentIcons.Common.Symbol.SpeakerSettings);
                userType.AddEnumValue("SpeakerUsb", global::FluentIcons.Common.Symbol.SpeakerUsb);
                userType.AddEnumValue("SpinnerIos", global::FluentIcons.Common.Symbol.SpinnerIos);
                userType.AddEnumValue("SplitHint", global::FluentIcons.Common.Symbol.SplitHint);
                userType.AddEnumValue("SplitHorizontal", global::FluentIcons.Common.Symbol.SplitHorizontal);
                userType.AddEnumValue("SplitVertical", global::FluentIcons.Common.Symbol.SplitVertical);
                userType.AddEnumValue("Sport", global::FluentIcons.Common.Symbol.Sport);
                userType.AddEnumValue("SportAmericanFootball", global::FluentIcons.Common.Symbol.SportAmericanFootball);
                userType.AddEnumValue("SportBaseball", global::FluentIcons.Common.Symbol.SportBaseball);
                userType.AddEnumValue("SportBasketball", global::FluentIcons.Common.Symbol.SportBasketball);
                userType.AddEnumValue("SportHockey", global::FluentIcons.Common.Symbol.SportHockey);
                userType.AddEnumValue("SportSoccer", global::FluentIcons.Common.Symbol.SportSoccer);
                userType.AddEnumValue("Square", global::FluentIcons.Common.Symbol.Square);
                userType.AddEnumValue("SquareAdd", global::FluentIcons.Common.Symbol.SquareAdd);
                userType.AddEnumValue("SquareArrowForward", global::FluentIcons.Common.Symbol.SquareArrowForward);
                userType.AddEnumValue("SquareDismiss", global::FluentIcons.Common.Symbol.SquareDismiss);
                userType.AddEnumValue("SquareDovetailJoint", global::FluentIcons.Common.Symbol.SquareDovetailJoint);
                userType.AddEnumValue("SquareEraser", global::FluentIcons.Common.Symbol.SquareEraser);
                userType.AddEnumValue("SquareHint", global::FluentIcons.Common.Symbol.SquareHint);
                userType.AddEnumValue("SquareHintApps", global::FluentIcons.Common.Symbol.SquareHintApps);
                userType.AddEnumValue("SquareHintArrowBack", global::FluentIcons.Common.Symbol.SquareHintArrowBack);
                userType.AddEnumValue("SquareHintHexagon", global::FluentIcons.Common.Symbol.SquareHintHexagon);
                userType.AddEnumValue("SquareHintSparkles", global::FluentIcons.Common.Symbol.SquareHintSparkles);
                userType.AddEnumValue("SquareMultiple", global::FluentIcons.Common.Symbol.SquareMultiple);
                userType.AddEnumValue("SquareShadow", global::FluentIcons.Common.Symbol.SquareShadow);
                userType.AddEnumValue("SquareTextArrowRepeatAll", global::FluentIcons.Common.Symbol.SquareTextArrowRepeatAll);
                userType.AddEnumValue("SquaresNested", global::FluentIcons.Common.Symbol.SquaresNested);
                userType.AddEnumValue("Stack", global::FluentIcons.Common.Symbol.Stack);
                userType.AddEnumValue("StackAdd", global::FluentIcons.Common.Symbol.StackAdd);
                userType.AddEnumValue("StackArrowForward", global::FluentIcons.Common.Symbol.StackArrowForward);
                userType.AddEnumValue("StackOff", global::FluentIcons.Common.Symbol.StackOff);
                userType.AddEnumValue("StackStar", global::FluentIcons.Common.Symbol.StackStar);
                userType.AddEnumValue("StackVertical", global::FluentIcons.Common.Symbol.StackVertical);
                userType.AddEnumValue("Stamp", global::FluentIcons.Common.Symbol.Stamp);
                userType.AddEnumValue("Star", global::FluentIcons.Common.Symbol.Star);
                userType.AddEnumValue("StarAdd", global::FluentIcons.Common.Symbol.StarAdd);
                userType.AddEnumValue("StarArrowBack", global::FluentIcons.Common.Symbol.StarArrowBack);
                userType.AddEnumValue("StarArrowRight", global::FluentIcons.Common.Symbol.StarArrowRight);
                userType.AddEnumValue("StarArrowRightEnd", global::FluentIcons.Common.Symbol.StarArrowRightEnd);
                userType.AddEnumValue("StarArrowRightStart", global::FluentIcons.Common.Symbol.StarArrowRightStart);
                userType.AddEnumValue("StarCheckmark", global::FluentIcons.Common.Symbol.StarCheckmark);
                userType.AddEnumValue("StarDismiss", global::FluentIcons.Common.Symbol.StarDismiss);
                userType.AddEnumValue("StarEdit", global::FluentIcons.Common.Symbol.StarEdit);
                userType.AddEnumValue("StarEmphasis", global::FluentIcons.Common.Symbol.StarEmphasis);
                userType.AddEnumValue("StarHalf", global::FluentIcons.Common.Symbol.StarHalf);
                userType.AddEnumValue("StarLineHorizontal3", global::FluentIcons.Common.Symbol.StarLineHorizontal3);
                userType.AddEnumValue("StarOff", global::FluentIcons.Common.Symbol.StarOff);
                userType.AddEnumValue("StarOneQuarter", global::FluentIcons.Common.Symbol.StarOneQuarter);
                userType.AddEnumValue("StarProhibited", global::FluentIcons.Common.Symbol.StarProhibited);
                userType.AddEnumValue("StarSettings", global::FluentIcons.Common.Symbol.StarSettings);
                userType.AddEnumValue("StarThreeQuarter", global::FluentIcons.Common.Symbol.StarThreeQuarter);
                userType.AddEnumValue("Status", global::FluentIcons.Common.Symbol.Status);
                userType.AddEnumValue("Step", global::FluentIcons.Common.Symbol.Step);
                userType.AddEnumValue("Steps", global::FluentIcons.Common.Symbol.Steps);
                userType.AddEnumValue("Stethoscope", global::FluentIcons.Common.Symbol.Stethoscope);
                userType.AddEnumValue("Sticker", global::FluentIcons.Common.Symbol.Sticker);
                userType.AddEnumValue("StickerAdd", global::FluentIcons.Common.Symbol.StickerAdd);
                userType.AddEnumValue("Stop", global::FluentIcons.Common.Symbol.Stop);
                userType.AddEnumValue("Storage", global::FluentIcons.Common.Symbol.Storage);
                userType.AddEnumValue("StoreMicrosoft", global::FluentIcons.Common.Symbol.StoreMicrosoft);
                userType.AddEnumValue("Stream", global::FluentIcons.Common.Symbol.Stream);
                userType.AddEnumValue("StreamInput", global::FluentIcons.Common.Symbol.StreamInput);
                userType.AddEnumValue("StreamInputOutput", global::FluentIcons.Common.Symbol.StreamInputOutput);
                userType.AddEnumValue("StreamOutput", global::FluentIcons.Common.Symbol.StreamOutput);
                userType.AddEnumValue("StreetSign", global::FluentIcons.Common.Symbol.StreetSign);
                userType.AddEnumValue("StyleGuide", global::FluentIcons.Common.Symbol.StyleGuide);
                userType.AddEnumValue("SubGrid", global::FluentIcons.Common.Symbol.SubGrid);
                userType.AddEnumValue("Subtitles", global::FluentIcons.Common.Symbol.Subtitles);
                userType.AddEnumValue("Subtract", global::FluentIcons.Common.Symbol.Subtract);
                userType.AddEnumValue("SubtractCircle", global::FluentIcons.Common.Symbol.SubtractCircle);
                userType.AddEnumValue("SubtractCircleArrowBack", global::FluentIcons.Common.Symbol.SubtractCircleArrowBack);
                userType.AddEnumValue("SubtractCircleArrowForward", global::FluentIcons.Common.Symbol.SubtractCircleArrowForward);
                userType.AddEnumValue("SubtractParentheses", global::FluentIcons.Common.Symbol.SubtractParentheses);
                userType.AddEnumValue("SubtractSquare", global::FluentIcons.Common.Symbol.SubtractSquare);
                userType.AddEnumValue("SubtractSquareMultiple", global::FluentIcons.Common.Symbol.SubtractSquareMultiple);
                userType.AddEnumValue("SurfaceEarbuds", global::FluentIcons.Common.Symbol.SurfaceEarbuds);
                userType.AddEnumValue("SurfaceHub", global::FluentIcons.Common.Symbol.SurfaceHub);
                userType.AddEnumValue("SwimmingPool", global::FluentIcons.Common.Symbol.SwimmingPool);
                userType.AddEnumValue("SwipeDown", global::FluentIcons.Common.Symbol.SwipeDown);
                userType.AddEnumValue("SwipeRight", global::FluentIcons.Common.Symbol.SwipeRight);
                userType.AddEnumValue("SwipeUp", global::FluentIcons.Common.Symbol.SwipeUp);
                userType.AddEnumValue("Symbols", global::FluentIcons.Common.Symbol.Symbols);
                userType.AddEnumValue("SyncOff", global::FluentIcons.Common.Symbol.SyncOff);
                userType.AddEnumValue("Syringe", global::FluentIcons.Common.Symbol.Syringe);
                userType.AddEnumValue("System", global::FluentIcons.Common.Symbol.System);
                userType.AddEnumValue("Tab", global::FluentIcons.Common.Symbol.Tab);
                userType.AddEnumValue("TabAdd", global::FluentIcons.Common.Symbol.TabAdd);
                userType.AddEnumValue("TabArrowLeft", global::FluentIcons.Common.Symbol.TabArrowLeft);
                userType.AddEnumValue("TabDesktop", global::FluentIcons.Common.Symbol.TabDesktop);
                userType.AddEnumValue("TabDesktopArrowClockwise", global::FluentIcons.Common.Symbol.TabDesktopArrowClockwise);
                userType.AddEnumValue("TabDesktopArrowLeft", global::FluentIcons.Common.Symbol.TabDesktopArrowLeft);
                userType.AddEnumValue("TabDesktopBottom", global::FluentIcons.Common.Symbol.TabDesktopBottom);
                userType.AddEnumValue("TabDesktopClock", global::FluentIcons.Common.Symbol.TabDesktopClock);
                userType.AddEnumValue("TabDesktopCopy", global::FluentIcons.Common.Symbol.TabDesktopCopy);
                userType.AddEnumValue("TabDesktopImage", global::FluentIcons.Common.Symbol.TabDesktopImage);
                userType.AddEnumValue("TabDesktopLink", global::FluentIcons.Common.Symbol.TabDesktopLink);
                userType.AddEnumValue("TabDesktopMultiple", global::FluentIcons.Common.Symbol.TabDesktopMultiple);
                userType.AddEnumValue("TabDesktopMultipleAdd", global::FluentIcons.Common.Symbol.TabDesktopMultipleAdd);
                userType.AddEnumValue("TabDesktopMultipleBottom", global::FluentIcons.Common.Symbol.TabDesktopMultipleBottom);
                userType.AddEnumValue("TabDesktopMultipleSparkle", global::FluentIcons.Common.Symbol.TabDesktopMultipleSparkle);
                userType.AddEnumValue("TabDesktopNewPage", global::FluentIcons.Common.Symbol.TabDesktopNewPage);
                userType.AddEnumValue("TabDesktopSearch", global::FluentIcons.Common.Symbol.TabDesktopSearch);
                userType.AddEnumValue("TabGroup", global::FluentIcons.Common.Symbol.TabGroup);
                userType.AddEnumValue("TabInPrivate", global::FluentIcons.Common.Symbol.TabInPrivate);
                userType.AddEnumValue("TabInprivateAccount", global::FluentIcons.Common.Symbol.TabInprivateAccount);
                userType.AddEnumValue("TabProhibited", global::FluentIcons.Common.Symbol.TabProhibited);
                userType.AddEnumValue("TabShieldDismiss", global::FluentIcons.Common.Symbol.TabShieldDismiss);
                userType.AddEnumValue("Table", global::FluentIcons.Common.Symbol.Table);
                userType.AddEnumValue("TableAdd", global::FluentIcons.Common.Symbol.TableAdd);
                userType.AddEnumValue("TableArrowUp", global::FluentIcons.Common.Symbol.TableArrowUp);
                userType.AddEnumValue("TableBottomRow", global::FluentIcons.Common.Symbol.TableBottomRow);
                userType.AddEnumValue("TableCalculator", global::FluentIcons.Common.Symbol.TableCalculator);
                userType.AddEnumValue("TableCellEdit", global::FluentIcons.Common.Symbol.TableCellEdit);
                userType.AddEnumValue("TableCellsMerge", global::FluentIcons.Common.Symbol.TableCellsMerge);
                userType.AddEnumValue("TableCellsSplit", global::FluentIcons.Common.Symbol.TableCellsSplit);
                userType.AddEnumValue("TableChecker", global::FluentIcons.Common.Symbol.TableChecker);
                userType.AddEnumValue("TableColumnTopBottom", global::FluentIcons.Common.Symbol.TableColumnTopBottom);
                userType.AddEnumValue("TableCopy", global::FluentIcons.Common.Symbol.TableCopy);
                userType.AddEnumValue("TableCursor", global::FluentIcons.Common.Symbol.TableCursor);
                userType.AddEnumValue("TableDeleteColumn", global::FluentIcons.Common.Symbol.TableDeleteColumn);
                userType.AddEnumValue("TableDeleteRow", global::FluentIcons.Common.Symbol.TableDeleteRow);
                userType.AddEnumValue("TableDismiss", global::FluentIcons.Common.Symbol.TableDismiss);
                userType.AddEnumValue("TableEdit", global::FluentIcons.Common.Symbol.TableEdit);
                userType.AddEnumValue("TableFreezeColumn", global::FluentIcons.Common.Symbol.TableFreezeColumn);
                userType.AddEnumValue("TableFreezeColumnAndRow", global::FluentIcons.Common.Symbol.TableFreezeColumnAndRow);
                userType.AddEnumValue("TableFreezeRow", global::FluentIcons.Common.Symbol.TableFreezeRow);
                userType.AddEnumValue("TableImage", global::FluentIcons.Common.Symbol.TableImage);
                userType.AddEnumValue("TableInsertColumn", global::FluentIcons.Common.Symbol.TableInsertColumn);
                userType.AddEnumValue("TableInsertRow", global::FluentIcons.Common.Symbol.TableInsertRow);
                userType.AddEnumValue("TableLightning", global::FluentIcons.Common.Symbol.TableLightning);
                userType.AddEnumValue("TableLink", global::FluentIcons.Common.Symbol.TableLink);
                userType.AddEnumValue("TableLock", global::FluentIcons.Common.Symbol.TableLock);
                userType.AddEnumValue("TableMoveAbove", global::FluentIcons.Common.Symbol.TableMoveAbove);
                userType.AddEnumValue("TableMoveBelow", global::FluentIcons.Common.Symbol.TableMoveBelow);
                userType.AddEnumValue("TableMoveLeft", global::FluentIcons.Common.Symbol.TableMoveLeft);
                userType.AddEnumValue("TableMoveRight", global::FluentIcons.Common.Symbol.TableMoveRight);
                userType.AddEnumValue("TableMultiple", global::FluentIcons.Common.Symbol.TableMultiple);
                userType.AddEnumValue("TableOffset", global::FluentIcons.Common.Symbol.TableOffset);
                userType.AddEnumValue("TableOffsetAdd", global::FluentIcons.Common.Symbol.TableOffsetAdd);
                userType.AddEnumValue("TableOffsetLessThanOrEqualTo", global::FluentIcons.Common.Symbol.TableOffsetLessThanOrEqualTo);
                userType.AddEnumValue("TableOffsetSettings", global::FluentIcons.Common.Symbol.TableOffsetSettings);
                userType.AddEnumValue("TableResizeColumn", global::FluentIcons.Common.Symbol.TableResizeColumn);
                userType.AddEnumValue("TableResizeRow", global::FluentIcons.Common.Symbol.TableResizeRow);
                userType.AddEnumValue("TableSearch", global::FluentIcons.Common.Symbol.TableSearch);
                userType.AddEnumValue("TableSettings", global::FluentIcons.Common.Symbol.TableSettings);
                userType.AddEnumValue("TableSimple", global::FluentIcons.Common.Symbol.TableSimple);
                userType.AddEnumValue("TableSimpleCheckmark", global::FluentIcons.Common.Symbol.TableSimpleCheckmark);
                userType.AddEnumValue("TableSimpleExclude", global::FluentIcons.Common.Symbol.TableSimpleExclude);
                userType.AddEnumValue("TableSimpleInclude", global::FluentIcons.Common.Symbol.TableSimpleInclude);
                userType.AddEnumValue("TableSimpleMultiple", global::FluentIcons.Common.Symbol.TableSimpleMultiple);
                userType.AddEnumValue("TableSparkle", global::FluentIcons.Common.Symbol.TableSparkle);
                userType.AddEnumValue("TableSplit", global::FluentIcons.Common.Symbol.TableSplit);
                userType.AddEnumValue("TableStackAbove", global::FluentIcons.Common.Symbol.TableStackAbove);
                userType.AddEnumValue("TableStackBelow", global::FluentIcons.Common.Symbol.TableStackBelow);
                userType.AddEnumValue("TableStackLeft", global::FluentIcons.Common.Symbol.TableStackLeft);
                userType.AddEnumValue("TableStackRight", global::FluentIcons.Common.Symbol.TableStackRight);
                userType.AddEnumValue("TableSwitch", global::FluentIcons.Common.Symbol.TableSwitch);
                userType.AddEnumValue("Tablet", global::FluentIcons.Common.Symbol.Tablet);
                userType.AddEnumValue("TabletLaptop", global::FluentIcons.Common.Symbol.TabletLaptop);
                userType.AddEnumValue("TabletSpeaker", global::FluentIcons.Common.Symbol.TabletSpeaker);
                userType.AddEnumValue("Tabs", global::FluentIcons.Common.Symbol.Tabs);
                userType.AddEnumValue("Tag", global::FluentIcons.Common.Symbol.Tag);
                userType.AddEnumValue("TagCircle", global::FluentIcons.Common.Symbol.TagCircle);
                userType.AddEnumValue("TagDismiss", global::FluentIcons.Common.Symbol.TagDismiss);
                userType.AddEnumValue("TagError", global::FluentIcons.Common.Symbol.TagError);
                userType.AddEnumValue("TagLock", global::FluentIcons.Common.Symbol.TagLock);
                userType.AddEnumValue("TagLockAccent", global::FluentIcons.Common.Symbol.TagLockAccent);
                userType.AddEnumValue("TagMultiple", global::FluentIcons.Common.Symbol.TagMultiple);
                userType.AddEnumValue("TagOff", global::FluentIcons.Common.Symbol.TagOff);
                userType.AddEnumValue("TagQuestionMark", global::FluentIcons.Common.Symbol.TagQuestionMark);
                userType.AddEnumValue("TagReset", global::FluentIcons.Common.Symbol.TagReset);
                userType.AddEnumValue("TagSearch", global::FluentIcons.Common.Symbol.TagSearch);
                userType.AddEnumValue("TapDouble", global::FluentIcons.Common.Symbol.TapDouble);
                userType.AddEnumValue("TapSingle", global::FluentIcons.Common.Symbol.TapSingle);
                userType.AddEnumValue("Target", global::FluentIcons.Common.Symbol.Target);
                userType.AddEnumValue("TargetAdd", global::FluentIcons.Common.Symbol.TargetAdd);
                userType.AddEnumValue("TargetArrow", global::FluentIcons.Common.Symbol.TargetArrow);
                userType.AddEnumValue("TargetDismiss", global::FluentIcons.Common.Symbol.TargetDismiss);
                userType.AddEnumValue("TargetEdit", global::FluentIcons.Common.Symbol.TargetEdit);
                userType.AddEnumValue("TaskList", global::FluentIcons.Common.Symbol.TaskList);
                userType.AddEnumValue("TaskListAdd", global::FluentIcons.Common.Symbol.TaskListAdd);
                userType.AddEnumValue("TaskListSquare", global::FluentIcons.Common.Symbol.TaskListSquare);
                userType.AddEnumValue("TaskListSquareAdd", global::FluentIcons.Common.Symbol.TaskListSquareAdd);
                userType.AddEnumValue("TaskListSquareDatabase", global::FluentIcons.Common.Symbol.TaskListSquareDatabase);
                userType.AddEnumValue("TaskListSquarePerson", global::FluentIcons.Common.Symbol.TaskListSquarePerson);
                userType.AddEnumValue("TaskListSquareSettings", global::FluentIcons.Common.Symbol.TaskListSquareSettings);
                userType.AddEnumValue("TasksApp", global::FluentIcons.Common.Symbol.TasksApp);
                userType.AddEnumValue("Teaching", global::FluentIcons.Common.Symbol.Teaching);
                userType.AddEnumValue("TeardropBottomRight", global::FluentIcons.Common.Symbol.TeardropBottomRight);
                userType.AddEnumValue("Teddy", global::FluentIcons.Common.Symbol.Teddy);
                userType.AddEnumValue("Temperature", global::FluentIcons.Common.Symbol.Temperature);
                userType.AddEnumValue("Tent", global::FluentIcons.Common.Symbol.Tent);
                userType.AddEnumValue("TetrisApp", global::FluentIcons.Common.Symbol.TetrisApp);
                userType.AddEnumValue("Text", global::FluentIcons.Common.Symbol.Text);
                userType.AddEnumValue("TextAdd", global::FluentIcons.Common.Symbol.TextAdd);
                userType.AddEnumValue("TextAddSpaceAfter", global::FluentIcons.Common.Symbol.TextAddSpaceAfter);
                userType.AddEnumValue("TextAddSpaceBefore", global::FluentIcons.Common.Symbol.TextAddSpaceBefore);
                userType.AddEnumValue("TextAddT", global::FluentIcons.Common.Symbol.TextAddT);
                userType.AddEnumValue("TextAlignCenter", global::FluentIcons.Common.Symbol.TextAlignCenter);
                userType.AddEnumValue("TextAlignCenterRotate270", global::FluentIcons.Common.Symbol.TextAlignCenterRotate270);
                userType.AddEnumValue("TextAlignCenterRotate90", global::FluentIcons.Common.Symbol.TextAlignCenterRotate90);
                userType.AddEnumValue("TextAlignDistributed", global::FluentIcons.Common.Symbol.TextAlignDistributed);
                userType.AddEnumValue("TextAlignDistributedEvenly", global::FluentIcons.Common.Symbol.TextAlignDistributedEvenly);
                userType.AddEnumValue("TextAlignDistributedVertical", global::FluentIcons.Common.Symbol.TextAlignDistributedVertical);
                userType.AddEnumValue("TextAlignJustify", global::FluentIcons.Common.Symbol.TextAlignJustify);
                userType.AddEnumValue("TextAlignJustifyLow", global::FluentIcons.Common.Symbol.TextAlignJustifyLow);
                userType.AddEnumValue("TextAlignJustifyLowRotate270", global::FluentIcons.Common.Symbol.TextAlignJustifyLowRotate270);
                userType.AddEnumValue("TextAlignJustifyLowRotate90", global::FluentIcons.Common.Symbol.TextAlignJustifyLowRotate90);
                userType.AddEnumValue("TextAlignJustifyRotate270", global::FluentIcons.Common.Symbol.TextAlignJustifyRotate270);
                userType.AddEnumValue("TextAlignJustifyRotate90", global::FluentIcons.Common.Symbol.TextAlignJustifyRotate90);
                userType.AddEnumValue("TextAlignLeft", global::FluentIcons.Common.Symbol.TextAlignLeft);
                userType.AddEnumValue("TextAlignLeftRotate270", global::FluentIcons.Common.Symbol.TextAlignLeftRotate270);
                userType.AddEnumValue("TextAlignLeftRotate90", global::FluentIcons.Common.Symbol.TextAlignLeftRotate90);
                userType.AddEnumValue("TextAlignRight", global::FluentIcons.Common.Symbol.TextAlignRight);
                userType.AddEnumValue("TextAlignRightRotate270", global::FluentIcons.Common.Symbol.TextAlignRightRotate270);
                userType.AddEnumValue("TextAlignRightRotate90", global::FluentIcons.Common.Symbol.TextAlignRightRotate90);
                userType.AddEnumValue("TextArrowDownRightColumn", global::FluentIcons.Common.Symbol.TextArrowDownRightColumn);
                userType.AddEnumValue("TextAsterisk", global::FluentIcons.Common.Symbol.TextAsterisk);
                userType.AddEnumValue("TextBaseline", global::FluentIcons.Common.Symbol.TextBaseline);
                userType.AddEnumValue("TextBold", global::FluentIcons.Common.Symbol.TextBold);
                userType.AddEnumValue("TextBoxSettings", global::FluentIcons.Common.Symbol.TextBoxSettings);
                userType.AddEnumValue("TextBulletList", global::FluentIcons.Common.Symbol.TextBulletList);
                userType.AddEnumValue("TextBulletListAdd", global::FluentIcons.Common.Symbol.TextBulletListAdd);
                userType.AddEnumValue("TextBulletListCheckmark", global::FluentIcons.Common.Symbol.TextBulletListCheckmark);
                userType.AddEnumValue("TextBulletListDismiss", global::FluentIcons.Common.Symbol.TextBulletListDismiss);
                userType.AddEnumValue("TextBulletListRotate90", global::FluentIcons.Common.Symbol.TextBulletListRotate90);
                userType.AddEnumValue("TextBulletListSquare", global::FluentIcons.Common.Symbol.TextBulletListSquare);
                userType.AddEnumValue("TextBulletListSquareClock", global::FluentIcons.Common.Symbol.TextBulletListSquareClock);
                userType.AddEnumValue("TextBulletListSquareEdit", global::FluentIcons.Common.Symbol.TextBulletListSquareEdit);
                userType.AddEnumValue("TextBulletListSquarePerson", global::FluentIcons.Common.Symbol.TextBulletListSquarePerson);
                userType.AddEnumValue("TextBulletListSquareSearch", global::FluentIcons.Common.Symbol.TextBulletListSquareSearch);
                userType.AddEnumValue("TextBulletListSquareSettings", global::FluentIcons.Common.Symbol.TextBulletListSquareSettings);
                userType.AddEnumValue("TextBulletListSquareShield", global::FluentIcons.Common.Symbol.TextBulletListSquareShield);
                userType.AddEnumValue("TextBulletListSquareSparkle", global::FluentIcons.Common.Symbol.TextBulletListSquareSparkle);
                userType.AddEnumValue("TextBulletListSquareToolbox", global::FluentIcons.Common.Symbol.TextBulletListSquareToolbox);
                userType.AddEnumValue("TextBulletListSquareWarning", global::FluentIcons.Common.Symbol.TextBulletListSquareWarning);
                userType.AddEnumValue("TextBulletListTree", global::FluentIcons.Common.Symbol.TextBulletListTree);
                userType.AddEnumValue("TextCaseLowercase", global::FluentIcons.Common.Symbol.TextCaseLowercase);
                userType.AddEnumValue("TextCaseTitle", global::FluentIcons.Common.Symbol.TextCaseTitle);
                userType.AddEnumValue("TextCaseUppercase", global::FluentIcons.Common.Symbol.TextCaseUppercase);
                userType.AddEnumValue("TextChangeCase", global::FluentIcons.Common.Symbol.TextChangeCase);
                userType.AddEnumValue("TextClearFormatting", global::FluentIcons.Common.Symbol.TextClearFormatting);
                userType.AddEnumValue("TextCollapse", global::FluentIcons.Common.Symbol.TextCollapse);
                userType.AddEnumValue("TextColor", global::FluentIcons.Common.Symbol.TextColor);
                userType.AddEnumValue("TextColorAccent", global::FluentIcons.Common.Symbol.TextColorAccent);
                userType.AddEnumValue("TextColumnOne", global::FluentIcons.Common.Symbol.TextColumnOne);
                userType.AddEnumValue("TextColumnOneNarrow", global::FluentIcons.Common.Symbol.TextColumnOneNarrow);
                userType.AddEnumValue("TextColumnOneSemiNarrow", global::FluentIcons.Common.Symbol.TextColumnOneSemiNarrow);
                userType.AddEnumValue("TextColumnOneWide", global::FluentIcons.Common.Symbol.TextColumnOneWide);
                userType.AddEnumValue("TextColumnOneWideLightning", global::FluentIcons.Common.Symbol.TextColumnOneWideLightning);
                userType.AddEnumValue("TextColumnThree", global::FluentIcons.Common.Symbol.TextColumnThree);
                userType.AddEnumValue("TextColumnTwo", global::FluentIcons.Common.Symbol.TextColumnTwo);
                userType.AddEnumValue("TextColumnTwoLeft", global::FluentIcons.Common.Symbol.TextColumnTwoLeft);
                userType.AddEnumValue("TextColumnTwoRight", global::FluentIcons.Common.Symbol.TextColumnTwoRight);
                userType.AddEnumValue("TextColumnWide", global::FluentIcons.Common.Symbol.TextColumnWide);
                userType.AddEnumValue("TextContinuous", global::FluentIcons.Common.Symbol.TextContinuous);
                userType.AddEnumValue("TextDensity", global::FluentIcons.Common.Symbol.TextDensity);
                userType.AddEnumValue("TextDescription", global::FluentIcons.Common.Symbol.TextDescription);
                userType.AddEnumValue("TextDirectionHorizontal", global::FluentIcons.Common.Symbol.TextDirectionHorizontal);
                userType.AddEnumValue("TextDirectionHorizontalLeft", global::FluentIcons.Common.Symbol.TextDirectionHorizontalLeft);
                userType.AddEnumValue("TextDirectionHorizontalRight", global::FluentIcons.Common.Symbol.TextDirectionHorizontalRight);
                userType.AddEnumValue("TextDirectionRotate270Right", global::FluentIcons.Common.Symbol.TextDirectionRotate270Right);
                userType.AddEnumValue("TextDirectionRotate315Right", global::FluentIcons.Common.Symbol.TextDirectionRotate315Right);
                userType.AddEnumValue("TextDirectionRotate45Right", global::FluentIcons.Common.Symbol.TextDirectionRotate45Right);
                userType.AddEnumValue("TextDirectionRotate90", global::FluentIcons.Common.Symbol.TextDirectionRotate90);
                userType.AddEnumValue("TextDirectionRotate90Left", global::FluentIcons.Common.Symbol.TextDirectionRotate90Left);
                userType.AddEnumValue("TextDirectionRotate90Right", global::FluentIcons.Common.Symbol.TextDirectionRotate90Right);
                userType.AddEnumValue("TextDirectionVertical", global::FluentIcons.Common.Symbol.TextDirectionVertical);
                userType.AddEnumValue("TextEditStyle", global::FluentIcons.Common.Symbol.TextEditStyle);
                userType.AddEnumValue("TextEffects", global::FluentIcons.Common.Symbol.TextEffects);
                userType.AddEnumValue("TextEffectsSparkle", global::FluentIcons.Common.Symbol.TextEffectsSparkle);
                userType.AddEnumValue("TextExpand", global::FluentIcons.Common.Symbol.TextExpand);
                userType.AddEnumValue("TextField", global::FluentIcons.Common.Symbol.TextField);
                userType.AddEnumValue("TextFirstLine", global::FluentIcons.Common.Symbol.TextFirstLine);
                userType.AddEnumValue("TextFont", global::FluentIcons.Common.Symbol.TextFont);
                userType.AddEnumValue("TextFontInfo", global::FluentIcons.Common.Symbol.TextFontInfo);
                userType.AddEnumValue("TextFontSize", global::FluentIcons.Common.Symbol.TextFontSize);
                userType.AddEnumValue("TextFootnote", global::FluentIcons.Common.Symbol.TextFootnote);
                userType.AddEnumValue("TextGrammarArrowLeft", global::FluentIcons.Common.Symbol.TextGrammarArrowLeft);
                userType.AddEnumValue("TextGrammarArrowRight", global::FluentIcons.Common.Symbol.TextGrammarArrowRight);
                userType.AddEnumValue("TextGrammarCheckmark", global::FluentIcons.Common.Symbol.TextGrammarCheckmark);
                userType.AddEnumValue("TextGrammarDismiss", global::FluentIcons.Common.Symbol.TextGrammarDismiss);
                userType.AddEnumValue("TextGrammarError", global::FluentIcons.Common.Symbol.TextGrammarError);
                userType.AddEnumValue("TextGrammarLightning", global::FluentIcons.Common.Symbol.TextGrammarLightning);
                userType.AddEnumValue("TextGrammarSettings", global::FluentIcons.Common.Symbol.TextGrammarSettings);
                userType.AddEnumValue("TextGrammarWand", global::FluentIcons.Common.Symbol.TextGrammarWand);
                userType.AddEnumValue("TextHanging", global::FluentIcons.Common.Symbol.TextHanging);
                userType.AddEnumValue("TextHeader1", global::FluentIcons.Common.Symbol.TextHeader1);
                userType.AddEnumValue("TextHeader1Lines", global::FluentIcons.Common.Symbol.TextHeader1Lines);
                userType.AddEnumValue("TextHeader1LinesCaret", global::FluentIcons.Common.Symbol.TextHeader1LinesCaret);
                userType.AddEnumValue("TextHeader2", global::FluentIcons.Common.Symbol.TextHeader2);
                userType.AddEnumValue("TextHeader2Lines", global::FluentIcons.Common.Symbol.TextHeader2Lines);
                userType.AddEnumValue("TextHeader2LinesCaret", global::FluentIcons.Common.Symbol.TextHeader2LinesCaret);
                userType.AddEnumValue("TextHeader3", global::FluentIcons.Common.Symbol.TextHeader3);
                userType.AddEnumValue("TextHeader3Lines", global::FluentIcons.Common.Symbol.TextHeader3Lines);
                userType.AddEnumValue("TextHeader3LinesCaret", global::FluentIcons.Common.Symbol.TextHeader3LinesCaret);
                userType.AddEnumValue("TextIndentDecrease", global::FluentIcons.Common.Symbol.TextIndentDecrease);
                userType.AddEnumValue("TextIndentDecreaseRotate270", global::FluentIcons.Common.Symbol.TextIndentDecreaseRotate270);
                userType.AddEnumValue("TextIndentDecreaseRotate90", global::FluentIcons.Common.Symbol.TextIndentDecreaseRotate90);
                userType.AddEnumValue("TextIndentIncrease", global::FluentIcons.Common.Symbol.TextIndentIncrease);
                userType.AddEnumValue("TextIndentIncreaseRotate270", global::FluentIcons.Common.Symbol.TextIndentIncreaseRotate270);
                userType.AddEnumValue("TextIndentIncreaseRotate90", global::FluentIcons.Common.Symbol.TextIndentIncreaseRotate90);
                userType.AddEnumValue("TextItalic", global::FluentIcons.Common.Symbol.TextItalic);
                userType.AddEnumValue("TextLineSpacing", global::FluentIcons.Common.Symbol.TextLineSpacing);
                userType.AddEnumValue("TextMore", global::FluentIcons.Common.Symbol.TextMore);
                userType.AddEnumValue("TextNumberFormat", global::FluentIcons.Common.Symbol.TextNumberFormat);
                userType.AddEnumValue("TextNumberList", global::FluentIcons.Common.Symbol.TextNumberList);
                userType.AddEnumValue("TextNumberListRotate270", global::FluentIcons.Common.Symbol.TextNumberListRotate270);
                userType.AddEnumValue("TextNumberListRotate90", global::FluentIcons.Common.Symbol.TextNumberListRotate90);
                userType.AddEnumValue("TextParagraph", global::FluentIcons.Common.Symbol.TextParagraph);
                userType.AddEnumValue("TextParagraphDirection", global::FluentIcons.Common.Symbol.TextParagraphDirection);
                userType.AddEnumValue("TextParagraphDirectionLeft", global::FluentIcons.Common.Symbol.TextParagraphDirectionLeft);
                userType.AddEnumValue("TextParagraphDirectionRight", global::FluentIcons.Common.Symbol.TextParagraphDirectionRight);
                userType.AddEnumValue("TextPeriodAsterisk", global::FluentIcons.Common.Symbol.TextPeriodAsterisk);
                userType.AddEnumValue("TextPositionBehind", global::FluentIcons.Common.Symbol.TextPositionBehind);
                userType.AddEnumValue("TextPositionFront", global::FluentIcons.Common.Symbol.TextPositionFront);
                userType.AddEnumValue("TextPositionLine", global::FluentIcons.Common.Symbol.TextPositionLine);
                userType.AddEnumValue("TextPositionSquare", global::FluentIcons.Common.Symbol.TextPositionSquare);
                userType.AddEnumValue("TextPositionSquareLeft", global::FluentIcons.Common.Symbol.TextPositionSquareLeft);
                userType.AddEnumValue("TextPositionSquareRight", global::FluentIcons.Common.Symbol.TextPositionSquareRight);
                userType.AddEnumValue("TextPositionThrough", global::FluentIcons.Common.Symbol.TextPositionThrough);
                userType.AddEnumValue("TextPositionTight", global::FluentIcons.Common.Symbol.TextPositionTight);
                userType.AddEnumValue("TextPositionTopBottom", global::FluentIcons.Common.Symbol.TextPositionTopBottom);
                userType.AddEnumValue("TextProofingTools", global::FluentIcons.Common.Symbol.TextProofingTools);
                userType.AddEnumValue("TextQuote", global::FluentIcons.Common.Symbol.TextQuote);
                userType.AddEnumValue("TextSortAscending", global::FluentIcons.Common.Symbol.TextSortAscending);
                userType.AddEnumValue("TextSortDescending", global::FluentIcons.Common.Symbol.TextSortDescending);
                userType.AddEnumValue("TextStrikethrough", global::FluentIcons.Common.Symbol.TextStrikethrough);
                userType.AddEnumValue("TextSubscript", global::FluentIcons.Common.Symbol.TextSubscript);
                userType.AddEnumValue("TextSuperscript", global::FluentIcons.Common.Symbol.TextSuperscript);
                userType.AddEnumValue("TextT", global::FluentIcons.Common.Symbol.TextT);
                userType.AddEnumValue("TextUnderline", global::FluentIcons.Common.Symbol.TextUnderline);
                userType.AddEnumValue("TextUnderlineCharacterU", global::FluentIcons.Common.Symbol.TextUnderlineCharacterU);
                userType.AddEnumValue("TextUnderlineDouble", global::FluentIcons.Common.Symbol.TextUnderlineDouble);
                userType.AddEnumValue("TextWholeWord", global::FluentIcons.Common.Symbol.TextWholeWord);
                userType.AddEnumValue("TextWordCount", global::FluentIcons.Common.Symbol.TextWordCount);
                userType.AddEnumValue("TextWrap", global::FluentIcons.Common.Symbol.TextWrap);
                userType.AddEnumValue("TextWrapOff", global::FluentIcons.Common.Symbol.TextWrapOff);
                userType.AddEnumValue("Textbox", global::FluentIcons.Common.Symbol.Textbox);
                userType.AddEnumValue("TextboxAlignBottom", global::FluentIcons.Common.Symbol.TextboxAlignBottom);
                userType.AddEnumValue("TextboxAlignBottomCenter", global::FluentIcons.Common.Symbol.TextboxAlignBottomCenter);
                userType.AddEnumValue("TextboxAlignBottomLeft", global::FluentIcons.Common.Symbol.TextboxAlignBottomLeft);
                userType.AddEnumValue("TextboxAlignBottomRight", global::FluentIcons.Common.Symbol.TextboxAlignBottomRight);
                userType.AddEnumValue("TextboxAlignBottomRotate90", global::FluentIcons.Common.Symbol.TextboxAlignBottomRotate90);
                userType.AddEnumValue("TextboxAlignCenter", global::FluentIcons.Common.Symbol.TextboxAlignCenter);
                userType.AddEnumValue("TextboxAlignMiddle", global::FluentIcons.Common.Symbol.TextboxAlignMiddle);
                userType.AddEnumValue("TextboxAlignMiddleLeft", global::FluentIcons.Common.Symbol.TextboxAlignMiddleLeft);
                userType.AddEnumValue("TextboxAlignMiddleRight", global::FluentIcons.Common.Symbol.TextboxAlignMiddleRight);
                userType.AddEnumValue("TextboxAlignMiddleRotate90", global::FluentIcons.Common.Symbol.TextboxAlignMiddleRotate90);
                userType.AddEnumValue("TextboxAlignTop", global::FluentIcons.Common.Symbol.TextboxAlignTop);
                userType.AddEnumValue("TextboxAlignTopCenter", global::FluentIcons.Common.Symbol.TextboxAlignTopCenter);
                userType.AddEnumValue("TextboxAlignTopLeft", global::FluentIcons.Common.Symbol.TextboxAlignTopLeft);
                userType.AddEnumValue("TextboxAlignTopRight", global::FluentIcons.Common.Symbol.TextboxAlignTopRight);
                userType.AddEnumValue("TextboxAlignTopRotate90", global::FluentIcons.Common.Symbol.TextboxAlignTopRotate90);
                userType.AddEnumValue("TextboxCheckmark", global::FluentIcons.Common.Symbol.TextboxCheckmark);
                userType.AddEnumValue("TextboxMore", global::FluentIcons.Common.Symbol.TextboxMore);
                userType.AddEnumValue("TextboxRotate90", global::FluentIcons.Common.Symbol.TextboxRotate90);
                userType.AddEnumValue("TextboxSettings", global::FluentIcons.Common.Symbol.TextboxSettings);
                userType.AddEnumValue("Thinking", global::FluentIcons.Common.Symbol.Thinking);
                userType.AddEnumValue("ThumbDislike", global::FluentIcons.Common.Symbol.ThumbDislike);
                userType.AddEnumValue("ThumbLike", global::FluentIcons.Common.Symbol.ThumbLike);
                userType.AddEnumValue("ThumbLikeDislike", global::FluentIcons.Common.Symbol.ThumbLikeDislike);
                userType.AddEnumValue("TicketDiagonal", global::FluentIcons.Common.Symbol.TicketDiagonal);
                userType.AddEnumValue("TicketHorizontal", global::FluentIcons.Common.Symbol.TicketHorizontal);
                userType.AddEnumValue("TimeAndWeather", global::FluentIcons.Common.Symbol.TimeAndWeather);
                userType.AddEnumValue("TimePicker", global::FluentIcons.Common.Symbol.TimePicker);
                userType.AddEnumValue("Timeline", global::FluentIcons.Common.Symbol.Timeline);
                userType.AddEnumValue("Timer", global::FluentIcons.Common.Symbol.Timer);
                userType.AddEnumValue("Timer10", global::FluentIcons.Common.Symbol.Timer10);
                userType.AddEnumValue("Timer2", global::FluentIcons.Common.Symbol.Timer2);
                userType.AddEnumValue("Timer3", global::FluentIcons.Common.Symbol.Timer3);
                userType.AddEnumValue("TimerOff", global::FluentIcons.Common.Symbol.TimerOff);
                userType.AddEnumValue("ToggleLeft", global::FluentIcons.Common.Symbol.ToggleLeft);
                userType.AddEnumValue("ToggleMultiple", global::FluentIcons.Common.Symbol.ToggleMultiple);
                userType.AddEnumValue("ToggleRight", global::FluentIcons.Common.Symbol.ToggleRight);
                userType.AddEnumValue("Toolbox", global::FluentIcons.Common.Symbol.Toolbox);
                userType.AddEnumValue("TooltipQuote", global::FluentIcons.Common.Symbol.TooltipQuote);
                userType.AddEnumValue("TopSpeed", global::FluentIcons.Common.Symbol.TopSpeed);
                userType.AddEnumValue("Translate", global::FluentIcons.Common.Symbol.Translate);
                userType.AddEnumValue("TranslateAuto", global::FluentIcons.Common.Symbol.TranslateAuto);
                userType.AddEnumValue("TranslateOff", global::FluentIcons.Common.Symbol.TranslateOff);
                userType.AddEnumValue("Transmission", global::FluentIcons.Common.Symbol.Transmission);
                userType.AddEnumValue("TransparencySquare", global::FluentIcons.Common.Symbol.TransparencySquare);
                userType.AddEnumValue("TrayItemAdd", global::FluentIcons.Common.Symbol.TrayItemAdd);
                userType.AddEnumValue("TrayItemRemove", global::FluentIcons.Common.Symbol.TrayItemRemove);
                userType.AddEnumValue("TreeDeciduous", global::FluentIcons.Common.Symbol.TreeDeciduous);
                userType.AddEnumValue("TreeEvergreen", global::FluentIcons.Common.Symbol.TreeEvergreen);
                userType.AddEnumValue("Triangle", global::FluentIcons.Common.Symbol.Triangle);
                userType.AddEnumValue("TriangleDown", global::FluentIcons.Common.Symbol.TriangleDown);
                userType.AddEnumValue("TriangleLeft", global::FluentIcons.Common.Symbol.TriangleLeft);
                userType.AddEnumValue("TriangleRight", global::FluentIcons.Common.Symbol.TriangleRight);
                userType.AddEnumValue("TriangleUp", global::FluentIcons.Common.Symbol.TriangleUp);
                userType.AddEnumValue("Trophy", global::FluentIcons.Common.Symbol.Trophy);
                userType.AddEnumValue("TrophyLock", global::FluentIcons.Common.Symbol.TrophyLock);
                userType.AddEnumValue("TrophyOff", global::FluentIcons.Common.Symbol.TrophyOff);
                userType.AddEnumValue("Tv", global::FluentIcons.Common.Symbol.Tv);
                userType.AddEnumValue("TvArrowRight", global::FluentIcons.Common.Symbol.TvArrowRight);
                userType.AddEnumValue("TvUsb", global::FluentIcons.Common.Symbol.TvUsb);
                userType.AddEnumValue("Umbrella", global::FluentIcons.Common.Symbol.Umbrella);
                userType.AddEnumValue("UninstallApp", global::FluentIcons.Common.Symbol.UninstallApp);
                userType.AddEnumValue("UsbPlug", global::FluentIcons.Common.Symbol.UsbPlug);
                userType.AddEnumValue("UsbStick", global::FluentIcons.Common.Symbol.UsbStick);
                userType.AddEnumValue("Vault", global::FluentIcons.Common.Symbol.Vault);
                userType.AddEnumValue("VehicleBicycle", global::FluentIcons.Common.Symbol.VehicleBicycle);
                userType.AddEnumValue("VehicleBus", global::FluentIcons.Common.Symbol.VehicleBus);
                userType.AddEnumValue("VehicleCab", global::FluentIcons.Common.Symbol.VehicleCab);
                userType.AddEnumValue("VehicleCableCar", global::FluentIcons.Common.Symbol.VehicleCableCar);
                userType.AddEnumValue("VehicleCar", global::FluentIcons.Common.Symbol.VehicleCar);
                userType.AddEnumValue("VehicleCarCollision", global::FluentIcons.Common.Symbol.VehicleCarCollision);
                userType.AddEnumValue("VehicleCarParking", global::FluentIcons.Common.Symbol.VehicleCarParking);
                userType.AddEnumValue("VehicleCarProfile", global::FluentIcons.Common.Symbol.VehicleCarProfile);
                userType.AddEnumValue("VehicleCarProfileClock", global::FluentIcons.Common.Symbol.VehicleCarProfileClock);
                userType.AddEnumValue("VehicleMotorcycle", global::FluentIcons.Common.Symbol.VehicleMotorcycle);
                userType.AddEnumValue("VehicleShip", global::FluentIcons.Common.Symbol.VehicleShip);
                userType.AddEnumValue("VehicleSubway", global::FluentIcons.Common.Symbol.VehicleSubway);
                userType.AddEnumValue("VehicleSubwayClock", global::FluentIcons.Common.Symbol.VehicleSubwayClock);
                userType.AddEnumValue("VehicleTractor", global::FluentIcons.Common.Symbol.VehicleTractor);
                userType.AddEnumValue("VehicleTruck", global::FluentIcons.Common.Symbol.VehicleTruck);
                userType.AddEnumValue("VehicleTruckBag", global::FluentIcons.Common.Symbol.VehicleTruckBag);
                userType.AddEnumValue("VehicleTruckCube", global::FluentIcons.Common.Symbol.VehicleTruckCube);
                userType.AddEnumValue("VehicleTruckProfile", global::FluentIcons.Common.Symbol.VehicleTruckProfile);
                userType.AddEnumValue("Video", global::FluentIcons.Common.Symbol.Video);
                userType.AddEnumValue("Video360", global::FluentIcons.Common.Symbol.Video360);
                userType.AddEnumValue("Video360Off", global::FluentIcons.Common.Symbol.Video360Off);
                userType.AddEnumValue("VideoAdd", global::FluentIcons.Common.Symbol.VideoAdd);
                userType.AddEnumValue("VideoBackgroundEffect", global::FluentIcons.Common.Symbol.VideoBackgroundEffect);
                userType.AddEnumValue("VideoBackgroundEffectHorizontal", global::FluentIcons.Common.Symbol.VideoBackgroundEffectHorizontal);
                userType.AddEnumValue("VideoBluetooth", global::FluentIcons.Common.Symbol.VideoBluetooth);
                userType.AddEnumValue("VideoChat", global::FluentIcons.Common.Symbol.VideoChat);
                userType.AddEnumValue("VideoClip", global::FluentIcons.Common.Symbol.VideoClip);
                userType.AddEnumValue("VideoClipMultiple", global::FluentIcons.Common.Symbol.VideoClipMultiple);
                userType.AddEnumValue("VideoClipOff", global::FluentIcons.Common.Symbol.VideoClipOff);
                userType.AddEnumValue("VideoClipOptimize", global::FluentIcons.Common.Symbol.VideoClipOptimize);
                userType.AddEnumValue("VideoClipWand", global::FluentIcons.Common.Symbol.VideoClipWand);
                userType.AddEnumValue("VideoOff", global::FluentIcons.Common.Symbol.VideoOff);
                userType.AddEnumValue("VideoPerson", global::FluentIcons.Common.Symbol.VideoPerson);
                userType.AddEnumValue("VideoPersonCall", global::FluentIcons.Common.Symbol.VideoPersonCall);
                userType.AddEnumValue("VideoPersonClock", global::FluentIcons.Common.Symbol.VideoPersonClock);
                userType.AddEnumValue("VideoPersonOff", global::FluentIcons.Common.Symbol.VideoPersonOff);
                userType.AddEnumValue("VideoPersonPulse", global::FluentIcons.Common.Symbol.VideoPersonPulse);
                userType.AddEnumValue("VideoPersonSparkle", global::FluentIcons.Common.Symbol.VideoPersonSparkle);
                userType.AddEnumValue("VideoPersonSparkleOff", global::FluentIcons.Common.Symbol.VideoPersonSparkleOff);
                userType.AddEnumValue("VideoPersonStar", global::FluentIcons.Common.Symbol.VideoPersonStar);
                userType.AddEnumValue("VideoPersonStarOff", global::FluentIcons.Common.Symbol.VideoPersonStarOff);
                userType.AddEnumValue("VideoPlayPause", global::FluentIcons.Common.Symbol.VideoPlayPause);
                userType.AddEnumValue("VideoProhibited", global::FluentIcons.Common.Symbol.VideoProhibited);
                userType.AddEnumValue("VideoRecording", global::FluentIcons.Common.Symbol.VideoRecording);
                userType.AddEnumValue("VideoSecurity", global::FluentIcons.Common.Symbol.VideoSecurity);
                userType.AddEnumValue("VideoSwitch", global::FluentIcons.Common.Symbol.VideoSwitch);
                userType.AddEnumValue("VideoSync", global::FluentIcons.Common.Symbol.VideoSync);
                userType.AddEnumValue("VideoUsb", global::FluentIcons.Common.Symbol.VideoUsb);
                userType.AddEnumValue("ViewDesktop", global::FluentIcons.Common.Symbol.ViewDesktop);
                userType.AddEnumValue("ViewDesktopMobile", global::FluentIcons.Common.Symbol.ViewDesktopMobile);
                userType.AddEnumValue("VirtualNetwork", global::FluentIcons.Common.Symbol.VirtualNetwork);
                userType.AddEnumValue("VirtualNetworkToolbox", global::FluentIcons.Common.Symbol.VirtualNetworkToolbox);
                userType.AddEnumValue("Voicemail", global::FluentIcons.Common.Symbol.Voicemail);
                userType.AddEnumValue("VoicemailArrowBack", global::FluentIcons.Common.Symbol.VoicemailArrowBack);
                userType.AddEnumValue("VoicemailArrowForward", global::FluentIcons.Common.Symbol.VoicemailArrowForward);
                userType.AddEnumValue("VoicemailArrowSubtract", global::FluentIcons.Common.Symbol.VoicemailArrowSubtract);
                userType.AddEnumValue("VoicemailShield", global::FluentIcons.Common.Symbol.VoicemailShield);
                userType.AddEnumValue("VoicemailSubtract", global::FluentIcons.Common.Symbol.VoicemailSubtract);
                userType.AddEnumValue("Vote", global::FluentIcons.Common.Symbol.Vote);
                userType.AddEnumValue("WalkieTalkie", global::FluentIcons.Common.Symbol.WalkieTalkie);
                userType.AddEnumValue("Wallet", global::FluentIcons.Common.Symbol.Wallet);
                userType.AddEnumValue("WalletCreditCard", global::FluentIcons.Common.Symbol.WalletCreditCard);
                userType.AddEnumValue("Wallpaper", global::FluentIcons.Common.Symbol.Wallpaper);
                userType.AddEnumValue("Wand", global::FluentIcons.Common.Symbol.Wand);
                userType.AddEnumValue("Warning", global::FluentIcons.Common.Symbol.Warning);
                userType.AddEnumValue("WarningLockOpen", global::FluentIcons.Common.Symbol.WarningLockOpen);
                userType.AddEnumValue("WarningShield", global::FluentIcons.Common.Symbol.WarningShield);
                userType.AddEnumValue("Washer", global::FluentIcons.Common.Symbol.Washer);
                userType.AddEnumValue("Water", global::FluentIcons.Common.Symbol.Water);
                userType.AddEnumValue("WeatherBlowingSnow", global::FluentIcons.Common.Symbol.WeatherBlowingSnow);
                userType.AddEnumValue("WeatherCloudy", global::FluentIcons.Common.Symbol.WeatherCloudy);
                userType.AddEnumValue("WeatherDrizzle", global::FluentIcons.Common.Symbol.WeatherDrizzle);
                userType.AddEnumValue("WeatherDuststorm", global::FluentIcons.Common.Symbol.WeatherDuststorm);
                userType.AddEnumValue("WeatherFog", global::FluentIcons.Common.Symbol.WeatherFog);
                userType.AddEnumValue("WeatherHailDay", global::FluentIcons.Common.Symbol.WeatherHailDay);
                userType.AddEnumValue("WeatherHailNight", global::FluentIcons.Common.Symbol.WeatherHailNight);
                userType.AddEnumValue("WeatherHaze", global::FluentIcons.Common.Symbol.WeatherHaze);
                userType.AddEnumValue("WeatherMoon", global::FluentIcons.Common.Symbol.WeatherMoon);
                userType.AddEnumValue("WeatherMoonOff", global::FluentIcons.Common.Symbol.WeatherMoonOff);
                userType.AddEnumValue("WeatherPartlyCloudyDay", global::FluentIcons.Common.Symbol.WeatherPartlyCloudyDay);
                userType.AddEnumValue("WeatherPartlyCloudyNight", global::FluentIcons.Common.Symbol.WeatherPartlyCloudyNight);
                userType.AddEnumValue("WeatherRain", global::FluentIcons.Common.Symbol.WeatherRain);
                userType.AddEnumValue("WeatherRainShowersDay", global::FluentIcons.Common.Symbol.WeatherRainShowersDay);
                userType.AddEnumValue("WeatherRainShowersNight", global::FluentIcons.Common.Symbol.WeatherRainShowersNight);
                userType.AddEnumValue("WeatherRainSnow", global::FluentIcons.Common.Symbol.WeatherRainSnow);
                userType.AddEnumValue("WeatherSnow", global::FluentIcons.Common.Symbol.WeatherSnow);
                userType.AddEnumValue("WeatherSnowShowerDay", global::FluentIcons.Common.Symbol.WeatherSnowShowerDay);
                userType.AddEnumValue("WeatherSnowShowerNight", global::FluentIcons.Common.Symbol.WeatherSnowShowerNight);
                userType.AddEnumValue("WeatherSnowflake", global::FluentIcons.Common.Symbol.WeatherSnowflake);
                userType.AddEnumValue("WeatherSqualls", global::FluentIcons.Common.Symbol.WeatherSqualls);
                userType.AddEnumValue("WeatherSunny", global::FluentIcons.Common.Symbol.WeatherSunny);
                userType.AddEnumValue("WeatherSunnyHigh", global::FluentIcons.Common.Symbol.WeatherSunnyHigh);
                userType.AddEnumValue("WeatherSunnyLow", global::FluentIcons.Common.Symbol.WeatherSunnyLow);
                userType.AddEnumValue("WeatherThunderstorm", global::FluentIcons.Common.Symbol.WeatherThunderstorm);
                userType.AddEnumValue("WebAsset", global::FluentIcons.Common.Symbol.WebAsset);
                userType.AddEnumValue("Whiteboard", global::FluentIcons.Common.Symbol.Whiteboard);
                userType.AddEnumValue("WhiteboardOff", global::FluentIcons.Common.Symbol.WhiteboardOff);
                userType.AddEnumValue("Wifi1", global::FluentIcons.Common.Symbol.Wifi1);
                userType.AddEnumValue("Wifi2", global::FluentIcons.Common.Symbol.Wifi2);
                userType.AddEnumValue("Wifi3", global::FluentIcons.Common.Symbol.Wifi3);
                userType.AddEnumValue("Wifi4", global::FluentIcons.Common.Symbol.Wifi4);
                userType.AddEnumValue("WifiLock", global::FluentIcons.Common.Symbol.WifiLock);
                userType.AddEnumValue("WifiOff", global::FluentIcons.Common.Symbol.WifiOff);
                userType.AddEnumValue("WifiSettings", global::FluentIcons.Common.Symbol.WifiSettings);
                userType.AddEnumValue("WifiWarning", global::FluentIcons.Common.Symbol.WifiWarning);
                userType.AddEnumValue("Window", global::FluentIcons.Common.Symbol.Window);
                userType.AddEnumValue("WindowAd", global::FluentIcons.Common.Symbol.WindowAd);
                userType.AddEnumValue("WindowAdOff", global::FluentIcons.Common.Symbol.WindowAdOff);
                userType.AddEnumValue("WindowAdPerson", global::FluentIcons.Common.Symbol.WindowAdPerson);
                userType.AddEnumValue("WindowApps", global::FluentIcons.Common.Symbol.WindowApps);
                userType.AddEnumValue("WindowArrowUp", global::FluentIcons.Common.Symbol.WindowArrowUp);
                userType.AddEnumValue("WindowBrush", global::FluentIcons.Common.Symbol.WindowBrush);
                userType.AddEnumValue("WindowBulletList", global::FluentIcons.Common.Symbol.WindowBulletList);
                userType.AddEnumValue("WindowBulletListAdd", global::FluentIcons.Common.Symbol.WindowBulletListAdd);
                userType.AddEnumValue("WindowColumnOneFourthLeft", global::FluentIcons.Common.Symbol.WindowColumnOneFourthLeft);
                userType.AddEnumValue("WindowColumnOneFourthLeftFocusLeft", global::FluentIcons.Common.Symbol.WindowColumnOneFourthLeftFocusLeft);
                userType.AddEnumValue("WindowColumnOneFourthLeftFocusTop", global::FluentIcons.Common.Symbol.WindowColumnOneFourthLeftFocusTop);
                userType.AddEnumValue("WindowConsole", global::FluentIcons.Common.Symbol.WindowConsole);
                userType.AddEnumValue("WindowDatabase", global::FluentIcons.Common.Symbol.WindowDatabase);
                userType.AddEnumValue("WindowDevEdit", global::FluentIcons.Common.Symbol.WindowDevEdit);
                userType.AddEnumValue("WindowDevTools", global::FluentIcons.Common.Symbol.WindowDevTools);
                userType.AddEnumValue("WindowEdit", global::FluentIcons.Common.Symbol.WindowEdit);
                userType.AddEnumValue("WindowFingerprint", global::FluentIcons.Common.Symbol.WindowFingerprint);
                userType.AddEnumValue("WindowHeaderHorizontal", global::FluentIcons.Common.Symbol.WindowHeaderHorizontal);
                userType.AddEnumValue("WindowHeaderHorizontalOff", global::FluentIcons.Common.Symbol.WindowHeaderHorizontalOff);
                userType.AddEnumValue("WindowHeaderVertical", global::FluentIcons.Common.Symbol.WindowHeaderVertical);
                userType.AddEnumValue("WindowInprivate", global::FluentIcons.Common.Symbol.WindowInprivate);
                userType.AddEnumValue("WindowInprivateAccount", global::FluentIcons.Common.Symbol.WindowInprivateAccount);
                userType.AddEnumValue("WindowLocationTarget", global::FluentIcons.Common.Symbol.WindowLocationTarget);
                userType.AddEnumValue("WindowMultiple", global::FluentIcons.Common.Symbol.WindowMultiple);
                userType.AddEnumValue("WindowMultipleSwap", global::FluentIcons.Common.Symbol.WindowMultipleSwap);
                userType.AddEnumValue("WindowNew", global::FluentIcons.Common.Symbol.WindowNew);
                userType.AddEnumValue("WindowPlay", global::FluentIcons.Common.Symbol.WindowPlay);
                userType.AddEnumValue("WindowSettings", global::FluentIcons.Common.Symbol.WindowSettings);
                userType.AddEnumValue("WindowShield", global::FluentIcons.Common.Symbol.WindowShield);
                userType.AddEnumValue("WindowText", global::FluentIcons.Common.Symbol.WindowText);
                userType.AddEnumValue("WindowWrench", global::FluentIcons.Common.Symbol.WindowWrench);
                userType.AddEnumValue("Wrench", global::FluentIcons.Common.Symbol.Wrench);
                userType.AddEnumValue("WrenchScrewdriver", global::FluentIcons.Common.Symbol.WrenchScrewdriver);
                userType.AddEnumValue("WrenchSettings", global::FluentIcons.Common.Symbol.WrenchSettings);
                userType.AddEnumValue("XboxConsole", global::FluentIcons.Common.Symbol.XboxConsole);
                userType.AddEnumValue("XboxController", global::FluentIcons.Common.Symbol.XboxController);
                userType.AddEnumValue("XboxControllerError", global::FluentIcons.Common.Symbol.XboxControllerError);
                userType.AddEnumValue("Xray", global::FluentIcons.Common.Symbol.Xray);
                userType.AddEnumValue("ZoomFit", global::FluentIcons.Common.Symbol.ZoomFit);
                userType.AddEnumValue("ZoomIn", global::FluentIcons.Common.Symbol.ZoomIn);
                userType.AddEnumValue("ZoomOut", global::FluentIcons.Common.Symbol.ZoomOut);
                xamlType = userType;
                break;

            case 7:   //  System.Enum
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_7_Enum;
                xamlType = userType;
                break;

            case 8:   //  System.ValueType
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_8_ValueType;
                xamlType = userType;
                break;

            case 9:   //  FluentIcons.Common.IconVariant
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_9_IconVariant;
                userType.AddEnumValue("Regular", global::FluentIcons.Common.IconVariant.Regular);
                userType.AddEnumValue("Filled", global::FluentIcons.Common.IconVariant.Filled);
                userType.AddEnumValue("Light", global::FluentIcons.Common.IconVariant.Light);
                xamlType = userType;
                break;

            case 10:   //  MinecraftMods.Controls.IconButton
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_10_IconButton;
                userType.StaticInitializer = StaticInitializer_10_IconButton;
                userType.AddMemberName("Text");
                userType.AddMemberName("Icon");
                userType.AddMemberName("Command");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  String
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  CommunityToolkit.Mvvm.Input.IRelayCommand
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_13_IRelayCommand;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  WinUIEx.WindowEx
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_14_WindowEx;
                userType.StaticInitializer = StaticInitializer_14_WindowEx;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.AddMemberName("WindowContent");
                userType.AddMemberName("Title");
                userType.AddMemberName("AppWindow");
                userType.AddMemberName("TaskBarIcon");
                userType.AddMemberName("PersistenceId");
                userType.AddMemberName("IsTitleBarVisible");
                userType.AddMemberName("IsMinimizable");
                userType.AddMemberName("IsMaximizable");
                userType.AddMemberName("IsResizable");
                userType.AddMemberName("WindowState");
                userType.AddMemberName("IsShownInSwitchers");
                userType.AddMemberName("IsAlwaysOnTop");
                userType.AddMemberName("Presenter");
                userType.AddMemberName("PresenterKind");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("MinHeight");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("MaxHeight");
                userType.AddMemberName("Backdrop");
                xamlType = userType;
                break;

            case 15:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Microsoft.UI.Windowing.AppWindow
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_16_AppWindow;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  WinUIEx.Icon
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_17_Icon;
                userType.CreateFromStringMethod = global::WinUIEx.Icon.FromFile;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  WinUIEx.WindowState
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_18_WindowState;
                userType.AddEnumValue("Normal", global::WinUIEx.WindowState.Normal);
                userType.AddEnumValue("Minimized", global::WinUIEx.WindowState.Minimized);
                userType.AddEnumValue("Maximized", global::WinUIEx.WindowState.Maximized);
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Windowing.AppWindowPresenter
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_19_AppWindowPresenter;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  Microsoft.UI.Windowing.AppWindowPresenterKind
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_20_AppWindowPresenterKind;
                userType.AddEnumValue("Default", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Default);
                userType.AddEnumValue("CompactOverlay", global::Microsoft.UI.Windowing.AppWindowPresenterKind.CompactOverlay);
                userType.AddEnumValue("FullScreen", global::Microsoft.UI.Windowing.AppWindowPresenterKind.FullScreen);
                userType.AddEnumValue("Overlapped", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Overlapped);
                xamlType = userType;
                break;

            case 21:   //  Double
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  WinUIEx.SystemBackdrop
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_22_SystemBackdrop;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Microsoft.UI.Xaml.Media.MicaBackdrop
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_23_MicaBackdrop;
                userType.StaticInitializer = StaticInitializer_23_MicaBackdrop;
                userType.AddMemberName("Kind");
                xamlType = userType;
                break;

            case 24:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Microsoft.UI.Composition.SystemBackdrops.MicaKind
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_25_MicaKind;
                userType.AddEnumValue("Base", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.Base);
                userType.AddEnumValue("BaseAlt", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.BaseAlt);
                xamlType = userType;
                break;

            case 26:   //  CommunityToolkit.WinUI.Animations.ImplicitAnimationSet
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObjectCollection"));
                userType.Activator = Activate_26_ImplicitAnimationSet;
                userType.StaticInitializer = StaticInitializer_26_ImplicitAnimationSet;
                userType.CollectionAdd = VectorAdd_26_ImplicitAnimationSet;
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.DependencyObjectCollection
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  CommunityToolkit.WinUI.Animations.OffsetAnimation
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>"));
                userType.Activator = Activate_29_OffsetAnimation;
                userType.StaticInitializer = StaticInitializer_29_OffsetAnimation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames");
                xamlType = userType;
                break;

            case 30:   //  CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>"));
                userType.StaticInitializer = StaticInitializer_30_ImplicitAnimation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames");
                userType.AddMemberName("ImplicitTarget");
                xamlType = userType;
                break;

            case 31:   //  CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation"));
                userType.StaticInitializer = StaticInitializer_31_Animation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames");
                userType.AddMemberName("KeyFrames");
                userType.AddMemberName("From");
                userType.AddMemberName("To");
                xamlType = userType;
                break;

            case 32:   //  CommunityToolkit.WinUI.Animations.Animation
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_32_Animation;
                userType.AddMemberName("EasingMode");
                userType.AddMemberName("Duration");
                userType.AddMemberName("Delay");
                userType.AddMemberName("EasingType");
                userType.AddMemberName("Repeat");
                userType.AddMemberName("DelayBehavior");
                xamlType = userType;
                break;

            case 33:   //  System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_33_IList;
                userType.CollectionAdd = VectorAdd_33_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_34_IKeyFrame;
                xamlType = userType;
                break;

            case 35:   //  System.Nullable`1<Microsoft.UI.Xaml.Media.Animation.EasingMode>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Microsoft.UI.Xaml.Media.Animation.EasingMode"));
                userType.BoxInstance = userType.BoxType<global::Microsoft.UI.Xaml.Media.Animation.EasingMode>;
                userType.StaticInitializer = StaticInitializer_35_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Microsoft.UI.Xaml.Media.Animation.EasingMode
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  System.Nullable`1<TimeSpan>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("TimeSpan"));
                userType.BoxInstance = userType.BoxType<global::System.TimeSpan>;
                userType.StaticInitializer = StaticInitializer_37_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  TimeSpan
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_38_TimeSpan;
                xamlType = userType;
                break;

            case 39:   //  System.Nullable`1<CommunityToolkit.WinUI.Animations.EasingType>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("CommunityToolkit.WinUI.Animations.EasingType"));
                userType.BoxInstance = userType.BoxType<global::CommunityToolkit.WinUI.Animations.EasingType>;
                userType.StaticInitializer = StaticInitializer_39_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  CommunityToolkit.WinUI.Animations.EasingType
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_40_EasingType;
                userType.AddEnumValue("Default", global::CommunityToolkit.WinUI.Animations.EasingType.Default);
                userType.AddEnumValue("Linear", global::CommunityToolkit.WinUI.Animations.EasingType.Linear);
                userType.AddEnumValue("Cubic", global::CommunityToolkit.WinUI.Animations.EasingType.Cubic);
                userType.AddEnumValue("Back", global::CommunityToolkit.WinUI.Animations.EasingType.Back);
                userType.AddEnumValue("Bounce", global::CommunityToolkit.WinUI.Animations.EasingType.Bounce);
                userType.AddEnumValue("Elastic", global::CommunityToolkit.WinUI.Animations.EasingType.Elastic);
                userType.AddEnumValue("Circle", global::CommunityToolkit.WinUI.Animations.EasingType.Circle);
                userType.AddEnumValue("Quadratic", global::CommunityToolkit.WinUI.Animations.EasingType.Quadratic);
                userType.AddEnumValue("Quartic", global::CommunityToolkit.WinUI.Animations.EasingType.Quartic);
                userType.AddEnumValue("Quintic", global::CommunityToolkit.WinUI.Animations.EasingType.Quintic);
                userType.AddEnumValue("Sine", global::CommunityToolkit.WinUI.Animations.EasingType.Sine);
                xamlType = userType;
                break;

            case 41:   //  CommunityToolkit.WinUI.Animations.RepeatOption
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_41_RepeatOption;
                userType.CreateFromStringMethod = x => (global::System.Object)global::CommunityToolkit.WinUI.Animations.RepeatOption.Parse(x);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  Microsoft.UI.Composition.AnimationDelayBehavior
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_42_AnimationDelayBehavior;
                userType.AddEnumValue("SetInitialValueAfterDelay", global::Microsoft.UI.Composition.AnimationDelayBehavior.SetInitialValueAfterDelay);
                userType.AddEnumValue("SetInitialValueBeforeDelay", global::Microsoft.UI.Composition.AnimationDelayBehavior.SetInitialValueBeforeDelay);
                xamlType = userType;
                break;

            case 43:   //  CommunityToolkit.WinUI.Animations.OpacityAnimation
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>"));
                userType.Activator = Activate_43_OpacityAnimation;
                userType.StaticInitializer = StaticInitializer_43_OpacityAnimation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames");
                xamlType = userType;
                break;

            case 44:   //  CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>"));
                userType.StaticInitializer = StaticInitializer_44_ImplicitAnimation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames");
                userType.AddMemberName("ImplicitTarget");
                xamlType = userType;
                break;

            case 45:   //  CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation"));
                userType.StaticInitializer = StaticInitializer_45_Animation;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames");
                userType.AddMemberName("KeyFrames");
                userType.AddMemberName("From");
                userType.AddMemberName("To");
                xamlType = userType;
                break;

            case 46:   //  System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_46_IList;
                userType.CollectionAdd = VectorAdd_46_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_47_IKeyFrame;
                xamlType = userType;
                break;

            case 48:   //  System.Nullable`1<Double>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Double"));
                userType.BoxInstance = userType.BoxType<global::System.Double>;
                userType.StaticInitializer = StaticInitializer_48_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  CommunityToolkit.WinUI.Controls.TitleBar
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_49_TitleBar;
                userType.StaticInitializer = StaticInitializer_49_TitleBar;
                userType.AddMemberName("Title");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("Icon");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("Content");
                userType.AddMemberName("Footer");
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsPaneButtonVisible");
                userType.AddMemberName("CompactStateBreakpoint");
                userType.AddMemberName("AutoConfigureCustomTitleBar");
                userType.AddMemberName("Window");
                xamlType = userType;
                break;

            case 50:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  CommunityToolkit.WinUI.Controls.DisplayMode
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_51_DisplayMode;
                userType.AddEnumValue("Standard", global::CommunityToolkit.WinUI.Controls.DisplayMode.Standard);
                userType.AddEnumValue("Tall", global::CommunityToolkit.WinUI.Controls.DisplayMode.Tall);
                xamlType = userType;
                break;

            case 52:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  Int32
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  DevWinUI.PagerControl
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_54_PagerControl;
                userType.StaticInitializer = StaticInitializer_54_PagerControl;
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("NumberOfPages");
                userType.AddMemberName("SelectedPageIndex");
                userType.AddMemberName("ButtonPanelAlwaysShowFirstLastPageIndex");
                userType.AddMemberName("FirstButtonVisibility");
                userType.AddMemberName("PreviousButtonVisibility");
                userType.AddMemberName("NextButtonVisibility");
                userType.AddMemberName("LastButtonVisibility");
                userType.AddMemberName("FirstButtonCommand");
                userType.AddMemberName("PreviousButtonCommand");
                userType.AddMemberName("NextButtonCommand");
                userType.AddMemberName("LastButtonCommand");
                userType.AddMemberName("FirstButtonStyle");
                userType.AddMemberName("PreviousButtonStyle");
                userType.AddMemberName("NextButtonStyle");
                userType.AddMemberName("LastButtonStyle");
                userType.AddMemberName("PrefixText");
                userType.AddMemberName("SuffixText");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 55:   //  DevWinUI.PagerControlDisplayMode
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_55_PagerControlDisplayMode;
                userType.AddEnumValue("Auto", global::DevWinUI.PagerControlDisplayMode.Auto);
                userType.AddEnumValue("ComboBox", global::DevWinUI.PagerControlDisplayMode.ComboBox);
                userType.AddEnumValue("NumberBox", global::DevWinUI.PagerControlDisplayMode.NumberBox);
                userType.AddEnumValue("ButtonPanel", global::DevWinUI.PagerControlDisplayMode.ButtonPanel);
                xamlType = userType;
                break;

            case 56:   //  DevWinUI.PagerControlButtonVisibility
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_56_PagerControlButtonVisibility;
                userType.AddEnumValue("Visible", global::DevWinUI.PagerControlButtonVisibility.Visible);
                userType.AddEnumValue("HiddenOnEdge", global::DevWinUI.PagerControlButtonVisibility.HiddenOnEdge);
                userType.AddEnumValue("Hidden", global::DevWinUI.PagerControlButtonVisibility.Hidden);
                xamlType = userType;
                break;

            case 57:   //  System.Windows.Input.ICommand
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_57_ICommand;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 58:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  DevWinUI.PagerControlTemplateSettings
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_59_PagerControlTemplateSettings;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 60:   //  FluentIcons.WinUI.SymbolIconExtension
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Markup.MarkupExtension"));
                userType.Activator = Activate_60_SymbolIconExtension;
                userType.StaticInitializer = StaticInitializer_60_SymbolIconExtension;
                userType.AddMemberName("Symbol");
                userType.AddMemberName("IconVariant");
                userType.AddMemberName("UseSegoeMetrics");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("Foreground");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 61:   //  Microsoft.UI.Xaml.Markup.MarkupExtension
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  System.Nullable`1<FluentIcons.Common.Symbol>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("FluentIcons.Common.Symbol"));
                userType.BoxInstance = userType.BoxType<global::FluentIcons.Common.Symbol>;
                userType.StaticInitializer = StaticInitializer_62_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  System.Nullable`1<FluentIcons.Common.IconVariant>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("FluentIcons.Common.IconVariant"));
                userType.BoxInstance = userType.BoxType<global::FluentIcons.Common.IconVariant>;
                userType.StaticInitializer = StaticInitializer_63_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  System.Nullable`1<Boolean>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Boolean"));
                userType.BoxInstance = userType.BoxType<global::System.Boolean>;
                userType.StaticInitializer = StaticInitializer_64_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 65:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 66:   //  MinecraftMods.MainWindow
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_66_MainWindow;
                userType.StaticInitializer = StaticInitializer_66_MainWindow;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 67:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_67_TreeViewNode;
                userType.StaticInitializer = StaticInitializer_67_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 68:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_68_IList;
                userType.CollectionAdd = VectorAdd_68_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.Controls.MarkdownTextBlockRns.CommunityToolkit_WinUI_Controls_MarkdownTextBlock_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.Controls.TitleBarRns.CommunityToolkit_WinUI_Controls_TitleBar_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::DevWinUI.DevWinUI_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::DevWinUI.DevWinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::WinUIEx.WinUIEx_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_SymbolIcon_Symbol(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIcon)instance;
            return that.Symbol;
        }
        private void set_1_SymbolIcon_Symbol(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIcon)instance;
            that.Symbol = (global::FluentIcons.Common.Symbol)Value;
        }
        private object get_2_SymbolIcon_IconVariant(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIcon)instance;
            return that.IconVariant;
        }
        private void set_2_SymbolIcon_IconVariant(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIcon)instance;
            that.IconVariant = (global::FluentIcons.Common.IconVariant)Value;
        }
        private object get_3_SymbolIcon_UseSegoeMetrics(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIcon)instance;
            return that.UseSegoeMetrics;
        }
        private void set_3_SymbolIcon_UseSegoeMetrics(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIcon)instance;
            that.UseSegoeMetrics = (global::System.Boolean)Value;
        }
        private object get_4_IconButton_Text(object instance)
        {
            var that = (global::MinecraftMods.Controls.IconButton)instance;
            return that.Text;
        }
        private void set_4_IconButton_Text(object instance, object Value)
        {
            var that = (global::MinecraftMods.Controls.IconButton)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_5_IconButton_Icon(object instance)
        {
            var that = (global::MinecraftMods.Controls.IconButton)instance;
            return that.Icon;
        }
        private void set_5_IconButton_Icon(object instance, object Value)
        {
            var that = (global::MinecraftMods.Controls.IconButton)instance;
            that.Icon = (global::FluentIcons.Common.Symbol)Value;
        }
        private object get_6_IconButton_Command(object instance)
        {
            var that = (global::MinecraftMods.Controls.IconButton)instance;
            return that.Command;
        }
        private void set_6_IconButton_Command(object instance, object Value)
        {
            var that = (global::MinecraftMods.Controls.IconButton)instance;
            that.Command = (global::CommunityToolkit.Mvvm.Input.IRelayCommand)Value;
        }
        private object get_7_WindowEx_WindowContent(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowContent;
        }
        private void set_7_WindowEx_WindowContent(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowContent = (global::System.Object)Value;
        }
        private object get_8_WindowEx_Title(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Title;
        }
        private void set_8_WindowEx_Title(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_9_WindowEx_AppWindow(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.AppWindow;
        }
        private object get_10_WindowEx_TaskBarIcon(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.TaskBarIcon;
        }
        private void set_10_WindowEx_TaskBarIcon(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.TaskBarIcon = (global::WinUIEx.Icon)Value;
        }
        private object get_11_WindowEx_PersistenceId(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PersistenceId;
        }
        private void set_11_WindowEx_PersistenceId(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PersistenceId = (global::System.String)Value;
        }
        private object get_12_WindowEx_IsTitleBarVisible(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsTitleBarVisible;
        }
        private void set_12_WindowEx_IsTitleBarVisible(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsTitleBarVisible = (global::System.Boolean)Value;
        }
        private object get_13_WindowEx_IsMinimizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMinimizable;
        }
        private void set_13_WindowEx_IsMinimizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMinimizable = (global::System.Boolean)Value;
        }
        private object get_14_WindowEx_IsMaximizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMaximizable;
        }
        private void set_14_WindowEx_IsMaximizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMaximizable = (global::System.Boolean)Value;
        }
        private object get_15_WindowEx_IsResizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsResizable;
        }
        private void set_15_WindowEx_IsResizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsResizable = (global::System.Boolean)Value;
        }
        private object get_16_WindowEx_WindowState(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowState;
        }
        private void set_16_WindowEx_WindowState(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowState = (global::WinUIEx.WindowState)Value;
        }
        private object get_17_WindowEx_IsShownInSwitchers(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsShownInSwitchers;
        }
        private void set_17_WindowEx_IsShownInSwitchers(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsShownInSwitchers = (global::System.Boolean)Value;
        }
        private object get_18_WindowEx_IsAlwaysOnTop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsAlwaysOnTop;
        }
        private void set_18_WindowEx_IsAlwaysOnTop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsAlwaysOnTop = (global::System.Boolean)Value;
        }
        private object get_19_WindowEx_Presenter(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Presenter;
        }
        private object get_20_WindowEx_PresenterKind(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PresenterKind;
        }
        private void set_20_WindowEx_PresenterKind(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PresenterKind = (global::Microsoft.UI.Windowing.AppWindowPresenterKind)Value;
        }
        private object get_21_WindowEx_Width(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Width;
        }
        private void set_21_WindowEx_Width(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_22_WindowEx_Height(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Height;
        }
        private void set_22_WindowEx_Height(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_23_WindowEx_MinWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinWidth;
        }
        private void set_23_WindowEx_MinWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinWidth = (global::System.Double)Value;
        }
        private object get_24_WindowEx_MinHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinHeight;
        }
        private void set_24_WindowEx_MinHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinHeight = (global::System.Double)Value;
        }
        private object get_25_WindowEx_MaxWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxWidth;
        }
        private void set_25_WindowEx_MaxWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_26_WindowEx_MaxHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxHeight;
        }
        private void set_26_WindowEx_MaxHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxHeight = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_27_WindowEx_Backdrop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Backdrop;
        }
        private void set_27_WindowEx_Backdrop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Backdrop = (global::WinUIEx.SystemBackdrop)Value;
        }
#pragma warning restore 0618
        private object get_28_MicaBackdrop_Kind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            return that.Kind;
        }
        private void set_28_MicaBackdrop_Kind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            that.Kind = (global::Microsoft.UI.Composition.SystemBackdrops.MicaKind)Value;
        }
        private object get_29_Animation_KeyFrames(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.KeyFrames;
        }
        private void set_29_Animation_KeyFrames(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.KeyFrames = (global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Numerics.Vector3>>)Value;
        }
        private object get_30_Animation_EasingMode(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.EasingMode;
        }
        private void set_30_Animation_EasingMode(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.EasingMode = (global::System.Nullable<global::Microsoft.UI.Xaml.Media.Animation.EasingMode>)Value;
        }
        private object get_31_Animation_From(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.From;
        }
        private void set_31_Animation_From(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.From = (global::System.String)Value;
        }
        private object get_32_Animation_To(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.To;
        }
        private void set_32_Animation_To(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.To = (global::System.String)Value;
        }
        private object get_33_Animation_Duration(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.Duration;
        }
        private void set_33_Animation_Duration(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.Duration = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_34_ImplicitAnimation_ImplicitTarget(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.String, global::System.Numerics.Vector3>)instance;
            return that.ImplicitTarget;
        }
        private void set_34_ImplicitAnimation_ImplicitTarget(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.String, global::System.Numerics.Vector3>)instance;
            that.ImplicitTarget = (global::System.String)Value;
        }
        private object get_35_Animation_Delay(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.Delay;
        }
        private void set_35_Animation_Delay(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.Delay = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_36_Animation_EasingType(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.EasingType;
        }
        private void set_36_Animation_EasingType(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.EasingType = (global::System.Nullable<global::CommunityToolkit.WinUI.Animations.EasingType>)Value;
        }
        private object get_37_Animation_Repeat(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.Repeat;
        }
        private void set_37_Animation_Repeat(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.Repeat = (global::CommunityToolkit.WinUI.Animations.RepeatOption)Value;
        }
        private object get_38_Animation_DelayBehavior(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            return that.DelayBehavior;
        }
        private void set_38_Animation_DelayBehavior(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation)instance;
            that.DelayBehavior = (global::Microsoft.UI.Composition.AnimationDelayBehavior)Value;
        }
        private object get_39_Animation_KeyFrames(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.KeyFrames;
        }
        private void set_39_Animation_KeyFrames(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.KeyFrames = (global::System.Collections.Generic.IList<global::CommunityToolkit.WinUI.Animations.IKeyFrame<global::System.Double>>)Value;
        }
        private object get_40_Animation_From(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.From;
        }
        private void set_40_Animation_From(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.From = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_41_Animation_To(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.To;
        }
        private void set_41_Animation_To(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.Animation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.To = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_42_ImplicitAnimation_ImplicitTarget(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            return that.ImplicitTarget;
        }
        private void set_42_ImplicitAnimation_ImplicitTarget(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Animations.ImplicitAnimation<global::System.Nullable<global::System.Double>, global::System.Double>)instance;
            that.ImplicitTarget = (global::System.String)Value;
        }
        private object get_43_TitleBar_Title(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.Title;
        }
        private void set_43_TitleBar_Title(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_44_TitleBar_DisplayMode(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.DisplayMode;
        }
        private void set_44_TitleBar_DisplayMode(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.DisplayMode = (global::CommunityToolkit.WinUI.Controls.DisplayMode)Value;
        }
        private object get_45_TitleBar_Icon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.Icon;
        }
        private void set_45_TitleBar_Icon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_46_TitleBar_Subtitle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.Subtitle;
        }
        private void set_46_TitleBar_Subtitle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_47_TitleBar_Content(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.Content;
        }
        private void set_47_TitleBar_Content(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_48_TitleBar_Footer(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.Footer;
        }
        private void set_48_TitleBar_Footer(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.Footer = (global::System.Object)Value;
        }
        private object get_49_TitleBar_IsBackButtonVisible(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.IsBackButtonVisible;
        }
        private void set_49_TitleBar_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.IsBackButtonVisible = (global::System.Boolean)Value;
        }
        private object get_50_TitleBar_IsPaneButtonVisible(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.IsPaneButtonVisible;
        }
        private void set_50_TitleBar_IsPaneButtonVisible(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.IsPaneButtonVisible = (global::System.Boolean)Value;
        }
        private object get_51_TitleBar_CompactStateBreakpoint(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.CompactStateBreakpoint;
        }
        private void set_51_TitleBar_CompactStateBreakpoint(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.CompactStateBreakpoint = (global::System.Int32)Value;
        }
        private object get_52_TitleBar_AutoConfigureCustomTitleBar(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.AutoConfigureCustomTitleBar;
        }
        private void set_52_TitleBar_AutoConfigureCustomTitleBar(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.AutoConfigureCustomTitleBar = (global::System.Boolean)Value;
        }
        private object get_53_TitleBar_Window(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            return that.Window;
        }
        private void set_53_TitleBar_Window(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.TitleBar)instance;
            that.Window = (global::Microsoft.UI.Xaml.Window)Value;
        }
        private object get_54_PagerControl_DisplayMode(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.DisplayMode;
        }
        private void set_54_PagerControl_DisplayMode(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.DisplayMode = (global::DevWinUI.PagerControlDisplayMode)Value;
        }
        private object get_55_PagerControl_NumberOfPages(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.NumberOfPages;
        }
        private void set_55_PagerControl_NumberOfPages(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.NumberOfPages = (global::System.Int32)Value;
        }
        private object get_56_PagerControl_SelectedPageIndex(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.SelectedPageIndex;
        }
        private void set_56_PagerControl_SelectedPageIndex(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.SelectedPageIndex = (global::System.Int32)Value;
        }
        private object get_57_PagerControl_ButtonPanelAlwaysShowFirstLastPageIndex(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.ButtonPanelAlwaysShowFirstLastPageIndex;
        }
        private void set_57_PagerControl_ButtonPanelAlwaysShowFirstLastPageIndex(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.ButtonPanelAlwaysShowFirstLastPageIndex = (global::System.Boolean)Value;
        }
        private object get_58_PagerControl_FirstButtonVisibility(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.FirstButtonVisibility;
        }
        private void set_58_PagerControl_FirstButtonVisibility(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.FirstButtonVisibility = (global::DevWinUI.PagerControlButtonVisibility)Value;
        }
        private object get_59_PagerControl_PreviousButtonVisibility(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.PreviousButtonVisibility;
        }
        private void set_59_PagerControl_PreviousButtonVisibility(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.PreviousButtonVisibility = (global::DevWinUI.PagerControlButtonVisibility)Value;
        }
        private object get_60_PagerControl_NextButtonVisibility(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.NextButtonVisibility;
        }
        private void set_60_PagerControl_NextButtonVisibility(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.NextButtonVisibility = (global::DevWinUI.PagerControlButtonVisibility)Value;
        }
        private object get_61_PagerControl_LastButtonVisibility(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.LastButtonVisibility;
        }
        private void set_61_PagerControl_LastButtonVisibility(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.LastButtonVisibility = (global::DevWinUI.PagerControlButtonVisibility)Value;
        }
        private object get_62_PagerControl_FirstButtonCommand(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.FirstButtonCommand;
        }
        private void set_62_PagerControl_FirstButtonCommand(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.FirstButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_63_PagerControl_PreviousButtonCommand(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.PreviousButtonCommand;
        }
        private void set_63_PagerControl_PreviousButtonCommand(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.PreviousButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_64_PagerControl_NextButtonCommand(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.NextButtonCommand;
        }
        private void set_64_PagerControl_NextButtonCommand(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.NextButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_65_PagerControl_LastButtonCommand(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.LastButtonCommand;
        }
        private void set_65_PagerControl_LastButtonCommand(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.LastButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_66_PagerControl_FirstButtonStyle(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.FirstButtonStyle;
        }
        private void set_66_PagerControl_FirstButtonStyle(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.FirstButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_67_PagerControl_PreviousButtonStyle(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.PreviousButtonStyle;
        }
        private void set_67_PagerControl_PreviousButtonStyle(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.PreviousButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_68_PagerControl_NextButtonStyle(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.NextButtonStyle;
        }
        private void set_68_PagerControl_NextButtonStyle(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.NextButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_69_PagerControl_LastButtonStyle(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.LastButtonStyle;
        }
        private void set_69_PagerControl_LastButtonStyle(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.LastButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_70_PagerControl_PrefixText(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.PrefixText;
        }
        private void set_70_PagerControl_PrefixText(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.PrefixText = (global::System.String)Value;
        }
        private object get_71_PagerControl_SuffixText(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.SuffixText;
        }
        private void set_71_PagerControl_SuffixText(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.SuffixText = (global::System.String)Value;
        }
        private object get_72_PagerControl_TemplateSettings(object instance)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            return that.TemplateSettings;
        }
        private void set_72_PagerControl_TemplateSettings(object instance, object Value)
        {
            var that = (global::DevWinUI.PagerControl)instance;
            that.TemplateSettings = (global::DevWinUI.PagerControlTemplateSettings)Value;
        }
        private object get_73_SymbolIconExtension_Symbol(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            return that.Symbol;
        }
        private void set_73_SymbolIconExtension_Symbol(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            that.Symbol = (global::System.Nullable<global::FluentIcons.Common.Symbol>)Value;
        }
        private object get_74_SymbolIconExtension_IconVariant(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            return that.IconVariant;
        }
        private void set_74_SymbolIconExtension_IconVariant(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            that.IconVariant = (global::System.Nullable<global::FluentIcons.Common.IconVariant>)Value;
        }
        private object get_75_SymbolIconExtension_UseSegoeMetrics(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            return that.UseSegoeMetrics;
        }
        private void set_75_SymbolIconExtension_UseSegoeMetrics(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            that.UseSegoeMetrics = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_76_SymbolIconExtension_FontSize(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            return that.FontSize;
        }
        private void set_76_SymbolIconExtension_FontSize(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            that.FontSize = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_77_SymbolIconExtension_Foreground(object instance)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            return that.Foreground;
        }
        private void set_77_SymbolIconExtension_Foreground(object instance, object Value)
        {
            var that = (global::FluentIcons.WinUI.SymbolIconExtension)instance;
            that.Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_78_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_79_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_79_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_80_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_81_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_82_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_82_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_83_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_83_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_84_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember xamlMember = null;
            global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "FluentIcons.WinUI.SymbolIcon.Symbol":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIcon");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Symbol", "FluentIcons.Common.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_SymbolIcon_Symbol;
                xamlMember.Setter = set_1_SymbolIcon_Symbol;
                break;
            case "FluentIcons.WinUI.SymbolIcon.IconVariant":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIcon");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IconVariant", "FluentIcons.Common.IconVariant");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_SymbolIcon_IconVariant;
                xamlMember.Setter = set_2_SymbolIcon_IconVariant;
                break;
            case "FluentIcons.WinUI.SymbolIcon.UseSegoeMetrics":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIcon");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "UseSegoeMetrics", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_SymbolIcon_UseSegoeMetrics;
                xamlMember.Setter = set_3_SymbolIcon_UseSegoeMetrics;
                break;
            case "MinecraftMods.Controls.IconButton.Text":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MinecraftMods.Controls.IconButton");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_IconButton_Text;
                xamlMember.Setter = set_4_IconButton_Text;
                break;
            case "MinecraftMods.Controls.IconButton.Icon":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MinecraftMods.Controls.IconButton");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Icon", "FluentIcons.Common.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_IconButton_Icon;
                xamlMember.Setter = set_5_IconButton_Icon;
                break;
            case "MinecraftMods.Controls.IconButton.Command":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MinecraftMods.Controls.IconButton");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Command", "CommunityToolkit.Mvvm.Input.IRelayCommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_IconButton_Command;
                xamlMember.Setter = set_6_IconButton_Command;
                break;
            case "WinUIEx.WindowEx.WindowContent":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "WindowContent", "Object");
                xamlMember.Getter = get_7_WindowEx_WindowContent;
                xamlMember.Setter = set_7_WindowEx_WindowContent;
                break;
            case "WinUIEx.WindowEx.Title":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_8_WindowEx_Title;
                xamlMember.Setter = set_8_WindowEx_Title;
                break;
            case "WinUIEx.WindowEx.AppWindow":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "AppWindow", "Microsoft.UI.Windowing.AppWindow");
                xamlMember.Getter = get_9_WindowEx_AppWindow;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.TaskBarIcon":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "TaskBarIcon", "WinUIEx.Icon");
                xamlMember.Getter = get_10_WindowEx_TaskBarIcon;
                xamlMember.Setter = set_10_WindowEx_TaskBarIcon;
                break;
            case "WinUIEx.WindowEx.PersistenceId":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "PersistenceId", "String");
                xamlMember.Getter = get_11_WindowEx_PersistenceId;
                xamlMember.Setter = set_11_WindowEx_PersistenceId;
                break;
            case "WinUIEx.WindowEx.IsTitleBarVisible":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsTitleBarVisible", "Boolean");
                xamlMember.Getter = get_12_WindowEx_IsTitleBarVisible;
                xamlMember.Setter = set_12_WindowEx_IsTitleBarVisible;
                break;
            case "WinUIEx.WindowEx.IsMinimizable":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsMinimizable", "Boolean");
                xamlMember.Getter = get_13_WindowEx_IsMinimizable;
                xamlMember.Setter = set_13_WindowEx_IsMinimizable;
                break;
            case "WinUIEx.WindowEx.IsMaximizable":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsMaximizable", "Boolean");
                xamlMember.Getter = get_14_WindowEx_IsMaximizable;
                xamlMember.Setter = set_14_WindowEx_IsMaximizable;
                break;
            case "WinUIEx.WindowEx.IsResizable":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsResizable", "Boolean");
                xamlMember.Getter = get_15_WindowEx_IsResizable;
                xamlMember.Setter = set_15_WindowEx_IsResizable;
                break;
            case "WinUIEx.WindowEx.WindowState":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "WindowState", "WinUIEx.WindowState");
                xamlMember.Getter = get_16_WindowEx_WindowState;
                xamlMember.Setter = set_16_WindowEx_WindowState;
                break;
            case "WinUIEx.WindowEx.IsShownInSwitchers":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsShownInSwitchers", "Boolean");
                xamlMember.Getter = get_17_WindowEx_IsShownInSwitchers;
                xamlMember.Setter = set_17_WindowEx_IsShownInSwitchers;
                break;
            case "WinUIEx.WindowEx.IsAlwaysOnTop":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsAlwaysOnTop", "Boolean");
                xamlMember.Getter = get_18_WindowEx_IsAlwaysOnTop;
                xamlMember.Setter = set_18_WindowEx_IsAlwaysOnTop;
                break;
            case "WinUIEx.WindowEx.Presenter":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Presenter", "Microsoft.UI.Windowing.AppWindowPresenter");
                xamlMember.Getter = get_19_WindowEx_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.PresenterKind":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "PresenterKind", "Microsoft.UI.Windowing.AppWindowPresenterKind");
                xamlMember.Getter = get_20_WindowEx_PresenterKind;
                xamlMember.Setter = set_20_WindowEx_PresenterKind;
                break;
            case "WinUIEx.WindowEx.Width":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_21_WindowEx_Width;
                xamlMember.Setter = set_21_WindowEx_Width;
                break;
            case "WinUIEx.WindowEx.Height":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_22_WindowEx_Height;
                xamlMember.Setter = set_22_WindowEx_Height;
                break;
            case "WinUIEx.WindowEx.MinWidth":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "MinWidth", "Double");
                xamlMember.Getter = get_23_WindowEx_MinWidth;
                xamlMember.Setter = set_23_WindowEx_MinWidth;
                break;
            case "WinUIEx.WindowEx.MinHeight":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "MinHeight", "Double");
                xamlMember.Getter = get_24_WindowEx_MinHeight;
                xamlMember.Setter = set_24_WindowEx_MinHeight;
                break;
            case "WinUIEx.WindowEx.MaxWidth":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.Getter = get_25_WindowEx_MaxWidth;
                xamlMember.Setter = set_25_WindowEx_MaxWidth;
                break;
            case "WinUIEx.WindowEx.MaxHeight":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "MaxHeight", "Double");
                xamlMember.Getter = get_26_WindowEx_MaxHeight;
                xamlMember.Setter = set_26_WindowEx_MaxHeight;
                break;
            case "WinUIEx.WindowEx.Backdrop":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Backdrop", "WinUIEx.SystemBackdrop");
                xamlMember.Getter = get_27_WindowEx_Backdrop;
                xamlMember.Setter = set_27_WindowEx_Backdrop;
                break;
            case "Microsoft.UI.Xaml.Media.MicaBackdrop.Kind":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Media.MicaBackdrop");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Kind", "Microsoft.UI.Composition.SystemBackdrops.MicaKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_MicaBackdrop_Kind;
                xamlMember.Setter = set_28_MicaBackdrop_Kind;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.KeyFrames":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "KeyFrames", "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<System.Numerics.Vector3>>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_Animation_KeyFrames;
                xamlMember.Setter = set_29_Animation_KeyFrames;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.EasingMode":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "EasingMode", "System.Nullable`1<Microsoft.UI.Xaml.Media.Animation.EasingMode>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_Animation_EasingMode;
                xamlMember.Setter = set_30_Animation_EasingMode;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.From":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "From", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_Animation_From;
                xamlMember.Setter = set_31_Animation_From;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>.To":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "To", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_Animation_To;
                xamlMember.Setter = set_32_Animation_To;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.Duration":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Duration", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_Animation_Duration;
                xamlMember.Setter = set_33_Animation_Duration;
                break;
            case "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>.ImplicitTarget":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<String, System.Numerics.Vector3>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "ImplicitTarget", "String");
                xamlMember.Getter = get_34_ImplicitAnimation_ImplicitTarget;
                xamlMember.Setter = set_34_ImplicitAnimation_ImplicitTarget;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.Delay":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Delay", "System.Nullable`1<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_Animation_Delay;
                xamlMember.Setter = set_35_Animation_Delay;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.EasingType":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "EasingType", "System.Nullable`1<CommunityToolkit.WinUI.Animations.EasingType>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_Animation_EasingType;
                xamlMember.Setter = set_36_Animation_EasingType;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.Repeat":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Repeat", "CommunityToolkit.WinUI.Animations.RepeatOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_Animation_Repeat;
                xamlMember.Setter = set_37_Animation_Repeat;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation.DelayBehavior":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "DelayBehavior", "Microsoft.UI.Composition.AnimationDelayBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_Animation_DelayBehavior;
                xamlMember.Setter = set_38_Animation_DelayBehavior;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.KeyFrames":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "KeyFrames", "System.Collections.Generic.IList`1<CommunityToolkit.WinUI.Animations.IKeyFrame`1<Double>>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_Animation_KeyFrames;
                xamlMember.Setter = set_39_Animation_KeyFrames;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.From":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "From", "System.Nullable`1<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_Animation_From;
                xamlMember.Setter = set_40_Animation_From;
                break;
            case "CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>.To":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.Animation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "To", "System.Nullable`1<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_Animation_To;
                xamlMember.Setter = set_41_Animation_To;
                break;
            case "CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>.ImplicitTarget":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Animations.ImplicitAnimation`2<System.Nullable`1<Double>, Double>");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "ImplicitTarget", "String");
                xamlMember.Getter = get_42_ImplicitAnimation_ImplicitTarget;
                xamlMember.Setter = set_42_ImplicitAnimation_ImplicitTarget;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.Title":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_TitleBar_Title;
                xamlMember.Setter = set_43_TitleBar_Title;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.DisplayMode":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "DisplayMode", "CommunityToolkit.WinUI.Controls.DisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_TitleBar_DisplayMode;
                xamlMember.Setter = set_44_TitleBar_DisplayMode;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.Icon":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_TitleBar_Icon;
                xamlMember.Setter = set_45_TitleBar_Icon;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.Subtitle":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_TitleBar_Subtitle;
                xamlMember.Setter = set_46_TitleBar_Subtitle;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.Content":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_TitleBar_Content;
                xamlMember.Setter = set_47_TitleBar_Content;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.Footer":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Footer", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_TitleBar_Footer;
                xamlMember.Setter = set_48_TitleBar_Footer;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.IsBackButtonVisible":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_TitleBar_IsBackButtonVisible;
                xamlMember.Setter = set_49_TitleBar_IsBackButtonVisible;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.IsPaneButtonVisible":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsPaneButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_TitleBar_IsPaneButtonVisible;
                xamlMember.Setter = set_50_TitleBar_IsPaneButtonVisible;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.CompactStateBreakpoint":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "CompactStateBreakpoint", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_TitleBar_CompactStateBreakpoint;
                xamlMember.Setter = set_51_TitleBar_CompactStateBreakpoint;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.AutoConfigureCustomTitleBar":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "AutoConfigureCustomTitleBar", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_TitleBar_AutoConfigureCustomTitleBar;
                xamlMember.Setter = set_52_TitleBar_AutoConfigureCustomTitleBar;
                break;
            case "CommunityToolkit.WinUI.Controls.TitleBar.Window":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.TitleBar");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Window", "Microsoft.UI.Xaml.Window");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_TitleBar_Window;
                xamlMember.Setter = set_53_TitleBar_Window;
                break;
            case "DevWinUI.PagerControl.DisplayMode":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "DisplayMode", "DevWinUI.PagerControlDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_PagerControl_DisplayMode;
                xamlMember.Setter = set_54_PagerControl_DisplayMode;
                break;
            case "DevWinUI.PagerControl.NumberOfPages":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "NumberOfPages", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_PagerControl_NumberOfPages;
                xamlMember.Setter = set_55_PagerControl_NumberOfPages;
                break;
            case "DevWinUI.PagerControl.SelectedPageIndex":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "SelectedPageIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_PagerControl_SelectedPageIndex;
                xamlMember.Setter = set_56_PagerControl_SelectedPageIndex;
                break;
            case "DevWinUI.PagerControl.ButtonPanelAlwaysShowFirstLastPageIndex":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "ButtonPanelAlwaysShowFirstLastPageIndex", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_PagerControl_ButtonPanelAlwaysShowFirstLastPageIndex;
                xamlMember.Setter = set_57_PagerControl_ButtonPanelAlwaysShowFirstLastPageIndex;
                break;
            case "DevWinUI.PagerControl.FirstButtonVisibility":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "FirstButtonVisibility", "DevWinUI.PagerControlButtonVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_PagerControl_FirstButtonVisibility;
                xamlMember.Setter = set_58_PagerControl_FirstButtonVisibility;
                break;
            case "DevWinUI.PagerControl.PreviousButtonVisibility":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "PreviousButtonVisibility", "DevWinUI.PagerControlButtonVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_PagerControl_PreviousButtonVisibility;
                xamlMember.Setter = set_59_PagerControl_PreviousButtonVisibility;
                break;
            case "DevWinUI.PagerControl.NextButtonVisibility":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "NextButtonVisibility", "DevWinUI.PagerControlButtonVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_PagerControl_NextButtonVisibility;
                xamlMember.Setter = set_60_PagerControl_NextButtonVisibility;
                break;
            case "DevWinUI.PagerControl.LastButtonVisibility":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "LastButtonVisibility", "DevWinUI.PagerControlButtonVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_PagerControl_LastButtonVisibility;
                xamlMember.Setter = set_61_PagerControl_LastButtonVisibility;
                break;
            case "DevWinUI.PagerControl.FirstButtonCommand":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "FirstButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_PagerControl_FirstButtonCommand;
                xamlMember.Setter = set_62_PagerControl_FirstButtonCommand;
                break;
            case "DevWinUI.PagerControl.PreviousButtonCommand":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "PreviousButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_PagerControl_PreviousButtonCommand;
                xamlMember.Setter = set_63_PagerControl_PreviousButtonCommand;
                break;
            case "DevWinUI.PagerControl.NextButtonCommand":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "NextButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_PagerControl_NextButtonCommand;
                xamlMember.Setter = set_64_PagerControl_NextButtonCommand;
                break;
            case "DevWinUI.PagerControl.LastButtonCommand":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "LastButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_PagerControl_LastButtonCommand;
                xamlMember.Setter = set_65_PagerControl_LastButtonCommand;
                break;
            case "DevWinUI.PagerControl.FirstButtonStyle":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "FirstButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_PagerControl_FirstButtonStyle;
                xamlMember.Setter = set_66_PagerControl_FirstButtonStyle;
                break;
            case "DevWinUI.PagerControl.PreviousButtonStyle":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "PreviousButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_PagerControl_PreviousButtonStyle;
                xamlMember.Setter = set_67_PagerControl_PreviousButtonStyle;
                break;
            case "DevWinUI.PagerControl.NextButtonStyle":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "NextButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_PagerControl_NextButtonStyle;
                xamlMember.Setter = set_68_PagerControl_NextButtonStyle;
                break;
            case "DevWinUI.PagerControl.LastButtonStyle":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "LastButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_PagerControl_LastButtonStyle;
                xamlMember.Setter = set_69_PagerControl_LastButtonStyle;
                break;
            case "DevWinUI.PagerControl.PrefixText":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "PrefixText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_PagerControl_PrefixText;
                xamlMember.Setter = set_70_PagerControl_PrefixText;
                break;
            case "DevWinUI.PagerControl.SuffixText":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "SuffixText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_PagerControl_SuffixText;
                xamlMember.Setter = set_71_PagerControl_SuffixText;
                break;
            case "DevWinUI.PagerControl.TemplateSettings":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DevWinUI.PagerControl");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "TemplateSettings", "DevWinUI.PagerControlTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_PagerControl_TemplateSettings;
                xamlMember.Setter = set_72_PagerControl_TemplateSettings;
                break;
            case "FluentIcons.WinUI.SymbolIconExtension.Symbol":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIconExtension");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Symbol", "System.Nullable`1<FluentIcons.Common.Symbol>");
                xamlMember.Getter = get_73_SymbolIconExtension_Symbol;
                xamlMember.Setter = set_73_SymbolIconExtension_Symbol;
                break;
            case "FluentIcons.WinUI.SymbolIconExtension.IconVariant":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIconExtension");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IconVariant", "System.Nullable`1<FluentIcons.Common.IconVariant>");
                xamlMember.Getter = get_74_SymbolIconExtension_IconVariant;
                xamlMember.Setter = set_74_SymbolIconExtension_IconVariant;
                break;
            case "FluentIcons.WinUI.SymbolIconExtension.UseSegoeMetrics":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIconExtension");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "UseSegoeMetrics", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_75_SymbolIconExtension_UseSegoeMetrics;
                xamlMember.Setter = set_75_SymbolIconExtension_UseSegoeMetrics;
                break;
            case "FluentIcons.WinUI.SymbolIconExtension.FontSize":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIconExtension");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "FontSize", "System.Nullable`1<Double>");
                xamlMember.Getter = get_76_SymbolIconExtension_FontSize;
                xamlMember.Setter = set_76_SymbolIconExtension_FontSize;
                break;
            case "FluentIcons.WinUI.SymbolIconExtension.Foreground":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FluentIcons.WinUI.SymbolIconExtension");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_77_SymbolIconExtension_Foreground;
                xamlMember.Setter = set_77_SymbolIconExtension_Foreground;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_78_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_TreeViewNode_Content;
                xamlMember.Setter = set_79_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_82_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_82_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_83_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_84_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, 
            global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void StaticInitializer();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlUserType : global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, 
            global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            StaticInitializer();
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return global::System.Convert.ChangeType(value, global::System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public StaticInitializer StaticInitializer { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MinecraftMods.MinecraftMods_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

