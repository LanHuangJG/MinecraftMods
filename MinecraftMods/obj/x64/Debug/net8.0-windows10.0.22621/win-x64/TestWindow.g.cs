#pragma checksum "C:\Users\15970\source\repos\MinecraftMods\MinecraftMods\TestWindow.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "B32A46CAFC00E837786A9AF5D9A84EA34B9ADDA8A8F5C2B85B8203615EBB367E"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MinecraftMods
{
    partial class TestWindow : 
        global::Microsoft.UI.Xaml.Window, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationView_MenuItemsSource(global::Microsoft.UI.Xaml.Controls.NavigationView obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.MenuItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_FrameworkElement_Tag(global::Microsoft.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Tag = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ContentControl_Content(global::Microsoft.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationViewItemBase_IsSelected(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase obj, global::System.Boolean value)
            {
                obj.IsSelected = value;
            }
            public static void Set_Richasy_WinUI_Share_Base_AppNavigationViewItem_ShowUnread(global::Richasy.WinUI.Share.Base.AppNavigationViewItem obj, global::System.Boolean value)
            {
                obj.ShowUnread = value;
            }
            public static void Set_Richasy_WinUI_Share_Base_AppNavigationViewItem_Symbol(global::Richasy.WinUI.Share.Base.AppNavigationViewItem obj, global::FluentIcons.Common.Symbol value)
            {
                obj.Symbol = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class TestWindow_obj3_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ITestWindow_Bindings
        {
            private global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3ContentDisabled = false;
            private static bool isobj3IsSelectedDisabled = false;
            private static bool isobj3ShowUnreadDisabled = false;
            private static bool isobj3SymbolDisabled = false;
            private static bool isobj3TagDisabled = false;

            private TestWindow_obj3_BindingsTracking bindingsTracking;

            public TestWindow_obj3_Bindings()
            {
                this.bindingsTracking = new TestWindow_obj3_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 22 && columnNumber == 6)
                {
                    isobj3ContentDisabled = true;
                }
                else if (lineNumber == 23 && columnNumber == 6)
                {
                    isobj3IsSelectedDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 6)
                {
                    isobj3ShowUnreadDisabled = true;
                }
                else if (lineNumber == 27 && columnNumber == 6)
                {
                    isobj3SymbolDisabled = true;
                }
                else if (lineNumber == 28 && columnNumber == 6)
                {
                    isobj3TagDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // TestWindow.xaml line 19
                        this.obj3 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Richasy.WinUI.Share.Base.AppNavigationViewItem>(target));
                        this.bindingsTracking.RegisterTwoWayListener_3((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem));
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            var rootElement = (this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem);
                            if (rootElement != null)
                            {
                                rootElement.DataContextChanged -= this.DataContextChangedHandler;
                            }
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel>(item), 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // ITestWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Title(obj.Title, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_IsSelected(obj.IsSelected, phase);
                        this.Update_ShowUnread(obj.ShowUnread, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Symbol(obj.Symbol, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // TestWindow.xaml line 19
                    if (!isobj3TagDisabled)
                    {
                        if ((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_FrameworkElement_Tag((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem), obj, null);
                        }
                    }
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // TestWindow.xaml line 19
                    if (!isobj3ContentDisabled)
                    {
                        if ((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ContentControl_Content((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem), obj, null);
                        }
                    }
                }
            }
            private void Update_IsSelected(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // TestWindow.xaml line 19
                    if (!isobj3IsSelectedDisabled)
                    {
                        if ((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationViewItemBase_IsSelected((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem), obj);
                        }
                    }
                }
            }
            private void Update_ShowUnread(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // TestWindow.xaml line 19
                    if (!isobj3ShowUnreadDisabled)
                    {
                        if ((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem) != null)
                        {
                            XamlBindingSetters.Set_Richasy_WinUI_Share_Base_AppNavigationViewItem_ShowUnread((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem), obj);
                        }
                    }
                }
            }
            private void Update_Symbol(global::FluentIcons.Common.Symbol obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // TestWindow.xaml line 19
                    if (!isobj3SymbolDisabled)
                    {
                        if ((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem) != null)
                        {
                            XamlBindingSetters.Set_Richasy_WinUI_Share_Base_AppNavigationViewItem_Symbol((this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem), obj);
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_IsSelected()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.IsSelected = (this.obj3.Target as global::Richasy.WinUI.Share.Base.AppNavigationViewItem).IsSelected;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class TestWindow_obj3_BindingsTracking
            {
                private global::System.WeakReference<TestWindow_obj3_Bindings> weakRefToBindingObj; 

                public TestWindow_obj3_BindingsTracking(TestWindow_obj3_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TestWindow_obj3_Bindings>(obj);
                }

                public TestWindow_obj3_Bindings TryGetBindingObject()
                {
                    TestWindow_obj3_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TestWindow_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel obj = sender as global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_IsSelected(obj.IsSelected, DATA_CHANGED);
                                bindings.Update_ShowUnread(obj.ShowUnread, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsSelected":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsSelected(obj.IsSelected, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowUnread":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ShowUnread(obj.ShowUnread, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel obj)
                {
                    TestWindow_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::Richasy.WinUI.Share.Base.AppNavigationViewItem sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelectedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_IsSelected();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class TestWindow_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ITestWindow_Bindings
        {
            private global::MinecraftMods.TestWindow dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.NavigationView obj4;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4MenuItemsSourceDisabled = false;

            private TestWindow_obj1_BindingsTracking bindingsTracking;

            public TestWindow_obj1_Bindings()
            {
                this.bindingsTracking = new TestWindow_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 35 && columnNumber == 4)
                {
                    isobj4MenuItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // TestWindow.xaml line 31
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NavigationView>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ITestWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::MinecraftMods.TestWindow>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_M_GetMenuItems_371857150(int phase)
            {
                global::System.Collections.Generic.IReadOnlyList<global::Richasy.WinUI.Share.ViewModels.AppNavigationItemViewModel> result = this.dataRoot.GetMenuItems();
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // TestWindow.xaml line 31
                    if (!isobj4MenuItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationView_MenuItemsSource(this.obj4, result, null);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MinecraftMods.TestWindow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_M_GetMenuItems_371857150(phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_M_GetMenuItems_371857150(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj4MenuItemsSourceDisabled)
                    {
                        this.PendingFunctionBindings["M_GetMenuItems_371857150"] = new InvokeFunctionDelegate(this.Invoke_M_GetMenuItems_371857150); 
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class TestWindow_obj1_BindingsTracking
            {
                private global::System.WeakReference<TestWindow_obj1_Bindings> weakRefToBindingObj; 

                public TestWindow_obj1_BindingsTracking(TestWindow_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TestWindow_obj1_Bindings>(obj);
                }

                public TestWindow_obj1_Bindings TryGetBindingObject()
                {
                    TestWindow_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                }

            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 4: // TestWindow.xaml line 31
                {
                    this.NavView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NavigationView>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // TestWindow.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Window element1 = (global::Microsoft.UI.Xaml.Window)target;
                    TestWindow_obj1_Bindings bindings = new TestWindow_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Activated += bindings.Activated;
                }
                break;
            case 3: // TestWindow.xaml line 19
                {                    
                    global::Richasy.WinUI.Share.Base.AppNavigationViewItem element3 = (global::Richasy.WinUI.Share.Base.AppNavigationViewItem)target;
                    TestWindow_obj3_Bindings bindings = new TestWindow_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

